ca65 V2.19 - Git de30a57
Main file   : pacman.asm
Current file: pacman.asm

000000r 1               .setcpu "6502"
000000r 1               .feature c_comments						; Allow C language type comments (/* comments */)
000000r 1               .feature underline_in_numbers			; Allow notation %1010_0010
000000r 1               .feature string_escapes					; Allow \t, \n, \" and so on
000000r 1               .linecont +								; Allow line breaks in the middle of lines if you put a backslash at the end of the line
000000r 1               
000000r 1               
000000r 1               .segment "HEADER"
000000r 1  4E 45 53 1A  		.byte "NES", $1a
000004r 1  02           		.byte $02						; Program bank
000005r 1  01           		.byte $01						; Charactor bank
000006r 1  01           		.byte $01						; Vartical mirror
000007r 1  00           		.byte $00
000008r 1  00 00 00 00  		.byte $00, $00, $00, $00
00000Cr 1  00 00 00 00  		.byte $00, $00, $00, $00
000010r 1               
000010r 1               
000010r 1               .rodata									; ----- data -----
000000r 1               
000000r 1               .include "./inc/const.inc"
000000r 2               PPU_VERTICAL_MODE						= %11111110
000000r 2               PPU_HORIZONTAL_MODE						= %11111111
000000r 2               
000000r 2               ENDCODE									= $ff
000000r 2               
000000r 2               OBJMAP_NEXT								= $fe
000000r 2               OBJMAP_END								= $ff
000000r 2               
000000r 2               PPU_CTRL1_STD							= %10010000			; |NMION|PPU=MASTER|SPR8*8|BG$1000|SPR$0000|VRAM+1|SCRN$2000(2)|
000000r 2               PPU_CTRL2_STD							= %00011110			; |R|G|B|DISP-SPR|DISP-BG|SHOW-L8SPR|SHOW-L8BG|MODE=COLOR|
000000r 2               
000000r 2               BIT0									= %00000001
000000r 2               BIT1									= %00000010
000000r 2               BIT2									= %00000100
000000r 2               BIT3									= %00001000
000000r 2               BIT4									= %00010000
000000r 2               BIT5									= %00100000
000000r 2               BIT6									= %01000000
000000r 2               BIT7									= %10000000
000000r 2               
000000r 2               BYT_HI									= %11110000
000000r 2               BYT_LO									= %00001111
000000r 2               
000000r 2               LO										= 0
000000r 2               HI										= 1
000000r 2               
000000r 2               INIT									= 0
000000r 2               
000000r 2               
000000r 1               .include "./inc/const_addr.inc"
000000r 2               ZP					= $00
000000r 2               ; Unused $0200
000000r 2               bg_map_buff			= $0100				; size = $d ($10 - $3) * $4 = $40 - $c = $34
000000r 2               bg_plt_buff			= $0134				; size = 8
000000r 2               fill_block_arr		= $013c				; size = 13 ($d)
000000r 2               bg_buff				= $0149
000000r 2               SPR_BUFF			= $0300
000000r 2               MAP1				= $0400
000000r 2               MAP2				= $0500
000000r 2               USER_MEM			= $0700
000000r 2               
000000r 2               PLT_TABLE_ADDR		= $3f00
000000r 2               
000000r 2               PPU_CTRL1			= $2000
000000r 2               PPU_CTRL2			= $2001
000000r 2               PPU_STATUS			= $2002
000000r 2               OAM_ADDR			= $2003
000000r 2               OAM_DATA			= $2004
000000r 2               PPU_SCROLL			= $2005
000000r 2               PPU_ADDR			= $2006
000000r 2               PPU_DATA			= $2007
000000r 2               OAM_DMA				= $4014
000000r 2               
000000r 2               
000000r 2               SOUND_SQ1_1			= $4000				; Duty(2)|time counter|音響変化|ボリューム(4)
000000r 2               SOUND_SQ1_2			= $4001				; 周波数変化|変化速度(3)|変化方向|変化範囲(3)
000000r 2               SOUND_SQ1_3			= $4002				; 周波数下位
000000r 2               SOUND_SQ1_4			= $4003				; 再生時間(5)|周波数上位(3)
000000r 2               SOUND_SQ2_1			= $4004
000000r 2               SOUND_SQ2_2			= $4005
000000r 2               SOUND_SQ2_3			= $4006
000000r 2               SOUND_SQ2_4			= $4007
000000r 2               SOUND_TR_1			= $4008				; 再生時間カウンタ|カウンタを使用した長さ(7)
000000r 2               SOUND_TR_2			= $400A				; 周波数下位
000000r 2               SOUND_TR_3			= $400B				; 再生時間(5)|周波数上位(3)
000000r 2               SOUND_NS_1			= $400C				; 未使用(2)|再生時間カウンタ|音響固定|ボリューム(3)
000000r 2               SOUND_NS_2			= $400E				; 乱数タイプ(高周波)|未使用(3)|サンプルレート(4)
000000r 2               SOUND_NS_3			= $400F				; 再生時間(5)|未使用(3)
000000r 2               SOUND_DP_1			= $4010
000000r 2               SOUND_DP_2			= $4011
000000r 2               SOUND_DP_3			= $4012
000000r 2               SOUND_DP_4			= $4013
000000r 2               SOUND_CHANNEL		= $4015				; 未使用(3)|DPCM|ノイズ|三角波|CH2|CH1
000000r 2               
000000r 2               
000000r 2               JOYPAD1				= $4016
000000r 2               JOYPAD2				= $4017
000000r 2               
000000r 1               .include "./inc/var_addr.inc"
000000r 2               ; ZeroPage
000000r 2               .segment "ZEROPAGE"
000000r 2  00           tmp1					: .byte 0
000001r 2  00           tmp2					: .byte 0
000002r 2  00           tmp3					: .byte 0
000003r 2  00           tmp4					: .byte 0
000004r 2  00           tmp5					: .byte 0
000005r 2  00           tmp6					: .byte 0
000006r 2               
000006r 2  00           bg_buff_pointer			: .byte 0
000007r 2  00 00        addr_tmp1				: .addr 0
000009r 2  00 00        addr_tmp2				: .addr 0
00000Br 2               
00000Br 2  00           bg_map_buff_index		: .byte 0		; BG（マップ）専用バッファ
00000Cr 2               
00000Cr 2  00 00        ppu_bg_addr				: .addr 0
00000Er 2               
00000Er 2  00           tmp_rgstA				: .byte 0
00000Fr 2  00           tmp_rgstX				: .byte 0
000010r 2  00           tmp_rgstY				: .byte 0
000011r 2               
000011r 2               ; These are not used often, but are used in NMI
000011r 2  00           ppu_ctrl1_cpy			: .byte 0		; |NMI-ON|PPU=MASTER|SPR8*8|BG$1000|SPR$0000|VRAM+1|SCREEN$2000(2)|
000012r 2  00           ppu_ctrl2_cpy			: .byte 0		; |R|G|B|DISP-SPR|DISP-BG|SHOW-L8-SPR|SHOW-L8-BG|MODE=COLOR|
000013r 2               
000013r 2  00           scroll_x				: .byte 0
000014r 2  00           scroll_y				: .byte 0
000015r 2               
000015r 2  00           nmi_cnt					: .byte 0
000016r 2  00           frm_cnt					: .byte 0
000017r 2  00           is_processing_main		: .byte 0
000018r 2               
000018r 2  00 00        plt_addr				: .addr 0
00001Ar 2               
00001Ar 2               
00001Ar 2               .segment "USER_MEM"
000000r 2               
000000r 2               
000000r 2               .code
000000r 2               
000000r 1               .include "./inc/defmacro.inc"
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Calcurate BG address
000000r 2               ; @PARAMS	 ptx: X coordinate
000000r 2               ; @PARAMS	 pty: Y coordinate
000000r 2               ; @PARAMS	 scn: Screen number
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define ADDR_BG (ptx, pty, scn)			$2000 + (ptx) + ((pty) * $20) + ((scn) * $400)
000000r 2               .define ADDR_BG_BE (ptx, pty, scn)		GET_BE ADDR_BG (ptx), (pty), (scn)
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Calcurate SPR address
000000r 2               ; @PARAMS	 spr_num: Sprite number (0~63)
000000r 2               ; @PARAMS	 member:
000000r 2               ; 	pty: PosiTion Y
000000r 2               ; 	num: Tile(8*8) number
000000r 2               ; 	att: Attribute (VertFlip|HorizonFlip|Prio|Unused(3)|PltNum(2))
000000r 2               ; 	ptx: PosiTion X
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define ADDR_SPR(spr_num, member)		SPR_BUFF + ((spr_num)*4) + SPR_STRUCT::member
000000r 2               
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Get data in big endian
000000r 2               ; dbyt = Define BYTe?
000000r 2               ; Define word data with the hi & lo bytes swapped
000000r 2               ; ($1234=$12,$34)
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define GET_BE(data)					.dbyt data
000000r 2               
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Get obj position
000000r 2               ; @PARAMS		posX, posY
000000r 2               ; @RETURNS		$YX
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define GET_OBJ_POS(posX, posY)		($c - (posY)) * $10 + (posX)
000000r 2               
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Return negative number
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define NEGATIVE(val)	256 - (val)
000000r 2               
000000r 1               .include "./inc/palette.inc"
000000r 2               DEFAULT_PLT:
000000r 2               		; BG
000000r 2  36 17 0F     		.byte $36, $17, $0f
000003r 2  27 17 0F     		.byte $27, $17, $0f				; 27 -> 07/17/27
000006r 2  29 1A 0F     		.byte $29, $1a, $0f
000009r 2  30 21 0F     		.byte $30, $21, $0f
00000Cr 2               		; SPR
00000Cr 2  16 27 18     		.byte $16, $27, $18
00000Fr 2  1A 30 27     		.byte $1a, $30, $27
000012r 2  16 30 27     		.byte $16, $30, $27
000015r 2  0F 36 17     		.byte $0f, $36, $17
000018r 2               
000018r 2               
000018r 2               UNDER_GROUND_PLT:
000018r 2               		; BG
000018r 2  3C 1C 0F     		.byte $3c, $1c, $0f
00001Br 2  27 17 1C     		.byte $27, $17, $1c
00001Er 2  29 1A 09     		.byte $29, $1a, $09
000021r 2  30 21 1C     		.byte $30, $21, $1c
000024r 2               		; SPR
000024r 2  16 27 18     		.byte $16, $27, $18
000027r 2  1C 30 17     		.byte $1c, $30, $17				; black disp: $30 -> $36
00002Ar 2  16 30 27     		.byte $16, $30, $27
00002Dr 2  0C 3C 1C     		.byte $0c, $3c, $1c
000030r 2               
000030r 2               
000030r 1               .include "./inc/struct.inc"
000030r 2               .struct	SPR_STRUCT
000030r 2               		pty		.byte					; PosiTion Y
000030r 2               		num		.byte					; Tile(8*8) number
000030r 2               		att		.byte					; Attribute (VertFlip|HorizonFlip|Prio|Unused(3)|PltNum(2))
000030r 2               		ptx		.byte					; PosiTion X
000030r 2               .endstruct
000030r 2               
000030r 2               
000030r 2               .struct	SPR_TBL
000030r 2               		spr		.tag SPR_STRUCT 64
000030r 2               .endstruct
000030r 2               
000030r 1               .include "./inc/map_data.inc"
000030r 2               ; MAP_DATA[stage][map_num][index]
000030r 2               
000030r 2               STAGE_ARR:
000030r 2  rr rr        	.addr MAP_ARR_11
000032r 2  rr rr        	.addr MAP_ARR_12
000034r 2               
000034r 2               MAP_ARR_11:
000034r 2  rr rr        	.addr MAP_11_1
000036r 2  rr rr        	.addr MAP_11_2
000038r 2  FF FF        	.addr $ffff
00003Ar 2               
00003Ar 2               MAP_ARR_12:
00003Ar 2  rr rr        	.addr MAP_12_1
00003Cr 2  FF FF        	.addr $ffff
00003Er 2               
00003Er 2               MAP_11_1:
00003Er 2  BD           	.byte $bd
00003Fr 2  42           	.byte 'B'
000040r 2  00 00        	.byte %00000000, %00000000
000042r 2  90 42        	.byte (GET_OBJ_POS $0, $3), 'B'
000044r 2  78 42        	.byte (GET_OBJ_POS $8, $5), 'B'
000046r 2  49 42        	.byte (GET_OBJ_POS $9, $8), 'B'
000048r 2  79 51        	.byte (GET_OBJ_POS $9, $5), 'Q'
00004Ar 2  4A 51        	.byte (GET_OBJ_POS $a, $8), 'Q'
00004Cr 2  7A 42        	.byte (GET_OBJ_POS $a, $5), 'B'
00004Er 2  4B 42        	.byte (GET_OBJ_POS $b, $8), 'B'
000050r 2  7B 51        	.byte (GET_OBJ_POS $b, $5), 'Q'
000052r 2  7C 42        	.byte (GET_OBJ_POS $c, $5), 'B'
000054r 2  FE           	.byte OBJMAP_NEXT
000055r 2  C0 00        	.byte (GET_OBJ_POS $0, $0), 0
000057r 2  B0 00        	.byte (GET_OBJ_POS $0, $1), 0
000059r 2  C1 00        	.byte (GET_OBJ_POS $1, $0), 0
00005Br 2  B1 00        	.byte (GET_OBJ_POS $1, $1), 0
00005Dr 2  72 42        	.byte (GET_OBJ_POS $2, $5), 'B'
00005Fr 2  FF           	.byte OBJMAP_END
000060r 2               
000060r 2               MAP_11_2:
000060r 2  BD           	.byte $bd
000061r 2  42           	.byte 'B'
000062r 2  00 00        	.byte %00000000, %00000000
000064r 2  70 51        	.byte (GET_OBJ_POS $0, $5), 'Q'
000066r 2  60 51        	.byte (GET_OBJ_POS $0, $6), 'Q'
000068r 2  50 42        	.byte (GET_OBJ_POS $0, $7), 'B'
00006Ar 2  71 51        	.byte (GET_OBJ_POS $1, $5), 'Q'
00006Cr 2  61 51        	.byte (GET_OBJ_POS $1, $6), 'Q'
00006Er 2  51 51        	.byte (GET_OBJ_POS $1, $7), 'Q'
000070r 2  72 51        	.byte (GET_OBJ_POS $2, $5), 'Q'
000072r 2  73 51        	.byte (GET_OBJ_POS $3, $5), 'Q'
000074r 2  FF           	.byte OBJMAP_END
000075r 2               
000075r 2               MAP_12_1:
000075r 2  BD           	.byte $bd
000076r 2  42           	.byte 'B'
000077r 2  10 00        	.byte %00010000, %00000000
000079r 2  A0 42        	.byte (GET_OBJ_POS $0, $2), 'B'
00007Br 2  90 42        	.byte (GET_OBJ_POS $0, $3), 'B'
00007Dr 2  80 42        	.byte (GET_OBJ_POS $0, $4), 'B'
00007Fr 2  70 42        	.byte (GET_OBJ_POS $0, $5), 'B'
000081r 2  60 42        	.byte (GET_OBJ_POS $0, $6), 'B'
000083r 2  50 42        	.byte (GET_OBJ_POS $0, $7), 'B'
000085r 2  40 42        	.byte (GET_OBJ_POS $0, $8), 'B'
000087r 2  30 42        	.byte (GET_OBJ_POS $0, $9), 'B'
000089r 2  20 42        	.byte (GET_OBJ_POS $0, $a), 'B'
00008Br 2  10 42        	.byte (GET_OBJ_POS $0, $b), 'B'
00008Dr 2  00 42        	.byte (GET_OBJ_POS $0, $c), 'B'
00008Fr 2  01 00        	.byte (GET_OBJ_POS $1, $c), 0
000091r 2  02 00        	.byte (GET_OBJ_POS $2, $c), 0
000093r 2  03 00        	.byte (GET_OBJ_POS $3, $c), 0
000095r 2  04 00        	.byte (GET_OBJ_POS $4, $c), 0
000097r 2  05 00        	.byte (GET_OBJ_POS $5, $c), 0
000099r 2  CF 47        	.byte (GET_OBJ_POS $f, $0), 'G'
00009Br 2  FF           	.byte OBJMAP_END
00009Cr 2               
00009Cr 2               
00009Cr 2               BROCK_ID_ARR:
00009Cr 2               	; 40 = %0100
00009Cr 2  rr rr        	.addr OBJ_SKY						; @ (or 0)
00009Er 2  00 00        	.addr $0000							; A
0000A0r 2  rr rr        	.addr OBJ_BROCK						; B
0000A2r 2  00 00        	.addr $0000							; C
0000A4r 2  00 00        	.addr $0000							; D
0000A6r 2  00 00        	.addr $0000							; E
0000A8r 2  00 00        	.addr $0000							; F
0000AAr 2  rr rr        	.addr OBJ_GROUND					; G
0000ACr 2  00 00        	.addr $0000							; H
0000AEr 2  00 00        	.addr $0000							; I
0000B0r 2  00 00        	.addr $0000							; J
0000B2r 2  00 00        	.addr $0000							; K
0000B4r 2  00 00        	.addr $0000							; L
0000B6r 2  00 00        	.addr $0000							; M
0000B8r 2  00 00        	.addr $0000							; N
0000BAr 2  00 00        	.addr $0000							; O
0000BCr 2               	; 50 = %0101
0000BCr 2  00 00        	.addr $0000							; P
0000BEr 2  rr rr        	.addr OBJ_QBROCK					; Q
0000C0r 2  00 00        	.addr $0000							; R
0000C2r 2  00 00        	.addr $0000							; S
0000C4r 2  00 00        	.addr $0000							; T
0000C6r 2  00 00        	.addr $0000							; U
0000C8r 2  00 00        	.addr $0000							; V
0000CAr 2  00 00        	.addr $0000							; W
0000CCr 2  00 00        	.addr $0000							; X
0000CEr 2  00 00        	.addr $0000							; Y
0000D0r 2  00 00        	.addr $0000							; Z
0000D2r 2  00 00        	.addr $0000							; [
0000D4r 2  00 00        	.addr $0000							; \
0000D6r 2  00 00        	.addr $0000							; ]
0000D8r 2  rr rr        	.addr OBJ_COIN						; ^
0000DAr 2  00 00        	.addr $0000							; _
0000DCr 2               	; 60 = %0110
0000DCr 2  00 00        	.addr $0000							; `
0000DEr 2  00 00        	.addr $0000							; a
0000E0r 2  00 00        	.addr $0000							; b
0000E2r 2  00 00        	.addr $0000							; c
0000E4r 2  00 00        	.addr $0000							; d
0000E6r 2  00 00        	.addr $0000							; e
0000E8r 2  00 00        	.addr $0000							; f
0000EAr 2  00 00        	.addr $0000							; g
0000ECr 2  00 00        	.addr $0000							; h
0000EEr 2  00 00        	.addr $0000							; i
0000F0r 2  00 00        	.addr $0000							; j
0000F2r 2  00 00        	.addr $0000							; k
0000F4r 2  00 00        	.addr $0000							; l
0000F6r 2  00 00        	.addr $0000							; m
0000F8r 2  00 00        	.addr $0000							; n
0000FAr 2  00 00        	.addr $0000							; o
0000FCr 2               	; 70 = %0111
0000FCr 2  00 00        	.addr $0000							; p
0000FEr 2  00 00        	.addr $0000							; q
000100r 2  00 00        	.addr $0000							; r
000102r 2  00 00        	.addr $0000							; s
000104r 2  00 00        	.addr $0000							; t
000106r 2  00 00        	.addr $0000							; u
000108r 2  00 00        	.addr $0000							; v
00010Ar 2  00 00        	.addr $0000							; w
00010Cr 2  00 00        	.addr $0000							; x
00010Er 2  00 00        	.addr $0000							; y
000110r 2  00 00        	.addr $0000							; z
000112r 2  00 00        	.addr $0000							; {
000114r 2  00 00        	.addr $0000							; |
000116r 2  00 00        	.addr $0000							; }
000118r 2  00 00        	.addr $0000							; ~
00011Ar 2               
00011Ar 2               
00011Ar 2               OBJ_SKY:
00011Ar 2  00 00        	.byte $00, $00
00011Cr 2  00 00        	.byte $00, $00
00011Er 2               
00011Er 2               OBJ_QBROCK:
00011Er 2  90 91        	.byte $90, $91
000120r 2  92 93        	.byte $92, $93
000122r 2               
000122r 2               OBJ_BROCK:
000122r 2  94 94        	.byte $94, $94
000124r 2  95 95        	.byte $95, $95
000126r 2               
000126r 2               OBJ_COIN:
000126r 2  84 85        	.byte $84, $85
000128r 2  86 87        	.byte $86, $87
00012Ar 2               
00012Ar 2               OBJ_GROUND:
00012Ar 2  80 81        	.byte $80, $81
00012Cr 2  82 83        	.byte $82, $83
00012Er 2               
00012Er 2               
00012Er 1               
00012Er 1               .code									; ----- code -----
00012Er 1               
00012Er 1               .include "./asm/joypad.asm"
00012Er 2               .scope Joypad
00012Er 2               
00012Er 2               BTN_A									= %10000000
00012Er 2               BTN_B									= %01000000
00012Er 2               BTN_S									= %00100000
00012Er 2               BTN_T									= %00010000
00012Er 2               BTN_U									= %00001000
00012Er 2               BTN_D									= %00000100
00012Er 2               BTN_L									= %00000010
00012Er 2               BTN_R									= %00000001
00012Er 2               
00012Er 2               .ZeroPage
00001Ar 2  00           joy1					: .byte 0
00001Br 2  00           joy2					: .byte 0
00001Cr 2  00           joy1_prev				: .byte 0
00001Dr 2  00           joy2_prev				: .byte 0
00001Er 2  00           joy1_pushstart			: .byte 0
00001Fr 2  00           joy2_pushstart			: .byte 0
000020r 2               
000020r 2               
000020r 2               ;*------------------------------------------------------------------------------
000020r 2               ; Get Joypad data (including prev and newly pushed btn)
000020r 2               ; @PARAMS		None
000020r 2               ; @CLOBBERS		A
000020r 2               ; @RETURNS		None
000020r 2               ;*------------------------------------------------------------------------------
000020r 2               
000020r 2               .code									; ----- code -----
00012Er 2               
00012Er 2               .proc _getJoyData
00012Er 2               		; set prev
00012Er 2  A5 rr        		lda Joypad::joy1
000130r 2  85 rr        		sta Joypad::joy1_prev
000132r 2  A5 rr        		lda Joypad::joy2
000134r 2  85 rr        		sta Joypad::joy2_prev
000136r 2               
000136r 2  20 rr rr     		jsr Joypad::_readJoy
000139r 2               
000139r 2  A5 rr        		lda Joypad::joy1
00013Br 2  29 0A        		and #Joypad::BTN_U|Joypad::BTN_L				; Compare Up and Left...
00013Dr 2  4A           		lsr
00013Er 2  25 rr        		and Joypad::joy1						; to Down and Right
000140r 2  F0 0A        		beq @GET_PUSHSTART_BTN
000142r 2               		; Use previous frame's directions
000142r 2  A5 rr        		lda Joypad::joy1
000144r 2  45 rr        		eor Joypad::joy1_prev
000146r 2  29 F0        		and #%11110000
000148r 2  45 rr        		eor Joypad::joy1_prev
00014Ar 2  85 rr        		sta Joypad::joy1
00014Cr 2               
00014Cr 2               @GET_PUSHSTART_BTN:
00014Cr 2               		; set pushstart
00014Cr 2  A5 rr        		lda Joypad::joy1_prev
00014Er 2  49 FF        		eor #%11111111
000150r 2  25 rr        		and Joypad::joy1
000152r 2  85 rr        		sta Joypad::joy1_pushstart
000154r 2  A5 rr        		lda Joypad::joy2_prev
000156r 2  49 FF        		eor #%11111111
000158r 2  25 rr        		and Joypad::joy2
00015Ar 2  85 rr        		sta Joypad::joy2_pushstart
00015Cr 2               
00015Cr 2  60           		rts
00015Dr 2               		; ------------------------------
00015Dr 2               .endproc
00015Dr 2               
00015Dr 2               
00015Dr 2               ;*------------------------------------------------------------------------------
00015Dr 2               ; Read controller
00015Dr 2               ; @PARAMS		None
00015Dr 2               ; @CLOBBERS		A
00015Dr 2               ; @RETURNS		None
00015Dr 2               ;*------------------------------------------------------------------------------
00015Dr 2               
00015Dr 2               .code									; ----- code -----
00015Dr 2               
00015Dr 2               .proc _readJoy
00015Dr 2               		; Init controller & Set a ring counter
00015Dr 2  A9 01        		lda #1
00015Fr 2  8D 16 40     		sta JOYPAD1
000162r 2  85 rr        		sta Joypad::joy2						; ring counter
000164r 2  4A           		lsr								; A = 0
000165r 2  8D 16 40     		sta JOYPAD1
000168r 2               
000168r 2               @READ_JOY_LOOP:
000168r 2  AD 16 40     		lda JOYPAD1
00016Br 2  29 03        		and #%00000011
00016Dr 2  C9 01        		cmp #$01						; A - 1 = A + 0xff; if A > 0 then Carry=1
00016Fr 2  26 rr        		rol Joypad::joy1						; Carry -> Bit0; Bit7 -> Carry
000171r 2  AD 17 40     		lda JOYPAD2
000174r 2  29 03        		and #%00000011
000176r 2  C9 01        		cmp #$01
000178r 2  26 rr        		rol Joypad::joy2
00017Ar 2  90 EC        		bcc @READ_JOY_LOOP				; CarryON -> end
00017Cr 2  60           		rts
00017Dr 2               		; ------------------------------
00017Dr 2               .endproc
00017Dr 2               
00017Dr 2               
00017Dr 2               .endscope
00017Dr 2               
00017Dr 1               .include "./asm/macro.asm"
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               ; Load array
00017Dr 2               ; A = Arr[X][Y]
00017Dr 2               ; @PARAMS		ADDR: Array Address
00017Dr 2               ; @PARAMS		X Y: index (Access Arr[x][y])
00017Dr 2               ; @CLOBBERS		tmp1
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro ldarr addr
00017Dr 2               		.if !(.blank(addr))
00017Dr 2               			sty tmp1						; save Y
00017Dr 2               			txa
00017Dr 2               			asl								; ×2（アドレスが16bitなのでARR[x][y]のxが+1 => 読み込むアドレスは+2する必要がある
00017Dr 2               			tay								; アドレッシングに使うためYレジスタへ
00017Dr 2               			lda addr, y						; Low
00017Dr 2               			sta <addr_tmp1
00017Dr 2               			lda addr+1, y					; High
00017Dr 2               			sta >addr_tmp1
00017Dr 2               			ldy tmp1						; restore Y
00017Dr 2               			lda (addr_tmp1), y
00017Dr 2               		.else
00017Dr 2               			.error "Arg addr in macro ldarr is wrong."
00017Dr 2               		.endif
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               ; Calculate Negative Numbers
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro cnn
00017Dr 2               		eor #$ff
00017Dr 2               		add #$01
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               ; Addition
00017Dr 2               ; This Macro only supports Immediate/Zeropage/Absolute addressing.
00017Dr 2               ; Other addressing modes are not optimized for speed.
00017Dr 2               ; Other addressing usage: add a, {$00, x} / add a, {($00), y}
00017Dr 2               ; @PARAMS		arg1: register or Address
00017Dr 2               ; @PARAMS		arg2
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro add arg1, arg2
00017Dr 2               		.if (.paramcount = 1)
00017Dr 2               			; arg1: val
00017Dr 2               			; add #3 / add $80
00017Dr 2               			clc
00017Dr 2               			adc arg1
00017Dr 2               		.elseif (.paramcount = 2)
00017Dr 2               			; arg1: target
00017Dr 2               			; arg2: val
00017Dr 2               			.if (.match({arg1}, a))
00017Dr 2               				; add a, #3 / add a, $80
00017Dr 2               				clc
00017Dr 2               				adc arg2
00017Dr 2               			.elseif (.match({arg1}, x))
00017Dr 2               				; add x, ??
00017Dr 2               				.if (\
00017Dr 2               					.match(.left(1, {arg2}), #) &&\
00017Dr 2               					.right(.tcount({arg2})-1, {arg2}) <= 7\
00017Dr 2               				)
00017Dr 2               					; add x, #0~7
00017Dr 2               					.repeat (.right(.tcount({arg2})-1, {arg2}))
00017Dr 2               						inx
00017Dr 2               					.endrepeat
00017Dr 2               				.else
00017Dr 2               					pha
00017Dr 2               					txa
00017Dr 2               					clc
00017Dr 2               					adc arg2
00017Dr 2               					tax
00017Dr 2               					pla
00017Dr 2               				.endif
00017Dr 2               			.elseif (.match({arg1}, y))
00017Dr 2               				; add y, ??
00017Dr 2               				.if (\
00017Dr 2               					.match(.left(1, {arg2}), #) &&\
00017Dr 2               					.right(.tcount({arg2})-1, {arg2}) <= 7\
00017Dr 2               				)
00017Dr 2               					; add y, #0~7
00017Dr 2               					.repeat (.right(.tcount ({arg2})-1, {arg2}))
00017Dr 2               						iny
00017Dr 2               					.endrepeat
00017Dr 2               				.else
00017Dr 2               					pha
00017Dr 2               					tya
00017Dr 2               					clc
00017Dr 2               					adc arg2
00017Dr 2               					tay
00017Dr 2               					pla
00017Dr 2               				.endif
00017Dr 2               			.endif
00017Dr 2               		.else
00017Dr 2               			.error "Args in macro add are wrong."
00017Dr 2               		.endif
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               ; Subtraction
00017Dr 2               ; See macro add for comments
00017Dr 2               ; @PARAMS		arg1: register or Address
00017Dr 2               ; @PARAMS		arg2
00017Dr 2               ; ------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro sub arg1, arg2
00017Dr 2               		.if (.paramcount = 1)
00017Dr 2               			sec
00017Dr 2               			sbc arg1
00017Dr 2               		.elseif (.paramcount = 2 && .match({arg1}, a))
00017Dr 2               			sec
00017Dr 2               			sbc arg2
00017Dr 2               		.elseif (.paramcount = 2 && .match({arg1}, x))
00017Dr 2               			.if (\
00017Dr 2               				.match(.left(1, {arg2}), #) &&\
00017Dr 2               				.right(.tcount({arg2})-1, {arg2}) <= 7\
00017Dr 2               			)
00017Dr 2               				.repeat (.right(.tcount({arg2})-1, {arg2}))
00017Dr 2               					dex
00017Dr 2               				.endrepeat
00017Dr 2               			.else
00017Dr 2               				pha
00017Dr 2               				txa
00017Dr 2               				sec
00017Dr 2               				sbc arg2
00017Dr 2               				tax
00017Dr 2               				pla
00017Dr 2               			.endif
00017Dr 2               		.elseif (.paramcount = 2 && .match({arg1}, y))
00017Dr 2               			.if (\
00017Dr 2               				.match(.left(1, {arg2}), #) &&\
00017Dr 2               				.right(.tcount({arg2})-1, {arg2}) <= 7\
00017Dr 2               			)
00017Dr 2               				.repeat (.right(.tcount ({arg2})-1, {arg2}))
00017Dr 2               					dey
00017Dr 2               				.endrepeat
00017Dr 2               			.else
00017Dr 2               				pha
00017Dr 2               				tya
00017Dr 2               				sec
00017Dr 2               				sbc arg2
00017Dr 2               				tay
00017Dr 2               				pla
00017Dr 2               			.endif
00017Dr 2               		.else
00017Dr 2               			.error "Args in macro sub are wrong."
00017Dr 2               		.endif
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               ; Light shift
00017Dr 2               ; arg1 <<= c
00017Dr 2               ; @PARAMS		c: default=#1
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro shl c
00017Dr 2               		.if (.blank(c))
00017Dr 2               			asl
00017Dr 2               		.elseif (.match(.left(1, {c}), #))
00017Dr 2               			.repeat	(.right(.tcount ({c})-1, {c}))
00017Dr 2               				asl
00017Dr 2               			.endrepeat
00017Dr 2               		.else
00017Dr 2               			.error "Arg \"c\" in macro shl is wrong."
00017Dr 2               		.endif
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               ; Right shift
00017Dr 2               ; arg1 >>= c
00017Dr 2               ; @PARAMS		c: default=#1
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro shr c
00017Dr 2               		.if (.blank(c))
00017Dr 2               			lsr
00017Dr 2               		.elseif (.match(.left(1, {c}), #))
00017Dr 2               			.repeat	(.right(.tcount ({c})-1, {c}))
00017Dr 2               				lsr
00017Dr 2               			.endrepeat
00017Dr 2               		.else
00017Dr 2               			.error "Arg \"c\" in macro shr is wrong."
00017Dr 2               		.endif
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               ; Arithmetic left shift
00017Dr 2               ;! Deprecated (Not shortened)
00017Dr 2               ; A >>= c
00017Dr 2               ; @PARAMS		c: default=1
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro ashl c
00017Dr 2               		cmp #%1000_0000
00017Dr 2               		php								; Save carry
00017Dr 2               		.if (.blank(c))
00017Dr 2               			; ashl
00017Dr 2               			shl #2
00017Dr 2               		.elseif (.match(.left(1, {c}), #))
00017Dr 2               			; ashl #4
00017Dr 2               			shl #((.right(.tcount ({c})-1, {c})) + 1)
00017Dr 2               		.else
00017Dr 2               			.error "Arg \"c\" in macro ashl is wrong."
00017Dr 2               		.endif
00017Dr 2               		plp
00017Dr 2               		ror								; a /= 2, carry into bit7
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               ; Arithmetic right shift
00017Dr 2               ; A >>= c
00017Dr 2               ; @PARAMS		c: default=1
00017Dr 2               ;
00017Dr 2               ; To ASR a memory location
00017Dr 2               ; (From http://wiki.nesdev.com/w/index.php/Synthetic_instructions#Arithmetic_shift_right)
00017Dr 2               ; 	lda addr		; Copy memory into A
00017Dr 2               ; 	asl				; Copy sign bit of A into carry (shorter than CMP)
00017Dr 2               ; 	ror addr
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .macro ashr c
00017Dr 2               		.if (.blank(c))
00017Dr 2               			; ashr
00017Dr 2               			cmp #%1000_0000				; Bit7 into carry
00017Dr 2               			ror							; Shift carry into Bit7
00017Dr 2               		.elseif (.match(.left(1, {c}), #))
00017Dr 2               			; ashr #4
00017Dr 2               			.repeat (.right(.tcount ({c})-1, {c}))
00017Dr 2               				cmp #%1000_0000
00017Dr 2               				ror
00017Dr 2               			.endrepeat
00017Dr 2               		.else
00017Dr 2               			.error "Arg \"c\" in macro ashr is wrong."
00017Dr 2               		.endif
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 2               
00017Dr 2               
00017Dr 2               .macro tfrPlt
00017Dr 2               		; Transfar pallete
00017Dr 2               		lda #>PLT_TABLE_ADDR
00017Dr 2               		sta PPU_ADDR
00017Dr 2               		lda #<PLT_TABLE_ADDR			; Addr lo = 0
00017Dr 2               		sta PPU_ADDR
00017Dr 2               		tax								; X = 0
00017Dr 2               :
00017Dr 2               		ldy #3
00017Dr 2               		lda #$22						; under ground -> #$0f
00017Dr 2               		sta PPU_DATA
00017Dr 2               :
00017Dr 2               		lda DEFAULT_PLT, x				; under ground -> UNDER_GROUND_PLT
00017Dr 2               		sta PPU_DATA
00017Dr 2               		inx
00017Dr 2               		dey
00017Dr 2               		bne :-
00017Dr 2               		cpx #$3*8
00017Dr 2               		bcc :--
00017Dr 2               
00017Dr 2               	lda #$23
00017Dr 2               	sta PPU_ADDR
00017Dr 2               	lda #$c0
00017Dr 2               	sta PPU_ADDR
00017Dr 2               	lda #$ff
00017Dr 2               	sta PPU_DATA
00017Dr 2               	sta PPU_DATA
00017Dr 2               	sta PPU_DATA
00017Dr 2               	sta PPU_DATA
00017Dr 2               	sta PPU_DATA
00017Dr 2               	sta PPU_DATA
00017Dr 2               	sta PPU_DATA
00017Dr 2               	sta PPU_DATA
00017Dr 2               .endmacro
00017Dr 2               
00017Dr 1               .include "./asm/subfunc.asm"
00017Dr 2               .scope Subfunc
00017Dr 2               
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               ; Restore PPU setting
00017Dr 2               ; @PARAMS		None
00017Dr 2               ; @CLOBBERS		A
00017Dr 2               ; @RETURNS		None
00017Dr 2               ;*------------------------------------------------------------------------------
00017Dr 2               
00017Dr 2               .code									; ----- code -----
00017Dr 2               
00017Dr 2               .proc _restorePPUSet
00017Dr 2  A5 rr        		lda ppu_ctrl1_cpy
00017Fr 2  8D 00 20     		sta PPU_CTRL1
000182r 2  A5 rr        		lda ppu_ctrl2_cpy
000184r 2  8D 01 20     		sta PPU_CTRL2
000187r 2  60           		rts
000188r 2               		; ------------------------------
000188r 2               .endproc
000188r 2               
000188r 2               
000188r 2               
000188r 2               ;*------------------------------------------------------------------------------
000188r 2               ; Set scroll position
000188r 2               ; Use during NMI or executing raster scroll.
000188r 2               ; @PARAMS		None
000188r 2               ; @CLOBBERS		A
000188r 2               ; @RETURNS		None
000188r 2               ;*------------------------------------------------------------------------------
000188r 2               
000188r 2               .code									; ----- code -----
000188r 2               
000188r 2               .proc _setScroll
000188r 2  A5 rr        		lda scroll_x
00018Ar 2  8D 05 20     		sta PPU_SCROLL
00018Dr 2  A5 rr        		lda scroll_y
00018Fr 2  8D 05 20     		sta PPU_SCROLL
000192r 2               
000192r 2               	; TODO: きちんとスクロール実装したらメインスクリーンの切り替え実装
000192r 2  A5 rr        	lda ppu_ctrl1_cpy
000194r 2  29 FC        	and #%1111_1100
000196r 2  85 rr        	sta ppu_ctrl1_cpy
000198r 2  8D 00 20     	sta PPU_CTRL1
00019Br 2               
00019Br 2  60           		rts
00019Cr 2               		; ------------------------------
00019Cr 2               .endproc
00019Cr 2               
00019Cr 2               
00019Cr 2               ;*------------------------------------------------------------------------------
00019Cr 2               ; Wait starting vblank
00019Cr 2               ; @PARAMS		None
00019Cr 2               ; @CLOBBERS		None
00019Cr 2               ; @RETURNS		Non
00019Cr 2               ;*------------------------------------------------------------------------------
00019Cr 2               
00019Cr 2               .code									; ----- code -----
00019Cr 2               
00019Cr 2               .proc _waitVblank
00019Cr 2  2C 02 20     		bit $2002
00019Fr 2  10 FB        		bpl _waitVblank
0001A1r 2  60           		rts
0001A2r 2               		; ------------------------------
0001A2r 2               .endproc
0001A2r 2               
0001A2r 2               
0001A2r 2               ;*------------------------------------------------------------------------------
0001A2r 2               ; Disp status text
0001A2r 2               ; @PARAMS		None
0001A2r 2               ; @CLOBBERS		A X Y
0001A2r 2               ; @RETURNS		None
0001A2r 2               ;*------------------------------------------------------------------------------
0001A2r 2               
0001A2r 2               .code									; ----- code -----
0001A2r 2               
0001A2r 2               .proc _dispStatus
0001A2r 2  A6 rr        		ldx bg_buff_pointer
0001A4r 2  A0 1F        		ldy #(@TEXT_END - @TEXT)
0001A6r 2               @STORE_PPU_DATA_LOOP:
0001A6r 2  BD rr rr     		lda @TEXT, x
0001A9r 2  F0 07        		beq @END_STORE
0001ABr 2  9D 49 01     		sta bg_buff, x
0001AEr 2  E8           		inx
0001AFr 2  88           		dey
0001B0r 2  D0 F4        		bne @STORE_PPU_DATA_LOOP
0001B2r 2               @END_STORE:
0001B2r 2  86 rr        		stx bg_buff_pointer
0001B4r 2  86 80        		stx $80
0001B6r 2  60           		rts
0001B7r 2               		; ------------------------------
0001B7r 2               
0001B7r 2               .rodata									; ----- data -----
000000r 2               @TEXT:
000000r 2  FE 20 22     		.byte PPU_VERTICAL_MODE
000003r 2               		ADDR_BG_BE 2, 1, 0
000003r 2  53 43 4F 52  		.byte "SCORE XXXXXX  C:YY  TIME ZZZ"
000007r 2  45 20 58 58  
00000Br 2  58 58 58 58  
00001Fr 2               @TEXT_END:
00001Fr 2               
00001Fr 2               .endproc
00001Fr 2               
00001Fr 2               
00001Fr 2               ;*------------------------------------------------------------------------------
00001Fr 2               ; Prepare plt data
00001Fr 2               ; @PARAMS		None
00001Fr 2               ; @CLOBBERS		A X Y
00001Fr 2               ; @RETURNS		None
00001Fr 2               ;*------------------------------------------------------------------------------
00001Fr 2               
00001Fr 2               .proc _preparePltData
00001Fr 2  60           		rts
000020r 2               .endproc
000020r 2               
000020r 2               
000020r 2               ;*------------------------------------------------------------------------------
000020r 2               ; Sleep for one frame
000020r 2               ; @PARAMS		None
000020r 2               ; @CLOBBERS		A
000020r 2               ; @RETURNS		None (A = 1)
000020r 2               ;*------------------------------------------------------------------------------
000020r 2               
000020r 2               .proc _sleepOneFrame
000020r 2  A9 00        		lda #0
000022r 2  85 rr        		sta is_processing_main
000024r 2               :
000024r 2  A5 rr        		lda is_processing_main
000026r 2  F0 FC        		beq :-
000028r 2               
000028r 2  60           		rts
000029r 2               		; ------------------------------
000029r 2               .endproc
000029r 2               
000029r 2               
000029r 2               .endscope
000029r 2               
000029r 1               .include "./asm/nmi.asm"
000029r 2               ;*------------------------------------------------------------------------------
000029r 2               ; bg_buffを読み取り，指定アドレスに書き込んでカウンタをインクリメント
000029r 2               ; Read PPU update data & store to PPU
000029r 2               ; @PARAMS		ADDR: Forwarding address
000029r 2               ; @CLOBBERS		A X
000029r 2               ; @RETURNS		None
000029r 2               ;*------------------------------------------------------------------------------
000029r 2               
000029r 2               .code									; ----- code -----
0001B7r 2               
0001B7r 2               .macro tfrDataToPPU ADDR
0001B7r 2               	lda bg_buff, x
0001B7r 2               	sta ADDR
0001B7r 2               	inx
0001B7r 2               .endmacro
0001B7r 2               
0001B7r 2               ; memo
0001B7r 2               ; ----- PPU buff data structure -----
0001B7r 2               ; r: Direction
0001B7r 2               ; 	Bit0 is a flag, others are 1.
0001B7r 2               ; 	-> 0b1111_111[0/1]
0001B7r 2               ; 	-> 0xFE（Horizontal）/0xFF（Vertical）
0001B7r 2               ; a: Addr
0001B7r 2               ; d: Data
0001B7r 2               ; r [a a] [d d d ... d] r [a a] [d d ... d]
0001B7r 2               
0001B7r 2               
0001B7r 2               ;*------------------------------------------------------------------------------
0001B7r 2               ; NMI (Interrupt)
0001B7r 2               ; @CLOBBERS	 X Y (When end main process.)
0001B7r 2               ; To shorten the clock, put the buffer data on the stack
0001B7r 2               ; 	(Shorten clock by buff data length)
0001B7r 2               ; 	pla -> 3 clc
0001B7r 2               ; 	lda ZP/ABSORUTE, x -> 4 clc
0001B7r 2               ;*------------------------------------------------------------------------------
0001B7r 2               
0001B7r 2               .code									; ----- code -----
0001B7r 2               
0001B7r 2               .proc _nmi
0001B7r 2  48           		pha
0001B8r 2  E6 rr        		inc nmi_cnt
0001BAr 2  A5 rr        		lda is_processing_main
0001BCr 2  F0 05        		beq @NMI_MAIN
0001BEr 2  68           		pla
0001BFr 2  20 rr rr     		jsr Subfunc::_setScroll
0001C2r 2  40           		rti	; --------------------------
0001C3r 2               
0001C3r 2               @NMI_MAIN:
0001C3r 2  A2 00        	ldx #0
0001C5r 2  86 rr        	stx tmp1
0001C7r 2               @PLT_STORE_LOOP:
0001C7r 2  A5 rr        	lda plt_addr+1
0001C9r 2  8D 06 20     	sta PPU_ADDR
0001CCr 2  A5 rr        	lda plt_addr+0
0001CEr 2  18 69 08     	add #8
0001D1r 2  18 65 rr     	add tmp1
0001D4r 2  8D 06 20     	sta PPU_ADDR
0001D7r 2               
0001D7r 2  BD 34 01     	lda bg_plt_buff, x
0001DAr 2  8D 07 20     	sta PPU_DATA
0001DDr 2  A5 rr        	lda tmp1
0001DFr 2  18 69 08     	add #8
0001E2r 2  85 rr        	sta tmp1
0001E4r 2  E8           	inx
0001E5r 2  E0 07        	cpx #7
0001E7r 2  90 DE        	bcc @PLT_STORE_LOOP
0001E9r 2               
0001E9r 2  A5 rr        		lda ppu_ctrl1_cpy
0001EBr 2  09 04        		ora #%0000_0100					; Vertical mode
0001EDr 2  85 rr        		sta ppu_ctrl1_cpy
0001EFr 2  8D 00 20     		sta PPU_CTRL1					; Not use restorePPUSet()
0001F2r 2               
0001F2r 2               		; line 1
0001F2r 2  A5 rr        		lda ppu_bg_addr+HI
0001F4r 2  8D 06 20     		sta PPU_ADDR
0001F7r 2  A5 rr        		lda ppu_bg_addr+LO
0001F9r 2  8D 06 20     		sta PPU_ADDR
0001FCr 2               
0001FCr 2  A2 00        		ldx #0
0001FEr 2               @STORE_MAP_LOOP:
0001FEr 2  BD 00 01     		lda bg_map_buff, x
000201r 2  8D 07 20     		sta PPU_DATA
000204r 2  E8           		inx
000205r 2  E0 1A        		cpx #$1a
000207r 2  D0 F5        		bne @STORE_MAP_LOOP
000209r 2               
000209r 2               		; line 2
000209r 2  A5 rr        		lda ppu_bg_addr+HI
00020Br 2  8D 06 20     		sta PPU_ADDR
00020Er 2  A6 rr        		ldx ppu_bg_addr+LO
000210r 2  E8           		inx
000211r 2  8E 06 20     		stx PPU_ADDR
000214r 2               
000214r 2  A2 00        		ldx #0
000216r 2               @STORE_MAP_LOOP2:
000216r 2  BD 1A 01     		lda bg_map_buff+$1a, x
000219r 2  8D 07 20     		sta PPU_DATA
00021Cr 2  E8           		inx
00021Dr 2  E0 1A        		cpx #$1a
00021Fr 2  D0 F5        		bne @STORE_MAP_LOOP2
000221r 2               
000221r 2  A9 00        		lda #0
000223r 2  C5 rr        		cmp bg_buff_pointer
000225r 2  F0 35        		beq @STORE_CHR
000227r 2  AA           		tax
000228r 2  BD 49 01     		lda bg_buff, x
00022Br 2               @SET_MODE:
00022Br 2  29 01        		and #%00000001					; Get flag
00022Dr 2  0A 0A        		shl #2							; Move flag to Bit2
00022Fr 2  85 rr        		sta tmp1						; Start using tmp1
000231r 2  A5 rr        		lda ppu_ctrl1_cpy
000233r 2  29 FB        		and #%11111011					; Mask direction flag
000235r 2  05 rr        		ora tmp1						; End using tmp1
000237r 2  85 rr        		sta ppu_ctrl1_cpy
000239r 2  8D 00 20     		sta PPU_CTRL1					; Not use restorePPUSet()
00023Cr 2               @SET_ADDR:
00023Cr 2  E8           		inx								; Not do inx when go to @EXIT
00023Dr 2  BD 49 01     		lda bg_buff, x
000240r 2  8D 06 20     		sta PPU_ADDR
000243r 2  E8           		inx
000244r 2  BD 49 01     		lda bg_buff, x
000247r 2  8D 06 20     		sta PPU_ADDR
00024Ar 2  E8           		inx
00024Br 2               @STORE_DATA:
00024Br 2  BD 49 01     		lda bg_buff, x
00024Er 2  A8           		tay
00024Fr 2  C9 FE        		cmp #$fe
000251r 2  B0 D8        		bcs @SET_MODE					; no inx
000253r 2  98           		tya
000254r 2  8D 07 20     		sta PPU_DATA
000257r 2  E8           		inx
000258r 2  E4 rr        		cpx bg_buff_pointer
00025Ar 2  D0 EF        		bne @STORE_DATA
00025Cr 2               
00025Cr 2               		; @SET_MODE + @SET_ADDR = 51 cycle
00025Cr 2               		; @STORE_DATA (return @STORE_DATA) = 24 cycle
00025Cr 2               		; @STORE_DATA (return @SET_MODE) = 13 cycle
00025Cr 2               
00025Cr 2               		; str1 = "A  B"
00025Cr 2               		; 	=> 51 + space_len * 24 cycle
00025Cr 2               		; 	=> mode(1) + addr(2) + data(2 + space_len) = (5 + space_len) bytes
00025Cr 2               		; 	|  len  || 1  | 2  |  3  |  4  |
00025Cr 2               		; 	| cycle || 75 | 99 | 123 | 147 |
00025Cr 2               		;	| bytes || 6  | 7  |  8  |  9  |
00025Cr 2               		; str2 = 'A', str3 = 'B'
00025Cr 2               		; 	=> (51 + 13) * 2 = 64 * 2 = 128 cycle
00025Cr 2               		; 	=> (mode(1) + addr(2) + data(1)) * 2 = 8 bytes
00025Cr 2               		; space length:
00025Cr 2               		; 	1: 75 cycle,	6 bytes (str1)
00025Cr 2               		; 	2: 99 cycle,	7 bytes
00025Cr 2               		; 	3: 123 cycle,	8 bytes
00025Cr 2               		; 	4~: 128 cycle,	8 bytes (str2)
00025Cr 2               @STORE_CHR:
00025Cr 2  A9 00        		lda #0
00025Er 2  8D 03 20     		sta OAM_ADDR
000261r 2  A9 03        		lda #>SPR_BUFF
000263r 2  8D 14 40     		sta OAM_DMA
000266r 2               
000266r 2               @EXIT:
000266r 2  A9 01        		lda #1
000268r 2  85 rr        		sta is_processing_main
00026Ar 2  4A           		shr #1
00026Br 2  85 rr        		sta bg_buff_pointer				; A = 0
00026Dr 2  E6 rr        		inc frm_cnt
00026Fr 2  20 rr rr     		jsr Subfunc::_setScroll
000272r 2  68           		pla
000273r 2  40           		rti	; --------------------------
000274r 2               .endproc
000274r 2               
000274r 1               .include "./asm/init.asm"
000274r 2               .code									; ----- code -----
000274r 2               
000274r 2               .macro init
000274r 2               		sei								; Ban IRQ
000274r 2               		cld								; Ban BCD
000274r 2               		ldx #$40
000274r 2               		stx JOYPAD2
000274r 2               		ldx #$ff
000274r 2               		txs
000274r 2               		inx								; X = 0
000274r 2               		stx PPU_CTRL1
000274r 2               		stx PPU_CTRL2
000274r 2               		stx SOUND_DP_1					; Ban IRQ of APU DMC (bit7)
000274r 2               		stx SOUND_CHANNEL
000274r 2               
000274r 2               		/*
000274r 2               		A & $2002 -> set Z(zero flag)
000274r 2               		$2002 bit7(vblank) -> N(negative), bit6(sprite 0 hit) -> V(overflow)
000274r 2               		Reset vblank & sprite 0 hit flag
000274r 2               		(The state of this flag after reset is undefined.)
000274r 2               		*/
000274r 2               		bit $2002
000274r 2               		jsr Subfunc::_waitVblank		; 1st time
000274r 2               
000274r 2               		txa								; A = 0
000274r 2               @CLR_MEM:
000274r 2               		sta $00, x
000274r 2               		sta $0100, x
000274r 2               		sta $0200, x
000274r 2               		sta $0400, x
000274r 2               		sta $0500, x
000274r 2               		sta $0600, x
000274r 2               		sta $0700, x
000274r 2               		inx
000274r 2               		bne @CLR_MEM
000274r 2               
000274r 2               		lda #$ff
000274r 2               @CLR_CHR_MEM:
000274r 2               		sta $0300, x
000274r 2               		inx
000274r 2               		bne @CLR_CHR_MEM
000274r 2               
000274r 2               		jsr Subfunc::_waitVblank		; 2nd time
000274r 2               
000274r 2               		; ------- PPU stabilizes -------
000274r 2               
000274r 2               		lda #%00010000					; SPR = $0000, BG = $1000
000274r 2               		sta ppu_ctrl1_cpy
000274r 2               		jsr Subfunc::_restorePPUSet
000274r 2               
000274r 2               		; Clear VRAM
000274r 2               		lda #$20
000274r 2               		sta PPU_ADDR
000274r 2               		lda #$00
000274r 2               		sta PPU_ADDR
000274r 2               
000274r 2               		ldy #8
000274r 2               		tax
000274r 2               @CLR_VRAM:
000274r 2               		sta PPU_DATA
000274r 2               		inx
000274r 2               		bne @CLR_VRAM
000274r 2               		dey
000274r 2               		bne @CLR_VRAM
000274r 2               
000274r 2               
000274r 2               		jsr Subfunc::_waitVblank
000274r 2               
000274r 2               
000274r 2               		tfrPlt
000274r 2               
000274r 2               	; Change bg color (black)
000274r 2               	lda #$3f
000274r 2               	sta PPU_ADDR
000274r 2               	lda #$00
000274r 2               	sta PPU_ADDR
000274r 2               	lda #$0f
000274r 2               	sta PPU_DATA
000274r 2               	lda #$3f
000274r 2               	sta PPU_ADDR
000274r 2               	lda #$00
000274r 2               	sta PPU_ADDR
000274r 2               
000274r 2               	; Map setting
000274r 2               	lda #$ff
000274r 2               	sta DrawMap::row_counter
000274r 2               
000274r 2               	and #0
000274r 2               	sta DrawMap::index
000274r 2               
000274r 2               	lda #'G'
000274r 2               	sta DrawMap::fill_ground_block
000274r 2               
000274r 2               	; test(load map 1 of world 1-1)
000274r 2               	ldy #$41
000274r 2               	jsr DrawMap::_setStageAddr
000274r 2               	ldy #0
000274r 2               	jsr DrawMap::_setMapAddr
000274r 2               
000274r 2               
000274r 2               		jsr Subfunc::_dispStatus
000274r 2               
000274r 2               		lda ppu_ctrl1_cpy
000274r 2               		ora #%10000000
000274r 2               		sta ppu_ctrl1_cpy
000274r 2               		jsr Subfunc::_restorePPUSet		; NMI ON
000274r 2               
000274r 2               		lda #0
000274r 2               		sta is_processing_main
000274r 2               
000274r 2               
000274r 2               		jsr Subfunc::_sleepOneFrame		; draw disp status & DMA
000274r 2               		jsr Subfunc::_sleepOneFrame		; ここで1Fかせぐと画面の乱れなし
000274r 2               
000274r 2               
000274r 2               	; Restore bg color
000274r 2               	lda #$3f
000274r 2               	sta PPU_ADDR
000274r 2               	lda #$00
000274r 2               	sta PPU_ADDR
000274r 2               	lda #$22
000274r 2               	sta PPU_DATA
000274r 2               
000274r 2               		jsr Subfunc::_setScroll
000274r 2               
000274r 2               		lda #%00011110
000274r 2               		sta ppu_ctrl2_cpy
000274r 2               		jsr Subfunc::_restorePPUSet		; Display ON
000274r 2               
000274r 2               .endmacro
000274r 2               
000274r 1               .include "./asm/draw_map.asm"
000274r 2               .include "draw_map_macro.asm"
000274r 3               .code									; ----- code -----
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; Transfar obj data (8*8) to BG map buff($04XX/$05XX)
000274r 3               ; @PARAMS		X: Block ID
000274r 3               ; @CLOBBERS		A X Y
000274r 3               ; @RETURNS		None (Y: 3)
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro trfToBgMapBuf
000274r 3               		lda BROCK_ID_ARR+LO, x
000274r 3               		sta addr_tmp2+LO
000274r 3               		lda BROCK_ID_ARR+HI, x
000274r 3               		sta addr_tmp2+HI
000274r 3               
000274r 3               		ldx bg_map_buff_index
000274r 3               
000274r 3               		ldy #0
000274r 3               		lda (addr_tmp2), y
000274r 3               		sta bg_map_buff+0, x
000274r 3               
000274r 3               		iny
000274r 3               		lda (addr_tmp2), y
000274r 3               		sta bg_map_buff+($0d*2), x
000274r 3               
000274r 3               		inx
000274r 3               
000274r 3               		iny
000274r 3               		lda (addr_tmp2), y
000274r 3               		sta bg_map_buff+0, x
000274r 3               
000274r 3               		iny
000274r 3               		lda (addr_tmp2), y
000274r 3               		sta bg_map_buff+($0d*2), x
000274r 3               
000274r 3               		inx
000274r 3               
000274r 3               		stx bg_map_buff_index
000274r 3               .endmacro
000274r 3               
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; Increment row_counter
000274r 3               ; @PARAMS		None
000274r 3               ; @CLOBBERS		Y
000274r 3               ; @RETURNS		None (Y: row_counter)
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro incRowCounter
000274r 3               		.local @NO_OVF_ROW_CNT
000274r 3               
000274r 3               		ldy DrawMap::row_counter
000274r 3               		iny
000274r 3               		cpy #$10
000274r 3               		bne @NO_OVF_ROW_CNT
000274r 3               
000274r 3               		ldy #0
000274r 3               		inc DrawMap::map_buff_num
000274r 3               @NO_OVF_ROW_CNT:
000274r 3               		sty DrawMap::row_counter
000274r 3               .endmacro
000274r 3               
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; index = 0xff
000274r 3               ; @PARAMS		None
000274r 3               ; @CLOBBERS		Y
000274r 3               ; @RETURNS		None (Y: 0xff)
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro initIndex
000274r 3               		ldy #NEGATIVE 1
000274r 3               		sty DrawMap::index
000274r 3               .endmacro
000274r 3               
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; Fill blocks (store to bg buff)
000274r 3               ; @PARAMS		None
000274r 3               ; @CLOBBERS		A X Y
000274r 3               ; @RETURNS		None (A = X)
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro fillBlocks
000274r 3               		.local @LOOP
000274r 3               
000274r 3               		lda addr_tmp2+LO
000274r 3               		and #BYT_LO
000274r 3               		sta addr_tmp2+LO
000274r 3               
000274r 3               		ldx #0
000274r 3               		ldy #0
000274r 3               @LOOP:
000274r 3               		lda fill_block_arr, y
000274r 3               		sta (addr_tmp2, x)
000274r 3               
000274r 3               		lda addr_tmp2+LO
000274r 3               		add #$10
000274r 3               		sta addr_tmp2+LO
000274r 3               
000274r 3               		iny
000274r 3               		cpy #$d
000274r 3               		bne @LOOP
000274r 3               .endmacro
000274r 3               
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; fill ground (store to fill buff)
000274r 3               ; @PARAMS		None
000274r 3               ; @CLOBBERS		A X Y
000274r 3               ; @RETURNS		None
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro ramFillGround
000274r 3               		.local @FILL_SKY_LOOP1
000274r 3               		.local @FILL_SKY_LOOP1_END
000274r 3               		.local @FILL_GROUND_LOOP
000274r 3               		.local @FILL_GROUND_LOOP_END
000274r 3               		.local @FILL_SKY_LOOP2
000274r 3               		.local @END_FILL_GROUND
000274r 3               
000274r 3               		ldy #0
000274r 3               
000274r 3               		lda (DrawMap::map_addr), y
000274r 3               		and #BYT_LO
000274r 3               		sta DrawMap::fill_ground_end
000274r 3               
000274r 3               		lda (DrawMap::map_addr), y
000274r 3               		shr #4
000274r 3               		sta DrawMap::fill_ground_start
000274r 3               
000274r 3               
000274r 3               		lda #0
000274r 3               		tax
000274r 3               @FILL_SKY_LOOP1:
000274r 3               		cpx DrawMap::fill_ground_start
000274r 3               		bcs @FILL_SKY_LOOP1_END
000274r 3               		sta fill_block_arr, x
000274r 3               		inx
000274r 3               		cpx #$d
000274r 3               		bcc @FILL_SKY_LOOP1
000274r 3               		bcs @END_FILL_GROUND
000274r 3               @FILL_SKY_LOOP1_END:
000274r 3               
000274r 3               		lda DrawMap::fill_ground_block
000274r 3               @FILL_GROUND_LOOP:
000274r 3               		cpx DrawMap::fill_ground_end
000274r 3               		bcs @FILL_GROUND_LOOP_END
000274r 3               		sta fill_block_arr, x
000274r 3               		inx
000274r 3               		cpx #$d
000274r 3               		bcc @FILL_GROUND_LOOP
000274r 3               		bcs @END_FILL_GROUND
000274r 3               @FILL_GROUND_LOOP_END:
000274r 3               
000274r 3               		lda #0
000274r 3               @FILL_SKY_LOOP2:
000274r 3               		sta fill_block_arr, x
000274r 3               		inx
000274r 3               		cpx #$d
000274r 3               		bcc @FILL_SKY_LOOP2
000274r 3               
000274r 3               @END_FILL_GROUND:
000274r 3               .endmacro
000274r 3               
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; fill blocks (store to fill buff)
000274r 3               ; @PARAMS		None
000274r 3               ; @CLOBBERS		A X Y
000274r 3               ; @RETURNS		None
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro ramFillBlocks
000274r 3               		.local @FILL_BLOCK_LOOP_UPPER
000274r 3               		.local @NO_BLOCK1
000274r 3               		.local @FILL_BLOCK_LOOP_LOWER
000274r 3               		.local @NO_BLOCK2
000274r 3               
000274r 3               		ldy #1
000274r 3               		lda (DrawMap::map_addr), y		; ブロック種類
000274r 3               		sta DrawMap::fill_block
000274r 3               
000274r 3               
000274r 3               		iny
000274r 3               		lda (DrawMap::map_addr), y		; 上位
000274r 3               		shl #3							; 上位3ビット削除
000274r 3               
000274r 3               		ldx #0
000274r 3               @FILL_BLOCK_LOOP_UPPER:
000274r 3               		shl #1
000274r 3               		bcc @NO_BLOCK1
000274r 3               
000274r 3               		pha
000274r 3               		lda DrawMap::fill_block
000274r 3               		sta fill_block_arr, x
000274r 3               		pla
000274r 3               
000274r 3               @NO_BLOCK1:
000274r 3               		inx
000274r 3               		cpx #$5
000274r 3               		bcc @FILL_BLOCK_LOOP_UPPER
000274r 3               
000274r 3               
000274r 3               		iny
000274r 3               		lda (DrawMap::map_addr), y		; 下位
000274r 3               @FILL_BLOCK_LOOP_LOWER:
000274r 3               		shl #1
000274r 3               		bcc @NO_BLOCK2
000274r 3               
000274r 3               		pha
000274r 3               		lda DrawMap::fill_block
000274r 3               		sta fill_block_arr, x
000274r 3               		pla
000274r 3               
000274r 3               @NO_BLOCK2:
000274r 3               		inx
000274r 3               		cpx #$d
000274r 3               		bcc @FILL_BLOCK_LOOP_LOWER
000274r 3               .endmacro
000274r 3               
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; Load next map
000274r 3               ; @PARAMS		None
000274r 3               ; @CLOBBERS		Y
000274r 3               ; @RETURNS		None
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro loadNextMap
000274r 3               		inc DrawMap::map_arr_num
000274r 3               		ldy DrawMap::map_arr_num		; Y = ++map_arr_num
000274r 3               		jsr _setMapAddr
000274r 3               .endmacro
000274r 3               
000274r 3               
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               ; set BG addr (PPU)
000274r 3               ; @PARAMS		None
000274r 3               ; @CLOBBERS		A
000274r 3               ; @RETURNS		None
000274r 3               ;*------------------------------------------------------------------------------
000274r 3               
000274r 3               .macro setPpuBgAddr
000274r 3               		lda #0
000274r 3               		sta tmp1						; Start using tmp1
000274r 3               
000274r 3               		lda addr_tmp1+LO
000274r 3               		add #$40
000274r 3               		shl #1
000274r 3               		rol tmp1
000274r 3               		sta ppu_bg_addr+LO
000274r 3               
000274r 3               		lda addr_tmp1+HI				; 4 or 5
000274r 3               		and #BIT0
000274r 3               		shl #2							; 0 or 4
000274r 3               		ora #$20						; $20 or $24
000274r 3               		ora tmp1						; End using tmp1
000274r 3               		sta ppu_bg_addr+HI
000274r 3               .endmacro
000274r 3               
000274r 2               
000274r 2               .scope DrawMap
000274r 2               
000274r 2               .ZeroPage
000020r 2  00           map_buff_num			: .byte 0
000021r 2  00 00        map_arr_addr			: .addr 0
000023r 2  00 00        map_addr				: .addr 0		; Map obj/position data (-> data addr: ROM)
000025r 2  00           isend_draw_stage		: .byte 0
000026r 2  00           row_counter				: .byte 0		; Every time this prg executed -> increment
000027r 2  00           index					: .byte 0		; index of map_addr
000028r 2  00           cnt_map_next			: .byte 0		; data (read from map_addr) = SP code(go next map) -> increment this counter
000029r 2  00           map_arr_num				: .byte 0
00002Ar 2  00           fill_upper				: .byte 0
00002Br 2  00           fill_lower				: .byte 0
00002Cr 2  00           fill_ground_block		: .byte 0
00002Dr 2  00           fill_block				: .byte 0
00002Er 2  00           fill_ground_end			: .byte 0
00002Fr 2  00           fill_ground_start		: .byte 0
000030r 2               
000030r 2               
000030r 2               ;*------------------------------------------------------------------------------
000030r 2               ; Update one row
000030r 2               ; @PARAMS		None
000030r 2               ; @CLOBBERS		A X Y tmp1 addr_tmp1 addr_tmp2
000030r 2               ; @RETURNS		None
000030r 2               /* main label
000030r 2               	@START:
000030r 2               	@GET_POS_AND_OBJ_LOOP:
000030r 2               	@END_OF_MAP:						-> goto nextlabel (@LOAD_NEXT_MAP)
000030r 2               	@LOAD_NEXT_MAP:						-> goto @GET_POS_AND_OBJ_LOOP
000030r 2               	@END_OF_STAGE:						-> goto nextlabel (@PREPARE_BG_MAP_BUF)
000030r 2               	@PREPARE_BG_MAP_BUF:
000030r 2               	@STORE_BG_MAP_BUF_LOOP:
000030r 2               */
000030r 2               ;*------------------------------------------------------------------------------
000030r 2               
000030r 2               .code									; ----- code -----
000274r 2               
000274r 2               .proc _updateOneLine
000274r 2  A5 rr        		lda DrawMap::isend_draw_stage
000276r 2  F0 01        		beq @START
000278r 2  60           		rts
000279r 2               		; ------------------------------
000279r 2               
000279r 2               @START:
000279r 2  A4 rr C8 C0  		incRowCounter
00027Dr 2  10 D0 04 A0  
000281r 2  00 E6 rr 84  
000286r 2               
000286r 2  A5 rr        		lda DrawMap::map_buff_num
000288r 2  29 01        		and #BIT0
00028Ar 2  09 04        		ora #4
00028Cr 2  85 rr        		sta addr_tmp2+HI
00028Er 2               
00028Er 2  A5 rr        		lda DrawMap::row_counter
000290r 2  85 rr        		sta addr_tmp2
000292r 2               
000292r 2  A5 rr 29 0F  		fillBlocks
000296r 2  85 rr A2 00  
00029Ar 2  A0 00 B9 3C  
0002ADr 2               
0002ADr 2  A4 rr        		ldy DrawMap::index
0002AFr 2               @GET_POS_AND_OBJ_LOOP:
0002AFr 2               		; ----------- get pos ----------
0002AFr 2  B1 rr        		lda (DrawMap::map_addr), y
0002B1r 2  85 rr        		sta tmp1
0002B3r 2               
0002B3r 2               		; Check Special Code
0002B3r 2  C9 FE        		cmp #OBJMAP_NEXT
0002B5r 2  F0 38        		beq @LOAD_NEXT_MAP
0002B7r 2               
0002B7r 2  C9 FF        		cmp #OBJMAP_END
0002B9r 2  F0 25        		beq @END_OF_MAP
0002BBr 2               
0002BBr 2               		; Check if it can be updated
0002BBr 2  29 0F        		and #BYT_LO
0002BDr 2  C5 rr        		cmp DrawMap::row_counter
0002BFr 2  D0 1A        		bne @GET_POS_AND_OBJ_LOOP_EXIT
0002C1r 2               
0002C1r 2  A5 rr        		lda DrawMap::map_buff_num
0002C3r 2  C5 rr        		cmp DrawMap::cnt_map_next		; Count OBJMAP_NEXT (is not reset until the stage changes)
0002C5r 2  D0 14        		bne @GET_POS_AND_OBJ_LOOP_EXIT
0002C7r 2               
0002C7r 2               		; -- Set addr of bg map buff ---
0002C7r 2  29 01        		and #BIT0
0002C9r 2  09 04        		ora #4
0002CBr 2  85 rr        		sta addr_tmp1+HI
0002CDr 2               
0002CDr 2               
0002CDr 2  A5 rr        		lda tmp1						; End using tmp1
0002CFr 2  85 rr        		sta addr_tmp1+LO
0002D1r 2               
0002D1r 2               		; ----------- get chr ----------
0002D1r 2  C8           		iny
0002D2r 2  A2 00        		ldx #0
0002D4r 2  B1 rr        		lda (DrawMap::map_addr), y
0002D6r 2  81 rr        		sta (addr_tmp1, x)
0002D8r 2               
0002D8r 2  C8           		iny
0002D9r 2  D0 D4        		bne @GET_POS_AND_OBJ_LOOP		; Jmp
0002DBr 2               		; ------------------------------
0002DBr 2               
0002DBr 2               @GET_POS_AND_OBJ_LOOP_EXIT:
0002DBr 2  84 rr        		sty DrawMap::index
0002DDr 2  4C rr rr     		jmp @PREPARE_BG_MAP_BUF
0002E0r 2               		; ------------------------------
0002E0r 2               
0002E0r 2               
0002E0r 2               		; End of map data (Not end of stage)
0002E0r 2               @END_OF_MAP:
0002E0r 2  E6 rr A4 rr  		loadNextMap
0002E4r 2  20 rr rr     
0002E7r 2               
0002E7r 2  A5 rr        		lda DrawMap::map_addr+HI
0002E9r 2  C9 FF        		cmp #ENDCODE					; A = Addr Hi
0002EBr 2  F0 08        		beq @END_OF_STAGE
0002EDr 2               
0002EDr 2  A0 03        		ldy #3							; この後inyされてy(index) = 4に
0002EFr 2               
0002EFr 2               @LOAD_NEXT_MAP:
0002EFr 2  E6 rr        		inc DrawMap::cnt_map_next
0002F1r 2  C8           		iny
0002F2r 2  4C rr rr     		jmp @GET_POS_AND_OBJ_LOOP
0002F5r 2               		; ------------------------------
0002F5r 2               
0002F5r 2               @END_OF_STAGE:
0002F5r 2  A0 00        		ldy #0
0002F7r 2  84 rr        		sty DrawMap::index
0002F9r 2  C8           		iny								; Y = 1
0002FAr 2  84 rr        		sty DrawMap::isend_draw_stage
0002FCr 2               
0002FCr 2               @PREPARE_BG_MAP_BUF:
0002FCr 2  A5 rr        		lda DrawMap::row_counter
0002FEr 2  85 rr        		sta addr_tmp1+LO				; PosY = 0
000300r 2               
000300r 2  A5 rr        		lda DrawMap::map_buff_num
000302r 2  29 01        		and #BIT0
000304r 2  09 04        		ora #4
000306r 2  85 rr        		sta addr_tmp1+HI
000308r 2               
000308r 2  A9 00 85 rr  		setPpuBgAddr
00030Cr 2  A5 rr 18 69  
000310r 2  40 0A 26 rr  
000322r 2               
000322r 2               		; Store plt addr(ppu)
000322r 2  A5 rr        		lda addr_tmp1+LO				; posX
000324r 2  4A           		shr #1
000325r 2  18 69 C0     		add #$c0
000328r 2  85 rr        		sta plt_addr+LO
00032Ar 2               
00032Ar 2  A5 rr        		lda addr_tmp1+HI
00032Cr 2  29 01        		and #1
00032Er 2  0A 0A        		shl #2
000330r 2  18 69 23     		add #$23
000333r 2  85 rr        		sta plt_addr+HI
000335r 2               
000335r 2  A0 00        		ldy #0
000337r 2  84 rr        		sty bg_map_buff_index
000339r 2               
000339r 2               @STORE_BG_MAP_BUF_LOOP:					; for (y = 0; y < $0d; y++)
000339r 2  98           		tya
00033Ar 2  0A 0A 0A 0A  		shl #4
00033Er 2  A8           		tay
00033Fr 2  B1 rr        		lda (addr_tmp1), y
000341r 2               
000341r 2               		; prepare plt data -------------
000341r 2  84 rr        		sty tmp2						; (save counter) += $10
000343r 2  A4 rr        		ldy tmp1						; (save counter) += 1
000345r 2  48           		pha								; push
000346r 2  29 30        		and #BIT5|BIT4
000348r 2  AA           		tax								; X: plt num(bit4-5) : tmp (Start using)
000349r 2  A5 rr        		lda DrawMap::row_counter
00034Br 2  29 01        		and #BIT0
00034Dr 2  85 rr        		sta tmp3
00034Fr 2  98           		tya
000350r 2  29 01        		and #BIT0
000352r 2  0A           		shl #1
000353r 2  05 rr        		ora tmp3
000355r 2  85 rr        		sta tmp3
000357r 2               
000357r 2               		; y /= 2 (Use @PLT0) -> MEMO: 短縮可能
000357r 2  98           		tya
000358r 2  4A           		shr #1
000359r 2  A8           		tay
00035Ar 2               
00035Ar 2  8A           		txa								; End using X (plt num)
00035Br 2  A6 rr        		ldx tmp3
00035Dr 2               		/*
00035Dr 2               		PLT_DATA = BLOCK3|BLOCK2|BLOCK1|BLOCK0
00035Dr 2               		-------------------------------
00035Dr 2               		| BLOCK0(>>4) | BLOCK1(>>2) |
00035Dr 2               		| BLOCK2(0)   | BLOCK3(<<2) |
00035Dr 2               		-------------------------------
00035Dr 2               		*/
00035Dr 2  F0 09        		beq @BLOCK0
00035Fr 2  CA           		dex
000360r 2  F0 0D        		beq @BLOCK1
000362r 2  CA           		dex
000363r 2  F0 11        		beq @BLOCK2
000365r 2  CA           		dex
000366r 2  F0 0C        		beq @BLOCK3
000368r 2               @BLOCK0:
000368r 2  4A 4A 4A 4A  		shr #4
00036Cr 2  4C rr rr     		jmp @STORE_TO_PLT_BUFF
00036Fr 2               		; ------------------------------
00036Fr 2               @BLOCK1:
00036Fr 2  4A 4A        		shr #2
000371r 2  4C rr rr     		jmp @ADD_LEFT_BLOCK_PLT
000374r 2               		; ------------------------------
000374r 2               @BLOCK3:
000374r 2  0A 0A        		shl #2
000376r 2               @BLOCK2:
000376r 2               @ADD_LEFT_BLOCK_PLT:
000376r 2  19 34 01     		ora bg_plt_buff, y
000379r 2               @STORE_TO_PLT_BUFF:
000379r 2  99 34 01     		sta bg_plt_buff, y
00037Cr 2               
00037Cr 2  68           		pla								; pull
00037Dr 2  A4 rr        		ldy tmp2
00037Fr 2               
00037Fr 2  29 3F        		and #BIT5|BIT4|BIT3|BIT2|BIT1|BIT0
000381r 2  0A           		shl #1
000382r 2               
000382r 2  AA           		tax
000383r 2  BD rr rr 85  		trfToBgMapBuf
000387r 2  rr BD rr rr  
00038Br 2  85 rr A6 rr  
0003ACr 2               
0003ACr 2  A4 rr        		ldy tmp1
0003AEr 2  C8           		iny
0003AFr 2  84 rr        		sty tmp1
0003B1r 2  C0 0D        		cpy #$0d
0003B3r 2  90 84        		bcc @STORE_BG_MAP_BUF_LOOP
0003B5r 2               
0003B5r 2  60           		rts
0003B6r 2               		;-------------------------------
0003B6r 2               .endproc
0003B6r 2               
0003B6r 2               ;*------------------------------------------------------------------------------
0003B6r 2               ; Set addr of stages
0003B6r 2               ; @PARAMS		Y: stage number
0003B6r 2               ; @CLOBBERS		A Y
0003B6r 2               ; @RETURNS		None (A = addr Hi)
0003B6r 2               ;*------------------------------------------------------------------------------
0003B6r 2               
0003B6r 2               .code									; ----- code -----
0003B6r 2               
0003B6r 2               .proc _setStageAddr
0003B6r 2  98           		tya
0003B7r 2  0A           		shl #1
0003B8r 2  A8           		tay
0003B9r 2               
0003B9r 2  B9 rr rr     		lda STAGE_ARR+LO, y
0003BCr 2  85 rr        		sta DrawMap::map_arr_addr+LO
0003BEr 2  B9 rr rr     		lda STAGE_ARR+HI, y
0003C1r 2  85 rr        		sta DrawMap::map_arr_addr+HI
0003C3r 2               
0003C3r 2  60           		rts
0003C4r 2               		; ------------------------------
0003C4r 2               .endproc
0003C4r 2               
0003C4r 2               
0003C4r 2               ;*------------------------------------------------------------------------------
0003C4r 2               ; Set addr of maps
0003C4r 2               ; @PARAMS		Y: map index
0003C4r 2               ; @CLOBBERS		A Y
0003C4r 2               ; @RETURNS		None
0003C4r 2               ;*------------------------------------------------------------------------------
0003C4r 2               
0003C4r 2               .code									; ----- code -----
0003C4r 2               
0003C4r 2               .proc _setMapAddr
0003C4r 2  98           		tya
0003C5r 2  0A           		shl #1
0003C6r 2  A8           		tay
0003C7r 2  48           		pha								; push y
0003C8r 2               
0003C8r 2  B1 rr        		lda (DrawMap::map_arr_addr), y
0003CAr 2  85 rr        		sta DrawMap::map_addr+LO
0003CCr 2  C8           		iny
0003CDr 2  B1 rr        		lda (DrawMap::map_arr_addr), y
0003CFr 2  85 rr        		sta DrawMap::map_addr+HI
0003D1r 2               
0003D1r 2               		; ffコードをこの関数の返値にして，この関数の外でマップ終了を判定しているが
0003D1r 2               		; その前に@NO_EXIT以下の処理を行ってしまい，バグるため，ここで抜ける
0003D1r 2               		; 直接@END_OF_STAGEにジャンプしてもOKなはずだが（マップ終了判定でジャンプするラベル）
0003D1r 2               		; procを使っているため今は無理
0003D1r 2  C9 FF        		cmp #ENDCODE
0003D3r 2  D0 05        		bne @NO_EXIT
0003D5r 2  68           		pla
0003D6r 2  A8           		tay
0003D7r 2  A9 FF        		lda #ENDCODE
0003D9r 2  60           		rts
0003DAr 2               		; ------------------------------
0003DAr 2               
0003DAr 2               @NO_EXIT:
0003DAr 2  A0 00 B1 rr  		ramFillGround
0003DEr 2  29 0F 85 rr  
0003E2r 2  B1 rr 4A 4A  
000415r 2  A0 01 B1 rr  		ramFillBlocks
000419r 2  85 rr C8 B1  
00041Dr 2  rr 0A 0A 0A  
000444r 2               
000444r 2  A0 04        		ldy #4								; マクロ後inyでもy = 4
000446r 2  84 rr        		sty DrawMap::index
000448r 2               
000448r 2  68           		pla
000449r 2  A8           		tay
00044Ar 2               
00044Ar 2  60           		rts
00044Br 2               		; ------------------------------
00044Br 2               .endproc
00044Br 2               
00044Br 2               
00044Br 2               .endscope
00044Br 2               
00044Br 1               .include "main.asm"
00044Br 2               ;*------------------------------------------------------------------------------
00044Br 2               ; MAIN routine
00044Br 2               ;*------------------------------------------------------------------------------
00044Br 2               
00044Br 2               .code									; ----- code -----
00044Br 2               
00044Br 2               .proc _main
00044Br 2  A5 rr        		lda is_processing_main
00044Dr 2  F0 FC        		beq _main
00044Fr 2               
00044Fr 2  20 rr rr     		jsr Joypad::_getJoyData
000452r 2               
000452r 2  A5 rr        		lda Joypad::joy1_pushstart
000454r 2  29 80        		and #Joypad::BTN_A
000456r 2  F0 06        		beq @NO_PUSHED_BTN_A
000458r 2               
000458r 2  20 rr rr     		jsr DrawMap::_updateOneLine
00045Br 2  20 rr rr     		jsr Subfunc::_preparePltData
00045Er 2               @NO_PUSHED_BTN_A:
00045Er 2               
00045Er 2               
00045Er 2               		; ----- End main -----
00045Er 2  A9 00        		lda #0
000460r 2  85 rr        		sta is_processing_main
000462r 2  4C rr rr     		jmp _main
000465r 2               		; ------------------------------
000465r 2               .endproc
000465r 2               
000465r 1               
000465r 1               ; Use .org
000465r 1               .org SPR_BUFF
000300  1  xx xx xx xx  		.tag SPR_TBL
000304  1  xx xx xx xx  
000308  1  xx xx xx xx  
000400  1               
000400  1               
000400  1               .code									; ----- code -----
000400  1               .org $8000
008000  1               .segment "STARTUP"
008000  1               
008000  1               .proc _reset
008000  1  78 D8 A2 40  		init
008004  1  8E 17 40 A2  
008008  1  FF 9A E8 8E  
008102  1               
008102  1  A9 01        		lda #1
008104  1  85 rr        		sta is_processing_main
008106  1               
008106  1  4C rr rr     		jmp _main
008109  1               		; ------------------------------
008109  1               .endproc
008109  1               
008109  1               
008109  1               .proc _irq
008109  1  40           		rti
00810A  1               .endproc
00810A  1               
00810A  1               
00810A  1               .segment "CHARS"
00810A  1  03 0F 1F 1F  		.incbin "spr_bg.chr"
00810E  1  1C 24 26 66  
008112  1  00 00 00 00  
00A10A  1               
00A10A  1               
00A10A  1               .segment "VECINFO"
00A10A  1  rr rr        		.addr _nmi
00A10C  1  00 80        		.addr _reset
00A10E  1  09 81        		.addr _irq
00A10E  1               
