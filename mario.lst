ca65 V2.19 - Git de30a57
Main file   : mario.asm
Current file: mario.asm

000000r 1               .setcpu "6502"
000000r 1               .feature c_comments						; Allow C language type comments (/* comments */)
000000r 1               .feature underline_in_numbers			; Allow notation %1010_0010
000000r 1               .feature string_escapes					; Allow \t, \n, \" and so on
000000r 1               .linecont +								; Allow line breaks in the middle of lines if you put a backslash at the end of the line
000000r 1               
000000r 1               
000000r 1               .segment "HEADER"
000000r 1  4E 45 53 1A  		.byte "NES", $1a
000004r 1  02           		.byte $02						; Program bank
000005r 1  01           		.byte $01						; Charactor bank
000006r 1  01           		.byte $01						; Vartical mirror
000007r 1  00           		.byte $00
000008r 1  00 00 00 00  		.byte $00, $00, $00, $00
00000Cr 1  00 00 00 00  		.byte $00, $00, $00, $00
000010r 1               
000010r 1               
000010r 1               .rodata									; ----- data -----
000000r 1               
000000r 1               .include "./inc/const.inc"
000000r 2               PPU_VERTICAL_MODE						= %11111110
000000r 2               PPU_HORIZONTAL_MODE						= %11111111
000000r 2               
000000r 2               ENDCODE									= $ff
000000r 2               
000000r 2               OBJMAP_NEXT								= $fe
000000r 2               OBJMAP_END								= $ff
000000r 2               
000000r 2               PPU_CTRL1_STD							= %10010000			; |NMION|PPU=MASTER|SPR8*8|BG$1000|SPR$0000|VRAM+1|SCRN$2000(2)|
000000r 2               PPU_CTRL2_STD							= %00011110			; |R|G|B|DISP-SPR|DISP-BG|SHOW-L8SPR|SHOW-L8BG|MODE=COLOR|
000000r 2               
000000r 2               BIT0									= %00000001
000000r 2               BIT1									= %00000010
000000r 2               BIT2									= %00000100
000000r 2               BIT3									= %00001000
000000r 2               BIT4									= %00010000
000000r 2               BIT5									= %00100000
000000r 2               BIT6									= %01000000
000000r 2               BIT7									= %10000000
000000r 2               
000000r 2               BYT_GET_HI								= %11110000
000000r 2               BYT_GET_LO								= %00001111
000000r 2               
000000r 2               LO										= 0
000000r 2               HI										= 1
000000r 2               
000000r 2               INIT									= 0
000000r 2               
000000r 2               PLAYER_SPR_ID							= $1				; スプライトID
000000r 2               PLAYER_CHR_BUFF_INDEX					= $0				; スプライトRAMのインデックス（0爆弾の次に配置する）
000000r 2               PLAYER_WIDTH							= $c
000000r 2               PLAYER_PADDING							= $2
000000r 2               
000000r 2               PLAYER_MAX_POSX							= $70				; マリオの行ける最大X座標（スクロールロックが無いとき）
000000r 2               
000000r 1               .include "./inc/const_addr.inc"
000000r 2               ZP					= $00
000000r 2               ; Unused $0200
000000r 2               bg_map_buff			= $0100				; size = $d ($10 - $3) * $4 = $40 - $c = $34
000000r 2               bg_plt_buff			= $0134				; size = 8
000000r 2               fill_block_arr		= $013c				; size = 13 ($d)
000000r 2               bg_buff				= $0149
000000r 2               CHR_BUFF			= $0300
000000r 2               MAP1				= $0400
000000r 2               MAP2				= $0500
000000r 2               USER_MEM			= $0700
000000r 2               
000000r 2               PLT_TABLE_ADDR		= $3f00
000000r 2               
000000r 2               PPU_CTRL1			= $2000
000000r 2               PPU_CTRL2			= $2001
000000r 2               PPU_STATUS			= $2002
000000r 2               OAM_ADDR			= $2003
000000r 2               OAM_DATA			= $2004
000000r 2               PPU_SCROLL			= $2005
000000r 2               PPU_ADDR			= $2006
000000r 2               PPU_DATA			= $2007
000000r 2               OAM_DMA				= $4014
000000r 2               
000000r 2               
000000r 2               SOUND_SQ1_1			= $4000				; Duty(2)|time counter|音響変化|ボリューム(4)
000000r 2               SOUND_SQ1_2			= $4001				; 周波数変化|変化速度(3)|変化方向|変化範囲(3)
000000r 2               SOUND_SQ1_3			= $4002				; 周波数下位
000000r 2               SOUND_SQ1_4			= $4003				; 再生時間(5)|周波数上位(3)
000000r 2               SOUND_SQ2_1			= $4004
000000r 2               SOUND_SQ2_2			= $4005
000000r 2               SOUND_SQ2_3			= $4006
000000r 2               SOUND_SQ2_4			= $4007
000000r 2               SOUND_TR_1			= $4008				; 再生時間カウンタ|カウンタを使用した長さ(7)
000000r 2               SOUND_TR_2			= $400A				; 周波数下位
000000r 2               SOUND_TR_3			= $400B				; 再生時間(5)|周波数上位(3)
000000r 2               SOUND_NS_1			= $400C				; 未使用(2)|再生時間カウンタ|音響固定|ボリューム(3)
000000r 2               SOUND_NS_2			= $400E				; 乱数タイプ(高周波)|未使用(3)|サンプルレート(4)
000000r 2               SOUND_NS_3			= $400F				; 再生時間(5)|未使用(3)
000000r 2               SOUND_DP_1			= $4010
000000r 2               SOUND_DP_2			= $4011
000000r 2               SOUND_DP_3			= $4012
000000r 2               SOUND_DP_4			= $4013
000000r 2               SOUND_CHANNEL		= $4015				; 未使用(3)|DPCM|ノイズ|三角波|CH2|CH1
000000r 2               
000000r 2               
000000r 2               JOYPAD1				= $4016
000000r 2               JOYPAD2				= $4017
000000r 2               
000000r 1               .include "./inc/var_addr.inc"
000000r 2               ; ZeroPage
000000r 2               .segment "ZEROPAGE"
000000r 2  00           tmp1					: .byte 0
000001r 2  00           tmp2					: .byte 0
000002r 2  00           tmp3					: .byte 0
000003r 2  00           tmp4					: .byte 0
000004r 2  00           tmp5					: .byte 0
000005r 2  00           tmp6					: .byte 0
000006r 2               
000006r 2  00           bg_buff_pointer			: .byte 0
000007r 2  00 00        addr_tmp1				: .addr 0
000009r 2  00 00        addr_tmp2				: .addr 0
00000Br 2               
00000Br 2  00           bg_map_buff_index		: .byte 0		; BG（マップ）専用バッファ
00000Cr 2               
00000Cr 2  00 00        ppu_bg_addr				: .addr 0
00000Er 2               
00000Er 2  00           tmp_rgstA				: .byte 0
00000Fr 2  00           tmp_rgstX				: .byte 0
000010r 2  00           tmp_rgstY				: .byte 0
000011r 2               
000011r 2               ; These are not used often, but are used in NMI
000011r 2  00           ppu_ctrl1_cpy			: .byte 0		; |NMI-ON|PPU=MASTER|SPR8*8|BG$1000|SPR$0000|VRAM+1|SCREEN$2000(2)|
000012r 2  00           ppu_ctrl2_cpy			: .byte 0		; |R|G|B|DISP-SPR|DISP-BG|SHOW-L8-SPR|SHOW-L8-BG|MODE=COLOR|
000013r 2               
000013r 2  00           scroll_x				: .byte 0
000014r 2  00           scroll_amount			: .byte 0
000015r 2               
000015r 2  00           main_disp				: .byte 0
000016r 2               
000016r 2  00           nmi_cnt					: .byte 0
000017r 2  00           frm_cnt					: .byte 0
000018r 2  00           is_processing_main		: .byte 0
000019r 2               
000019r 2  00 00        plt_addr				: .addr 0
00001Br 2               
00001Br 2  00           is_updated_map			: .byte 0
00001Cr 2               
00001Cr 2  00           is_scroll_locked		: .byte 0
00001Dr 2               
00001Dr 2  00           is_jumping				: .byte 0
00001Er 2               
00001Er 2               
00001Er 2               .segment "BUFF_MEM"
000000r 2               
000000r 2               
000000r 2  xx xx xx xx  spr_posX_arr						: .res 6
000004r 2  xx xx        
000006r 2  xx xx xx xx  spr_posX_tmp_arr					: .res 6
00000Ar 2  xx xx        
00000Cr 2  xx xx xx xx  spr_velocity_x_arr					: .res 6
000010r 2  xx xx        
000012r 2  xx xx xx xx  spr_float_velocity_x_arr			: .res 6
000016r 2  xx xx        
000018r 2  xx xx xx xx  spr_decimal_part_velocity_x_arr		: .res 6		; 小数部分のみ（補正値）
00001Cr 2  xx xx        
00001Er 2               
00001Er 2  xx xx xx xx  spr_posY_arr						: .res 6
000022r 2  xx xx        
000024r 2  xx xx xx xx  spr_posY_tmp_arr					: .res 6
000028r 2  xx xx        
00002Ar 2  xx xx xx xx  spr_velocity_y_arr					: .res 6
00002Er 2  xx xx        
000030r 2  xx xx xx xx  spr_decimal_part_velocity_y_arr		: .res 6		; 小数部分のみ（補正値）
000034r 2  xx xx        
000036r 2  xx xx xx xx  spr_pos_y_origin					: .res 6
00003Ar 2  xx xx        
00003Cr 2  xx xx xx xx  spr_decimal_part_force_y			: .res 6		; 現在の加速度
000040r 2  xx xx        
000042r 2  xx xx xx xx  spr_force_fall_y					: .res 6		; 降下時の加速度
000046r 2  xx xx        
000048r 2  xx xx xx xx  spr_pos_y_decimal_part				: .res 6
00004Cr 2  xx xx        
00004Er 2  xx xx xx xx  spr_fix_val_y						: .res 6		; 加速度補正値
000052r 2  xx xx        
000054r 2               
000054r 2  xx xx xx xx  spr_anime_timer						: .res 6
000058r 2  xx xx        
00005Ar 2  xx xx xx xx  spr_anime_num						: .res 6
00005Er 2  xx xx        
000060r 2  xx xx xx xx  spr_id_arr							: .res 6		; id = 0: no spr
000064r 2  xx xx        
000066r 2  xx xx xx xx  spr_attr_arr						: .res 6		; bit0: 向き（1のとき右向き）
00006Ar 2  xx xx        
00006Cr 2               
00006Cr 2               
00006Cr 2               .code
000000r 2               
000000r 1               .include "./inc/defmacro.inc"
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Calcurate BG address
000000r 2               ; @PARAMS	 ptx: X coordinate
000000r 2               ; @PARAMS	 pty: Y coordinate
000000r 2               ; @PARAMS	 scn: Screen number
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define ADDR_BG (ptx, pty, scn)			$2000 + (ptx) + ((pty) * $20) + ((scn) * $400)
000000r 2               .define ADDR_BG_BE (ptx, pty, scn)		GET_BE ADDR_BG (ptx), (pty), (scn)
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Calcurate SPR address
000000r 2               ; @PARAMS	 spr_num: Sprite number (0~63)
000000r 2               ; @PARAMS	 member:
000000r 2               ; 	pty: PosiTion Y
000000r 2               ; 	num: Tile(8*8) number
000000r 2               ; 	att: Attribute (VertFlip|HorizonFlip|Prio|Unused(3)|PltNum(2))
000000r 2               ; 	ptx: PosiTion X
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define ADDR_SPR(spr_num, member)		CHR_BUFF + ((spr_num)*4) + SPR_STRUCT::member
000000r 2               
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Get data in big endian
000000r 2               ; dbyt = Define BYTe?
000000r 2               ; Define word data with the hi & lo bytes swapped
000000r 2               ; ($1234=$12,$34)
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define GET_BE(data)					.dbyt data
000000r 2               
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Get obj position
000000r 2               ; @PARAMS		posX, posY
000000r 2               ; @RETURNS		$YX
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define GET_OBJ_POS(posX, posY)		($c - (posY)) * $10 + (posX)
000000r 2               
000000r 2               
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               ; Return negative number
000000r 2               ;*------------------------------------------------------------------------------
000000r 2               
000000r 2               .define NEGATIVE(val)	256 - (val)
000000r 2               
000000r 1               .include "./inc/palette.inc"
000000r 2               DEFAULT_PLT:
000000r 2               		; BG
000000r 2  36 17 0F     		.byte $36, $17, $0f
000003r 2  27 17 0F     		.byte $27, $17, $0f				; 27 -> 07/17/27
000006r 2  29 1A 0F     		.byte $29, $1a, $0f
000009r 2  30 21 0F     		.byte $30, $21, $0f
00000Cr 2               		; SPR
00000Cr 2  16 27 18     		.byte $16, $27, $18
00000Fr 2  1A 30 27     		.byte $1a, $30, $27
000012r 2  16 30 27     		.byte $16, $30, $27
000015r 2  0F 36 17     		.byte $0f, $36, $17
000018r 2               
000018r 2               
000018r 2               UNDER_GROUND_PLT:
000018r 2               		; BG
000018r 2  3C 1C 0F     		.byte $3c, $1c, $0f
00001Br 2  27 17 1C     		.byte $27, $17, $1c
00001Er 2  29 1A 09     		.byte $29, $1a, $09
000021r 2  30 21 1C     		.byte $30, $21, $1c
000024r 2               		; SPR
000024r 2  16 27 18     		.byte $16, $27, $18
000027r 2  1C 30 17     		.byte $1c, $30, $17				; black disp: $30 -> $36
00002Ar 2  16 30 27     		.byte $16, $30, $27
00002Dr 2  0C 3C 1C     		.byte $0c, $3c, $1c
000030r 2               
000030r 2               
000030r 1               .include "./inc/struct.inc"
000030r 2               .struct	SPR_STRUCT
000030r 2               		pty		.byte					; PosiTion Y
000030r 2               		num		.byte					; Tile(8*8) number
000030r 2               		att		.byte					; Attribute (VertFlip|HorizonFlip|Prio|Unused(3)|PltNum(2))
000030r 2               		ptx		.byte					; PosiTion X
000030r 2               .endstruct
000030r 2               
000030r 2               
000030r 2               .struct	SPR_TBL
000030r 2               		spr		.tag SPR_STRUCT 64
000030r 2               .endstruct
000030r 2               
000030r 1               .include "./inc/map_data.inc"
000030r 2               ; MAP_DATA[stage][map_num][index]
000030r 2               
000030r 2               STAGE_ARR:
000030r 2  rr rr        	.addr MAP_ARR_11
000032r 2  rr rr        	.addr MAP_ARR_12
000034r 2               
000034r 2               MAP_ARR_11:
000034r 2  rr rr        	.addr MAP_11_1
000036r 2  rr rr        	.addr MAP_11_2
000038r 2  FF FF        	.addr $ffff
00003Ar 2               
00003Ar 2               MAP_ARR_12:
00003Ar 2  rr rr        	.addr MAP_12_1
00003Cr 2  FF FF        	.addr $ffff
00003Er 2               
00003Er 2               MAP_11_1:
00003Er 2  BD           	.byte $bd
00003Fr 2  42           	.byte 'B'
000040r 2  00 00        	.byte %00000000, %00000000
000042r 2  90 42        	.byte (GET_OBJ_POS $0, $3), 'B'
000044r 2  78 42        	.byte (GET_OBJ_POS $8, $5), 'B'
000046r 2  49 42        	.byte (GET_OBJ_POS $9, $8), 'B'
000048r 2  79 51        	.byte (GET_OBJ_POS $9, $5), 'Q'
00004Ar 2  4A 51        	.byte (GET_OBJ_POS $a, $8), 'Q'
00004Cr 2  7A 42        	.byte (GET_OBJ_POS $a, $5), 'B'
00004Er 2  4B 42        	.byte (GET_OBJ_POS $b, $8), 'B'
000050r 2  7B 51        	.byte (GET_OBJ_POS $b, $5), 'Q'
000052r 2  7C 42        	.byte (GET_OBJ_POS $c, $5), 'B'
000054r 2  FE           	.byte OBJMAP_NEXT
000055r 2  C0 00        	.byte (GET_OBJ_POS $0, $0), 0
000057r 2  B0 00        	.byte (GET_OBJ_POS $0, $1), 0
000059r 2  C1 00        	.byte (GET_OBJ_POS $1, $0), 0
00005Br 2  B1 00        	.byte (GET_OBJ_POS $1, $1), 0
00005Dr 2  72 42        	.byte (GET_OBJ_POS $2, $5), 'B'
00005Fr 2  FF           	.byte OBJMAP_END
000060r 2               
000060r 2               MAP_11_2:
000060r 2  BD           	.byte $bd
000061r 2  42           	.byte 'B'
000062r 2  00 00        	.byte %00000000, %00000000
000064r 2  70 51        	.byte (GET_OBJ_POS $0, $5), 'Q'
000066r 2  60 51        	.byte (GET_OBJ_POS $0, $6), 'Q'
000068r 2  50 42        	.byte (GET_OBJ_POS $0, $7), 'B'
00006Ar 2  71 51        	.byte (GET_OBJ_POS $1, $5), 'Q'
00006Cr 2  61 51        	.byte (GET_OBJ_POS $1, $6), 'Q'
00006Er 2  51 51        	.byte (GET_OBJ_POS $1, $7), 'Q'
000070r 2  72 51        	.byte (GET_OBJ_POS $2, $5), 'Q'
000072r 2  73 51        	.byte (GET_OBJ_POS $3, $5), 'Q'
000074r 2  FF           	.byte OBJMAP_END
000075r 2               
000075r 2               MAP_12_1:
000075r 2  BD           	.byte $bd
000076r 2  42           	.byte 'B'
000077r 2  10 00        	.byte %00010000, %00000000
000079r 2  A0 42        	.byte (GET_OBJ_POS $0, $2), 'B'
00007Br 2  90 42        	.byte (GET_OBJ_POS $0, $3), 'B'
00007Dr 2  80 42        	.byte (GET_OBJ_POS $0, $4), 'B'
00007Fr 2  70 42        	.byte (GET_OBJ_POS $0, $5), 'B'
000081r 2  60 42        	.byte (GET_OBJ_POS $0, $6), 'B'
000083r 2  50 42        	.byte (GET_OBJ_POS $0, $7), 'B'
000085r 2  40 42        	.byte (GET_OBJ_POS $0, $8), 'B'
000087r 2  30 42        	.byte (GET_OBJ_POS $0, $9), 'B'
000089r 2  20 42        	.byte (GET_OBJ_POS $0, $a), 'B'
00008Br 2  10 42        	.byte (GET_OBJ_POS $0, $b), 'B'
00008Dr 2  00 42        	.byte (GET_OBJ_POS $0, $c), 'B'
00008Fr 2  01 00        	.byte (GET_OBJ_POS $1, $c), 0
000091r 2  02 00        	.byte (GET_OBJ_POS $2, $c), 0
000093r 2  03 00        	.byte (GET_OBJ_POS $3, $c), 0
000095r 2  04 00        	.byte (GET_OBJ_POS $4, $c), 0
000097r 2  05 00        	.byte (GET_OBJ_POS $5, $c), 0
000099r 2  8B 51        	.byte (GET_OBJ_POS $b, $4), 'Q'
00009Br 2  8C 51        	.byte (GET_OBJ_POS $c, $4), 'Q'
00009Dr 2  8D 51        	.byte (GET_OBJ_POS $d, $4), 'Q'
00009Fr 2  8E 51        	.byte (GET_OBJ_POS $e, $4), 'Q'
0000A1r 2  8F 51        	.byte (GET_OBJ_POS $f, $4), 'Q'
0000A3r 2  FE           	.byte OBJMAP_NEXT
0000A4r 2  A2 42        	.byte (GET_OBJ_POS $2, $2), 'B'
0000A6r 2  A4 42        	.byte (GET_OBJ_POS $4, $2), 'B'
0000A8r 2  94 42        	.byte (GET_OBJ_POS $4, $3), 'B'
0000AAr 2  A6 42        	.byte (GET_OBJ_POS $6, $2), 'B'
0000ACr 2  96 42        	.byte (GET_OBJ_POS $6, $3), 'B'
0000AEr 2  86 42        	.byte (GET_OBJ_POS $6, $4), 'B'
0000B0r 2  A8 42        	.byte (GET_OBJ_POS $8, $2), 'B'
0000B2r 2  98 42        	.byte (GET_OBJ_POS $8, $3), 'B'
0000B4r 2  88 42        	.byte (GET_OBJ_POS $8, $4), 'B'
0000B6r 2  78 42        	.byte (GET_OBJ_POS $8, $5), 'B'
0000B8r 2  7A 42        	.byte (GET_OBJ_POS $a, $5), 'B'
0000BAr 2  AC 42        	.byte (GET_OBJ_POS $c, $2), 'B'
0000BCr 2  9C 42        	.byte (GET_OBJ_POS $c, $3), 'B'
0000BEr 2  8C 42        	.byte (GET_OBJ_POS $c, $4), 'B'
0000C0r 2  7C 42        	.byte (GET_OBJ_POS $c, $5), 'B'
0000C2r 2  AE 42        	.byte (GET_OBJ_POS $e, $2), 'B'
0000C4r 2  9E 42        	.byte (GET_OBJ_POS $e, $3), 'B'
0000C6r 2  8E 42        	.byte (GET_OBJ_POS $e, $4), 'B'
0000C8r 2  FE           	.byte OBJMAP_NEXT
0000C9r 2  A0 42        	.byte (GET_OBJ_POS $0, $2), 'B'
0000CBr 2  90 42        	.byte (GET_OBJ_POS $0, $3), 'B'
0000CDr 2  A2 42        	.byte (GET_OBJ_POS $2, $2), 'B'
0000CFr 2  FF           	.byte OBJMAP_END
0000D0r 2               
0000D0r 2               
0000D0r 2               BROCK_ID_ARR:
0000D0r 2               	; 40 = %0100
0000D0r 2  rr rr        	.addr OBJ_SKY						; @ (or 0)
0000D2r 2  00 00        	.addr $0000							; A
0000D4r 2  rr rr        	.addr OBJ_BROCK						; B
0000D6r 2  00 00        	.addr $0000							; C
0000D8r 2  00 00        	.addr $0000							; D
0000DAr 2  00 00        	.addr $0000							; E
0000DCr 2  00 00        	.addr $0000							; F
0000DEr 2  rr rr        	.addr OBJ_GROUND					; G
0000E0r 2  00 00        	.addr $0000							; H
0000E2r 2  00 00        	.addr $0000							; I
0000E4r 2  00 00        	.addr $0000							; J
0000E6r 2  00 00        	.addr $0000							; K
0000E8r 2  00 00        	.addr $0000							; L
0000EAr 2  00 00        	.addr $0000							; M
0000ECr 2  00 00        	.addr $0000							; N
0000EEr 2  00 00        	.addr $0000							; O
0000F0r 2               	; 50 = %0101
0000F0r 2  00 00        	.addr $0000							; P
0000F2r 2  rr rr        	.addr OBJ_QBROCK					; Q
0000F4r 2  00 00        	.addr $0000							; R
0000F6r 2  00 00        	.addr $0000							; S
0000F8r 2  00 00        	.addr $0000							; T
0000FAr 2  00 00        	.addr $0000							; U
0000FCr 2  00 00        	.addr $0000							; V
0000FEr 2  00 00        	.addr $0000							; W
000100r 2  00 00        	.addr $0000							; X
000102r 2  00 00        	.addr $0000							; Y
000104r 2  00 00        	.addr $0000							; Z
000106r 2  00 00        	.addr $0000							; [
000108r 2  00 00        	.addr $0000							; \
00010Ar 2  00 00        	.addr $0000							; ]
00010Cr 2  rr rr        	.addr OBJ_COIN						; ^
00010Er 2  00 00        	.addr $0000							; _
000110r 2               	; 60 = %0110
000110r 2  00 00        	.addr $0000							; `
000112r 2  00 00        	.addr $0000							; a
000114r 2  00 00        	.addr $0000							; b
000116r 2  00 00        	.addr $0000							; c
000118r 2  00 00        	.addr $0000							; d
00011Ar 2  00 00        	.addr $0000							; e
00011Cr 2  00 00        	.addr $0000							; f
00011Er 2  00 00        	.addr $0000							; g
000120r 2  00 00        	.addr $0000							; h
000122r 2  00 00        	.addr $0000							; i
000124r 2  00 00        	.addr $0000							; j
000126r 2  00 00        	.addr $0000							; k
000128r 2  00 00        	.addr $0000							; l
00012Ar 2  00 00        	.addr $0000							; m
00012Cr 2  00 00        	.addr $0000							; n
00012Er 2  00 00        	.addr $0000							; o
000130r 2               	; 70 = %0111
000130r 2  00 00        	.addr $0000							; p
000132r 2  00 00        	.addr $0000							; q
000134r 2  00 00        	.addr $0000							; r
000136r 2  00 00        	.addr $0000							; s
000138r 2  00 00        	.addr $0000							; t
00013Ar 2  00 00        	.addr $0000							; u
00013Cr 2  00 00        	.addr $0000							; v
00013Er 2  00 00        	.addr $0000							; w
000140r 2  00 00        	.addr $0000							; x
000142r 2  00 00        	.addr $0000							; y
000144r 2  00 00        	.addr $0000							; z
000146r 2  00 00        	.addr $0000							; {
000148r 2  00 00        	.addr $0000							; |
00014Ar 2  00 00        	.addr $0000							; }
00014Cr 2  00 00        	.addr $0000							; ~
00014Er 2               
00014Er 2               
00014Er 2               OBJ_SKY:
00014Er 2  00 00        	.byte $00, $00
000150r 2  00 00        	.byte $00, $00
000152r 2               
000152r 2               OBJ_QBROCK:
000152r 2  90 91        	.byte $90, $91
000154r 2  92 93        	.byte $92, $93
000156r 2               
000156r 2               OBJ_BROCK:
000156r 2  94 94        	.byte $94, $94
000158r 2  95 95        	.byte $95, $95
00015Ar 2               
00015Ar 2               OBJ_COIN:
00015Ar 2  84 85        	.byte $84, $85
00015Cr 2  86 87        	.byte $86, $87
00015Er 2               
00015Er 2               OBJ_GROUND:
00015Er 2  80 81        	.byte $80, $81
000160r 2  82 83        	.byte $82, $83
000162r 2               
000162r 2               
000162r 1               
000162r 1               .code									; ----- code -----
000162r 1               
000162r 1               .include "./asm/joypad.asm"
000162r 2               .scope Joypad
000162r 2               
000162r 2               BTN_A									= %10000000
000162r 2               BTN_B									= %01000000
000162r 2               BTN_S									= %00100000
000162r 2               BTN_T									= %00010000
000162r 2               BTN_U									= %00001000
000162r 2               BTN_D									= %00000100
000162r 2               BTN_L									= %00000010
000162r 2               BTN_R									= %00000001
000162r 2               
000162r 2               .ZeroPage
00001Er 2  00           joy1					: .byte 0
00001Fr 2  00           joy2					: .byte 0
000020r 2  00           joy1_prev				: .byte 0
000021r 2  00           joy2_prev				: .byte 0
000022r 2  00           joy1_pushstart			: .byte 0
000023r 2  00           joy2_pushstart			: .byte 0
000024r 2               
000024r 2               
000024r 2               ;*------------------------------------------------------------------------------
000024r 2               ; Get Joypad data (including prev and newly pushed btn)
000024r 2               ; @PARAMS		None
000024r 2               ; @CLOBBERS		A
000024r 2               ; @RETURNS		None
000024r 2               ;*------------------------------------------------------------------------------
000024r 2               
000024r 2               .code									; ----- code -----
000162r 2               
000162r 2               .proc _getJoyData
000162r 2               		; set prev
000162r 2  A5 rr        		lda Joypad::joy1
000164r 2  85 rr        		sta Joypad::joy1_prev
000166r 2  A5 rr        		lda Joypad::joy2
000168r 2  85 rr        		sta Joypad::joy2_prev
00016Ar 2               
00016Ar 2  20 rr rr     		jsr Joypad::_readJoy
00016Dr 2               
00016Dr 2  A5 rr        		lda Joypad::joy1
00016Fr 2  29 0A        		and #Joypad::BTN_U|Joypad::BTN_L				; Compare Up and Left...
000171r 2  4A           		lsr
000172r 2  25 rr        		and Joypad::joy1						; to Down and Right
000174r 2  F0 0A        		beq @GET_PUSHSTART_BTN
000176r 2               		; Use previous frame's directions
000176r 2  A5 rr        		lda Joypad::joy1
000178r 2  45 rr        		eor Joypad::joy1_prev
00017Ar 2  29 F0        		and #%11110000
00017Cr 2  45 rr        		eor Joypad::joy1_prev
00017Er 2  85 rr        		sta Joypad::joy1
000180r 2               
000180r 2               @GET_PUSHSTART_BTN:
000180r 2               		; set pushstart
000180r 2  A5 rr        		lda Joypad::joy1_prev
000182r 2  49 FF        		eor #%11111111
000184r 2  25 rr        		and Joypad::joy1
000186r 2  85 rr        		sta Joypad::joy1_pushstart
000188r 2  A5 rr        		lda Joypad::joy2_prev
00018Ar 2  49 FF        		eor #%11111111
00018Cr 2  25 rr        		and Joypad::joy2
00018Er 2  85 rr        		sta Joypad::joy2_pushstart
000190r 2               
000190r 2  60           		rts
000191r 2               		; ------------------------------
000191r 2               .endproc
000191r 2               
000191r 2               
000191r 2               ;*------------------------------------------------------------------------------
000191r 2               ; Read controller
000191r 2               ; @PARAMS		None
000191r 2               ; @CLOBBERS		A
000191r 2               ; @RETURNS		None
000191r 2               ;*------------------------------------------------------------------------------
000191r 2               
000191r 2               .code									; ----- code -----
000191r 2               
000191r 2               .proc _readJoy
000191r 2               		; Init controller & Set a ring counter
000191r 2  A9 01        		lda #1
000193r 2  8D 16 40     		sta JOYPAD1
000196r 2  85 rr        		sta Joypad::joy2						; ring counter
000198r 2  4A           		lsr								; A = 0
000199r 2  8D 16 40     		sta JOYPAD1
00019Cr 2               
00019Cr 2               @READ_JOY_LOOP:
00019Cr 2  AD 16 40     		lda JOYPAD1
00019Fr 2  29 03        		and #%00000011
0001A1r 2  C9 01        		cmp #$01						; A - 1 = A + 0xff; if A > 0 then Carry=1
0001A3r 2  26 rr        		rol Joypad::joy1						; Carry -> Bit0; Bit7 -> Carry
0001A5r 2  AD 17 40     		lda JOYPAD2
0001A8r 2  29 03        		and #%00000011
0001AAr 2  C9 01        		cmp #$01
0001ACr 2  26 rr        		rol Joypad::joy2
0001AEr 2  90 EC        		bcc @READ_JOY_LOOP				; CarryON -> end
0001B0r 2  60           		rts
0001B1r 2               		; ------------------------------
0001B1r 2               .endproc
0001B1r 2               
0001B1r 2               
0001B1r 2               .endscope
0001B1r 2               
0001B1r 1               .include "./asm/macro.asm"
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               ; Load array
0001B1r 2               ; A = Arr[X][Y]
0001B1r 2               ; @PARAMS		ADDR: Array Address
0001B1r 2               ; @PARAMS		X Y: index (Access Arr[x][y])
0001B1r 2               ; @CLOBBERS		tmp6 addr_tmp1
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro ldarr addr
0001B1r 2               		.if !(.blank(addr))
0001B1r 2               			sty tmp6						; save Y
0001B1r 2               			txa
0001B1r 2               			asl								; ×2（アドレスが16bitなのでARR[x][y]のxが+1 => 読み込むアドレスは+2する必要がある
0001B1r 2               			tay								; アドレッシングに使うためYレジスタへ
0001B1r 2               			lda addr, y						; Low
0001B1r 2               			sta addr_tmp1+0
0001B1r 2               			lda addr+1, y					; High
0001B1r 2               			sta addr_tmp1+1
0001B1r 2               			ldy tmp6						; restore Y
0001B1r 2               			lda (addr_tmp1), y
0001B1r 2               		.else
0001B1r 2               			.error "Arg addr in macro ldarr is wrong."
0001B1r 2               		.endif
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               ; Calculate Negative Numbers
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro cnn
0001B1r 2               		eor #$ff
0001B1r 2               		add #$01
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               ; Addition
0001B1r 2               ; This Macro only supports Immediate/Zeropage/Absolute addressing.
0001B1r 2               ; Other addressing modes are not optimized for speed.
0001B1r 2               ; Other addressing usage: add a, {$00, x} / add a, {($00), y}
0001B1r 2               ; @PARAMS		arg1: register or Address
0001B1r 2               ; @PARAMS		arg2
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro add arg1, arg2
0001B1r 2               		.if (.paramcount = 1)
0001B1r 2               			; arg1: val
0001B1r 2               			; add #3 / add $80
0001B1r 2               			clc
0001B1r 2               			adc arg1
0001B1r 2               		.elseif (.paramcount = 2)
0001B1r 2               			; arg1: target
0001B1r 2               			; arg2: val
0001B1r 2               			.if (.match({arg1}, a))
0001B1r 2               				; add a, #3 / add a, $80
0001B1r 2               				clc
0001B1r 2               				adc arg2
0001B1r 2               			.elseif (.match({arg1}, x))
0001B1r 2               				; add x, ??
0001B1r 2               				.if (\
0001B1r 2               					.match(.left(1, {arg2}), #) &&\
0001B1r 2               					.right(.tcount({arg2})-1, {arg2}) <= 7\
0001B1r 2               				)
0001B1r 2               					; add x, #0~7
0001B1r 2               					.repeat (.right(.tcount({arg2})-1, {arg2}))
0001B1r 2               						inx
0001B1r 2               					.endrepeat
0001B1r 2               				.else
0001B1r 2               					pha
0001B1r 2               					txa
0001B1r 2               					clc
0001B1r 2               					adc arg2
0001B1r 2               					tax
0001B1r 2               					pla
0001B1r 2               				.endif
0001B1r 2               			.elseif (.match({arg1}, y))
0001B1r 2               				; add y, ??
0001B1r 2               				.if (\
0001B1r 2               					.match(.left(1, {arg2}), #) &&\
0001B1r 2               					.right(.tcount({arg2})-1, {arg2}) <= 7\
0001B1r 2               				)
0001B1r 2               					; add y, #0~7
0001B1r 2               					.repeat (.right(.tcount ({arg2})-1, {arg2}))
0001B1r 2               						iny
0001B1r 2               					.endrepeat
0001B1r 2               				.else
0001B1r 2               					pha
0001B1r 2               					tya
0001B1r 2               					clc
0001B1r 2               					adc arg2
0001B1r 2               					tay
0001B1r 2               					pla
0001B1r 2               				.endif
0001B1r 2               			.endif
0001B1r 2               		.else
0001B1r 2               			.error "Args in macro add are wrong."
0001B1r 2               		.endif
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               ; Subtraction
0001B1r 2               ; See macro add for comments
0001B1r 2               ; @PARAMS		arg1: register or Address
0001B1r 2               ; @PARAMS		arg2
0001B1r 2               ; ------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro sub arg1, arg2
0001B1r 2               		.if (.paramcount = 1)
0001B1r 2               			sec
0001B1r 2               			sbc arg1
0001B1r 2               		.elseif (.paramcount = 2 && .match({arg1}, a))
0001B1r 2               			sec
0001B1r 2               			sbc arg2
0001B1r 2               		.elseif (.paramcount = 2 && .match({arg1}, x))
0001B1r 2               			.if (\
0001B1r 2               				.match(.left(1, {arg2}), #) &&\
0001B1r 2               				.right(.tcount({arg2})-1, {arg2}) <= 7\
0001B1r 2               			)
0001B1r 2               				.repeat (.right(.tcount({arg2})-1, {arg2}))
0001B1r 2               					dex
0001B1r 2               				.endrepeat
0001B1r 2               			.else
0001B1r 2               				pha
0001B1r 2               				txa
0001B1r 2               				sec
0001B1r 2               				sbc arg2
0001B1r 2               				tax
0001B1r 2               				pla
0001B1r 2               			.endif
0001B1r 2               		.elseif (.paramcount = 2 && .match({arg1}, y))
0001B1r 2               			.if (\
0001B1r 2               				.match(.left(1, {arg2}), #) &&\
0001B1r 2               				.right(.tcount({arg2})-1, {arg2}) <= 7\
0001B1r 2               			)
0001B1r 2               				.repeat (.right(.tcount ({arg2})-1, {arg2}))
0001B1r 2               					dey
0001B1r 2               				.endrepeat
0001B1r 2               			.else
0001B1r 2               				pha
0001B1r 2               				tya
0001B1r 2               				sec
0001B1r 2               				sbc arg2
0001B1r 2               				tay
0001B1r 2               				pla
0001B1r 2               			.endif
0001B1r 2               		.else
0001B1r 2               			.error "Args in macro sub are wrong."
0001B1r 2               		.endif
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               ; Light shift
0001B1r 2               ; arg1 <<= c
0001B1r 2               ; @PARAMS		c: default=#1
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro shl c
0001B1r 2               		.if (.blank(c))
0001B1r 2               			asl
0001B1r 2               		.elseif (.match(.left(1, {c}), #))
0001B1r 2               			.repeat	(.right(.tcount ({c})-1, {c}))
0001B1r 2               				asl
0001B1r 2               			.endrepeat
0001B1r 2               		.else
0001B1r 2               			.error "Arg \"c\" in macro shl is wrong."
0001B1r 2               		.endif
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               ; Right shift
0001B1r 2               ; arg1 >>= c
0001B1r 2               ; @PARAMS		c: default=#1
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro shr c
0001B1r 2               		.if (.blank(c))
0001B1r 2               			lsr
0001B1r 2               		.elseif (.match(.left(1, {c}), #))
0001B1r 2               			.repeat	(.right(.tcount ({c})-1, {c}))
0001B1r 2               				lsr
0001B1r 2               			.endrepeat
0001B1r 2               		.else
0001B1r 2               			.error "Arg \"c\" in macro shr is wrong."
0001B1r 2               		.endif
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               ; Arithmetic left shift
0001B1r 2               ;! Deprecated (Not shortened)
0001B1r 2               ; A >>= c
0001B1r 2               ; @PARAMS		c: default=1
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro ashl c
0001B1r 2               		cmp #%1000_0000
0001B1r 2               		php								; Save carry
0001B1r 2               		.if (.blank(c))
0001B1r 2               			; ashl
0001B1r 2               			shl #2
0001B1r 2               		.elseif (.match(.left(1, {c}), #))
0001B1r 2               			; ashl #4
0001B1r 2               			shl #((.right(.tcount ({c})-1, {c})) + 1)
0001B1r 2               		.else
0001B1r 2               			.error "Arg \"c\" in macro ashl is wrong."
0001B1r 2               		.endif
0001B1r 2               		plp
0001B1r 2               		ror								; a /= 2, carry into bit7
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               ; Arithmetic right shift
0001B1r 2               ; A >>= c
0001B1r 2               ; @PARAMS		c: default=1
0001B1r 2               ;
0001B1r 2               ; To ASR a memory location
0001B1r 2               ; (From http://wiki.nesdev.com/w/index.php/Synthetic_instructions#Arithmetic_shift_right)
0001B1r 2               ; 	lda addr		; Copy memory into A
0001B1r 2               ; 	asl				; Copy sign bit of A into carry (shorter than CMP)
0001B1r 2               ; 	ror addr
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .macro ashr c
0001B1r 2               		.if (.blank(c))
0001B1r 2               			; ashr
0001B1r 2               			cmp #%1000_0000				; Bit7 into carry
0001B1r 2               			ror							; Shift carry into Bit7
0001B1r 2               		.elseif (.match(.left(1, {c}), #))
0001B1r 2               			; ashr #4
0001B1r 2               			.repeat (.right(.tcount ({c})-1, {c}))
0001B1r 2               				cmp #%1000_0000
0001B1r 2               				ror
0001B1r 2               			.endrepeat
0001B1r 2               		.else
0001B1r 2               			.error "Arg \"c\" in macro ashr is wrong."
0001B1r 2               		.endif
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 2               
0001B1r 2               
0001B1r 2               .macro tfrPlt
0001B1r 2               		; Transfar pallete
0001B1r 2               		lda #>PLT_TABLE_ADDR
0001B1r 2               		sta PPU_ADDR
0001B1r 2               		lda #<PLT_TABLE_ADDR			; Addr lo = 0
0001B1r 2               		sta PPU_ADDR
0001B1r 2               		tax								; X = 0
0001B1r 2               :
0001B1r 2               		ldy #3
0001B1r 2               		lda #$22						; under ground -> #$0f
0001B1r 2               		sta PPU_DATA
0001B1r 2               :
0001B1r 2               		lda DEFAULT_PLT, x				; under ground -> UNDER_GROUND_PLT
0001B1r 2               		sta PPU_DATA
0001B1r 2               		inx
0001B1r 2               		dey
0001B1r 2               		bne :-
0001B1r 2               		cpx #$3*8
0001B1r 2               		bcc :--
0001B1r 2               
0001B1r 2               		lda #$23
0001B1r 2               		sta PPU_ADDR
0001B1r 2               		lda #$c0
0001B1r 2               		sta PPU_ADDR
0001B1r 2               		lda #$ff
0001B1r 2               		sta PPU_DATA
0001B1r 2               		sta PPU_DATA
0001B1r 2               		sta PPU_DATA
0001B1r 2               		sta PPU_DATA
0001B1r 2               		sta PPU_DATA
0001B1r 2               		sta PPU_DATA
0001B1r 2               		sta PPU_DATA
0001B1r 2               		sta PPU_DATA
0001B1r 2               .endmacro
0001B1r 2               
0001B1r 1               .include "./asm/subfunc.asm"			; インクルードが必要ないような，深い階層で使われる関数群
0001B1r 2               .scope Subfunc
0001B1r 2               
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               ; Restore PPU setting
0001B1r 2               ; @PARAMS		None
0001B1r 2               ; @CLOBBERS		A
0001B1r 2               ; @RETURNS		None
0001B1r 2               ;*------------------------------------------------------------------------------
0001B1r 2               
0001B1r 2               .code									; ----- code -----
0001B1r 2               
0001B1r 2               .proc _restorePPUSet
0001B1r 2  A5 rr        		lda ppu_ctrl1_cpy
0001B3r 2  8D 00 20     		sta PPU_CTRL1
0001B6r 2  A5 rr        		lda ppu_ctrl2_cpy
0001B8r 2  8D 01 20     		sta PPU_CTRL2
0001BBr 2  60           		rts
0001BCr 2               		; ------------------------------
0001BCr 2               .endproc
0001BCr 2               
0001BCr 2               
0001BCr 2               
0001BCr 2               ;*------------------------------------------------------------------------------
0001BCr 2               ; Set scroll position & change disp
0001BCr 2               ; Use during NMI or executing raster scroll.
0001BCr 2               ; @PARAMS		None
0001BCr 2               ; @CLOBBERS		A
0001BCr 2               ; @RETURNS		None
0001BCr 2               ;*------------------------------------------------------------------------------
0001BCr 2               
0001BCr 2               .code									; ----- code -----
0001BCr 2               
0001BCr 2               .proc _setScroll
0001BCr 2               		; lda is_scroll_locked
0001BCr 2               		; bne @EXIT
0001BCr 2               
0001BCr 2  A5 rr        		lda scroll_x
0001BEr 2  8D 05 20     		sta PPU_SCROLL
0001C1r 2  A9 00        		lda #0
0001C3r 2  8D 05 20     		sta PPU_SCROLL
0001C6r 2               
0001C6r 2  A5 rr        		lda ppu_ctrl1_cpy
0001C8r 2  29 FE        		and #%1111_1110
0001CAr 2  05 rr        		ora main_disp
0001CCr 2  85 rr        		sta ppu_ctrl1_cpy
0001CEr 2  8D 00 20     		sta PPU_CTRL1
0001D1r 2               
0001D1r 2               @EXIT:
0001D1r 2  60           		rts
0001D2r 2               		; ------------------------------
0001D2r 2               .endproc
0001D2r 2               
0001D2r 2               
0001D2r 2               ;*------------------------------------------------------------------------------
0001D2r 2               ; Wait starting vblank
0001D2r 2               ; @PARAMS		None
0001D2r 2               ; @CLOBBERS		None
0001D2r 2               ; @RETURNS		None
0001D2r 2               ;*------------------------------------------------------------------------------
0001D2r 2               
0001D2r 2               .code									; ----- code -----
0001D2r 2               
0001D2r 2               .proc _waitVblank
0001D2r 2  2C 02 20     		bit $2002
0001D5r 2  10 FB        		bpl _waitVblank
0001D7r 2  60           		rts
0001D8r 2               		; ------------------------------
0001D8r 2               .endproc
0001D8r 2               
0001D8r 2               
0001D8r 2               ;*------------------------------------------------------------------------------
0001D8r 2               ; Disp status text
0001D8r 2               ; @PARAMS		None
0001D8r 2               ; @CLOBBERS		A X Y
0001D8r 2               ; @RETURNS		None
0001D8r 2               ;*------------------------------------------------------------------------------
0001D8r 2               
0001D8r 2               .code									; ----- code -----
0001D8r 2               
0001D8r 2               .proc _dispStatus
0001D8r 2  A6 rr        		ldx bg_buff_pointer
0001DAr 2  A0 1F        		ldy #(@TEXT_END - @TEXT)
0001DCr 2               @STORE_PPU_DATA_LOOP:
0001DCr 2  BD rr rr     		lda @TEXT, x
0001DFr 2  F0 07        		beq @END_STORE
0001E1r 2  9D 49 01     		sta bg_buff, x
0001E4r 2  E8           		inx
0001E5r 2  88           		dey
0001E6r 2  D0 F4        		bne @STORE_PPU_DATA_LOOP
0001E8r 2               @END_STORE:
0001E8r 2  86 rr        		stx bg_buff_pointer
0001EAr 2  60           		rts
0001EBr 2               		; ------------------------------
0001EBr 2               
0001EBr 2               .rodata									; ----- data -----
000000r 2               @TEXT:
000000r 2  FE 20 22     		.byte PPU_VERTICAL_MODE
000003r 2               		ADDR_BG_BE 2, 1, 0
000003r 2  53 43 4F 52  		.byte "SCORE XXXXXX  C:YY  TIME ZZZ"
000007r 2  45 20 58 58  
00000Br 2  58 58 58 58  
00001Fr 2               @TEXT_END:
00001Fr 2               
00001Fr 2               .endproc
00001Fr 2               
00001Fr 2               
00001Fr 2               ;*------------------------------------------------------------------------------
00001Fr 2               ; Sleep for one frame
00001Fr 2               ; @PARAMS		None
00001Fr 2               ; @CLOBBERS		A
00001Fr 2               ; @RETURNS		None (A = 1)
00001Fr 2               ;*------------------------------------------------------------------------------
00001Fr 2               
00001Fr 2               .proc _sleepOneFrame
00001Fr 2  A9 00        		lda #0
000021r 2  85 rr        		sta is_processing_main
000023r 2               :
000023r 2  A5 rr        		lda is_processing_main
000025r 2  F0 FC        		beq :-
000027r 2               
000027r 2  60           		rts
000028r 2               		; ------------------------------
000028r 2               .endproc
000028r 2               
000028r 2               
000028r 2               .endscope
000028r 2               
000028r 1               .include "./asm/draw_map.asm"
000028r 2               .include "draw_map_macro.asm"
000028r 3               .code									; ----- code -----
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; Transfar obj data (8*8) to BG map buff($04XX/$05XX)
0001EBr 3               ; @PARAMS		X: Block ID
0001EBr 3               ; @CLOBBERS		A X Y
0001EBr 3               ; @RETURNS		None (Y: 3)
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro trfToBgMapBuf
0001EBr 3               		lda BROCK_ID_ARR+LO, x
0001EBr 3               		sta addr_tmp2+LO
0001EBr 3               		lda BROCK_ID_ARR+HI, x
0001EBr 3               		sta addr_tmp2+HI
0001EBr 3               
0001EBr 3               		ldx bg_map_buff_index
0001EBr 3               
0001EBr 3               		ldy #0
0001EBr 3               		lda (addr_tmp2), y
0001EBr 3               		sta bg_map_buff+0, x
0001EBr 3               
0001EBr 3               		iny
0001EBr 3               		lda (addr_tmp2), y
0001EBr 3               		sta bg_map_buff+($0d*2), x
0001EBr 3               
0001EBr 3               		inx
0001EBr 3               
0001EBr 3               		iny
0001EBr 3               		lda (addr_tmp2), y
0001EBr 3               		sta bg_map_buff+0, x
0001EBr 3               
0001EBr 3               		iny
0001EBr 3               		lda (addr_tmp2), y
0001EBr 3               		sta bg_map_buff+($0d*2), x
0001EBr 3               
0001EBr 3               		inx
0001EBr 3               
0001EBr 3               		stx bg_map_buff_index
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; Increment row_counter
0001EBr 3               ; @PARAMS		None
0001EBr 3               ; @CLOBBERS		Y
0001EBr 3               ; @RETURNS		None (Y: row_counter)
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro incRowCounter
0001EBr 3               		.local @NO_OVF_ROW_CNT
0001EBr 3               
0001EBr 3               		ldy DrawMap::row_counter
0001EBr 3               		iny
0001EBr 3               		cpy #$10
0001EBr 3               		bne @NO_OVF_ROW_CNT
0001EBr 3               
0001EBr 3               		ldy #0
0001EBr 3               		inc DrawMap::map_buff_num
0001EBr 3               @NO_OVF_ROW_CNT:
0001EBr 3               		sty DrawMap::row_counter
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; index = 0xff
0001EBr 3               ; @PARAMS		None
0001EBr 3               ; @CLOBBERS		Y
0001EBr 3               ; @RETURNS		None (Y: 0xff)
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro initIndex
0001EBr 3               		ldy #NEGATIVE 1
0001EBr 3               		sty DrawMap::index
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; Fill blocks (store to bg buff)
0001EBr 3               ; @PARAMS		None
0001EBr 3               ; @CLOBBERS		A X Y
0001EBr 3               ; @RETURNS		None (A = X)
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro fillBlocks
0001EBr 3               		.local @LOOP
0001EBr 3               
0001EBr 3               		lda addr_tmp2+LO
0001EBr 3               		and #BYT_GET_LO
0001EBr 3               		sta addr_tmp2+LO
0001EBr 3               
0001EBr 3               		ldx #0
0001EBr 3               		ldy #0
0001EBr 3               @LOOP:
0001EBr 3               		lda fill_block_arr, y
0001EBr 3               		sta (addr_tmp2, x)
0001EBr 3               
0001EBr 3               		lda addr_tmp2+LO
0001EBr 3               		add #$10
0001EBr 3               		sta addr_tmp2+LO
0001EBr 3               
0001EBr 3               		iny
0001EBr 3               		cpy #$d
0001EBr 3               		bne @LOOP
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; fill ground (store to fill buff)
0001EBr 3               ; @PARAMS		None
0001EBr 3               ; @CLOBBERS		A X Y
0001EBr 3               ; @RETURNS		None
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro ramFillGround
0001EBr 3               		.local @FILL_SKY_LOOP1
0001EBr 3               		.local @FILL_SKY_LOOP1_END
0001EBr 3               		.local @FILL_GROUND_LOOP
0001EBr 3               		.local @FILL_GROUND_LOOP_END
0001EBr 3               		.local @FILL_SKY_LOOP2
0001EBr 3               		.local @END_FILL_GROUND
0001EBr 3               
0001EBr 3               		ldy #0
0001EBr 3               
0001EBr 3               		lda (DrawMap::map_addr), y
0001EBr 3               		and #BYT_GET_LO
0001EBr 3               		sta DrawMap::fill_ground_end
0001EBr 3               
0001EBr 3               		lda (DrawMap::map_addr), y
0001EBr 3               		shr #4
0001EBr 3               		sta DrawMap::fill_ground_start
0001EBr 3               
0001EBr 3               
0001EBr 3               		lda #0
0001EBr 3               		tax
0001EBr 3               @FILL_SKY_LOOP1:
0001EBr 3               		cpx DrawMap::fill_ground_start
0001EBr 3               		bcs @FILL_SKY_LOOP1_END
0001EBr 3               		sta fill_block_arr, x
0001EBr 3               		inx
0001EBr 3               		cpx #$d
0001EBr 3               		bcc @FILL_SKY_LOOP1
0001EBr 3               		bcs @END_FILL_GROUND
0001EBr 3               @FILL_SKY_LOOP1_END:
0001EBr 3               
0001EBr 3               		lda DrawMap::fill_ground_block
0001EBr 3               @FILL_GROUND_LOOP:
0001EBr 3               		cpx DrawMap::fill_ground_end
0001EBr 3               		bcs @FILL_GROUND_LOOP_END
0001EBr 3               		sta fill_block_arr, x
0001EBr 3               		inx
0001EBr 3               		cpx #$d
0001EBr 3               		bcc @FILL_GROUND_LOOP
0001EBr 3               		bcs @END_FILL_GROUND
0001EBr 3               @FILL_GROUND_LOOP_END:
0001EBr 3               
0001EBr 3               		lda #0
0001EBr 3               @FILL_SKY_LOOP2:
0001EBr 3               		sta fill_block_arr, x
0001EBr 3               		inx
0001EBr 3               		cpx #$d
0001EBr 3               		bcc @FILL_SKY_LOOP2
0001EBr 3               
0001EBr 3               @END_FILL_GROUND:
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; fill blocks (store to fill buff)
0001EBr 3               ; @PARAMS		None
0001EBr 3               ; @CLOBBERS		A X Y
0001EBr 3               ; @RETURNS		None
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro ramFillBlocks
0001EBr 3               		.local @FILL_BLOCK_LOOP_UPPER
0001EBr 3               		.local @NO_BLOCK1
0001EBr 3               		.local @FILL_BLOCK_LOOP_LOWER
0001EBr 3               		.local @NO_BLOCK2
0001EBr 3               
0001EBr 3               		ldy #1
0001EBr 3               		lda (DrawMap::map_addr), y		; ブロック種類
0001EBr 3               		sta DrawMap::fill_block
0001EBr 3               
0001EBr 3               
0001EBr 3               		iny
0001EBr 3               		lda (DrawMap::map_addr), y		; 上位
0001EBr 3               		shl #3							; 上位3ビット削除
0001EBr 3               
0001EBr 3               		ldx #0
0001EBr 3               @FILL_BLOCK_LOOP_UPPER:
0001EBr 3               		shl #1
0001EBr 3               		bcc @NO_BLOCK1
0001EBr 3               
0001EBr 3               		pha
0001EBr 3               		lda DrawMap::fill_block
0001EBr 3               		sta fill_block_arr, x
0001EBr 3               		pla
0001EBr 3               
0001EBr 3               @NO_BLOCK1:
0001EBr 3               		inx
0001EBr 3               		cpx #$5
0001EBr 3               		bcc @FILL_BLOCK_LOOP_UPPER
0001EBr 3               
0001EBr 3               
0001EBr 3               		iny
0001EBr 3               		lda (DrawMap::map_addr), y		; 下位
0001EBr 3               @FILL_BLOCK_LOOP_LOWER:
0001EBr 3               		shl #1
0001EBr 3               		bcc @NO_BLOCK2
0001EBr 3               
0001EBr 3               		pha
0001EBr 3               		lda DrawMap::fill_block
0001EBr 3               		sta fill_block_arr, x
0001EBr 3               		pla
0001EBr 3               
0001EBr 3               @NO_BLOCK2:
0001EBr 3               		inx
0001EBr 3               		cpx #$d
0001EBr 3               		bcc @FILL_BLOCK_LOOP_LOWER
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; Load next map
0001EBr 3               ; @PARAMS		None
0001EBr 3               ; @CLOBBERS		Y
0001EBr 3               ; @RETURNS		None
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro loadNextMap
0001EBr 3               		inc DrawMap::map_arr_num
0001EBr 3               		ldy DrawMap::map_arr_num		; Y = ++map_arr_num
0001EBr 3               		jsr _setMapAddr
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 3               
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               ; set BG addr (PPU)
0001EBr 3               ; @PARAMS		None
0001EBr 3               ; @CLOBBERS		A
0001EBr 3               ; @RETURNS		None
0001EBr 3               ;*------------------------------------------------------------------------------
0001EBr 3               
0001EBr 3               .macro setPpuBgAddr
0001EBr 3               		lda #0
0001EBr 3               		sta tmp1						; Start using tmp1
0001EBr 3               
0001EBr 3               		lda addr_tmp1+LO
0001EBr 3               		add #$40
0001EBr 3               		shl #1
0001EBr 3               		rol tmp1
0001EBr 3               		sta ppu_bg_addr+LO
0001EBr 3               
0001EBr 3               		lda addr_tmp1+HI				; 4 or 5
0001EBr 3               		and #BIT0
0001EBr 3               		shl #2							; 0 or 4
0001EBr 3               		ora #$20						; $20 or $24
0001EBr 3               		ora tmp1						; End using tmp1
0001EBr 3               		sta ppu_bg_addr+HI
0001EBr 3               .endmacro
0001EBr 3               
0001EBr 2               
0001EBr 2               .scope DrawMap
0001EBr 2               
0001EBr 2               .ZeroPage
000024r 2  00           map_buff_num			: .byte 0
000025r 2  00 00        map_arr_addr			: .addr 0
000027r 2  00 00        map_addr				: .addr 0		; Map obj/position data (-> data addr: ROM)
000029r 2  00           isend_draw_stage		: .byte 0
00002Ar 2  00           row_counter				: .byte 0		; Every time this prg executed -> increment
00002Br 2  00           index					: .byte 0		; index of map_addr
00002Cr 2  00           cnt_map_next			: .byte 0		; data (read from map_addr) = SP code(go next map) -> increment this counter
00002Dr 2  00           map_arr_num				: .byte 0
00002Er 2  00           fill_upper				: .byte 0
00002Fr 2  00           fill_lower				: .byte 0
000030r 2  00           fill_ground_block		: .byte 0
000031r 2  00           fill_block				: .byte 0
000032r 2  00           fill_ground_end			: .byte 0
000033r 2  00           fill_ground_start		: .byte 0
000034r 2               
000034r 2               
000034r 2               ;*------------------------------------------------------------------------------
000034r 2               ; Update one row
000034r 2               ; @PARAMS		None
000034r 2               ; @CLOBBERS		A X Y tmp1 tmp2 addr_tmp1 addr_tmp2
000034r 2               ; @RETURNS		None
000034r 2               /* main label
000034r 2               	@START:
000034r 2               	@GET_POS_AND_OBJ_LOOP:
000034r 2               	@END_OF_MAP:						-> goto nextlabel (@LOAD_NEXT_MAP)
000034r 2               	@LOAD_NEXT_MAP:						-> goto @GET_POS_AND_OBJ_LOOP
000034r 2               	@END_OF_STAGE:						-> goto nextlabel (@PREPARE_BG_MAP_BUF)
000034r 2               	@PREPARE_BG_MAP_BUF:
000034r 2               	@STORE_BG_MAP_BUF_LOOP:
000034r 2               */
000034r 2               ;*------------------------------------------------------------------------------
000034r 2               
000034r 2               .code									; ----- code -----
0001EBr 2               
0001EBr 2               .proc _updateOneLine
0001EBr 2  A5 rr        		lda DrawMap::isend_draw_stage
0001EDr 2  F0 01        		beq @START
0001EFr 2  60           		rts
0001F0r 2               		; ------------------------------
0001F0r 2               
0001F0r 2               @START:
0001F0r 2  A9 01        		lda #1
0001F2r 2  85 rr        		sta is_updated_map
0001F4r 2               
0001F4r 2  A4 rr C8 C0  		incRowCounter
0001F8r 2  10 D0 04 A0  
0001FCr 2  00 E6 rr 84  
000201r 2               
000201r 2  A5 rr        		lda DrawMap::map_buff_num
000203r 2  29 01        		and #BIT0
000205r 2  09 04        		ora #4
000207r 2  85 rr        		sta addr_tmp2+HI
000209r 2               
000209r 2  A5 rr        		lda DrawMap::row_counter
00020Br 2  85 rr        		sta addr_tmp2+LO
00020Dr 2               
00020Dr 2  A5 rr 29 0F  		fillBlocks
000211r 2  85 rr A2 00  
000215r 2  A0 00 B9 3C  
000228r 2               
000228r 2  A4 rr        		ldy DrawMap::index
00022Ar 2               @GET_POS_AND_OBJ_LOOP:
00022Ar 2               		; ----------- get pos ----------
00022Ar 2  B1 rr        		lda (DrawMap::map_addr), y
00022Cr 2  85 rr        		sta tmp1
00022Er 2               
00022Er 2               		; Check Special Code
00022Er 2  C9 FE        		cmp #OBJMAP_NEXT
000230r 2  F0 38        		beq @LOAD_NEXT_MAP
000232r 2               
000232r 2  C9 FF        		cmp #OBJMAP_END
000234r 2  F0 25        		beq @END_OF_MAP
000236r 2               
000236r 2               		; Check if it can be updated
000236r 2  29 0F        		and #BYT_GET_LO
000238r 2  C5 rr        		cmp DrawMap::row_counter
00023Ar 2  D0 1A        		bne @GET_POS_AND_OBJ_LOOP_EXIT
00023Cr 2               
00023Cr 2  A5 rr        		lda DrawMap::map_buff_num
00023Er 2  C5 rr        		cmp DrawMap::cnt_map_next		; Count OBJMAP_NEXT (is not reset until the stage changes)
000240r 2  D0 14        		bne @GET_POS_AND_OBJ_LOOP_EXIT
000242r 2               
000242r 2               		; -- Set addr of bg map buff ---
000242r 2  29 01        		and #BIT0
000244r 2  09 04        		ora #4
000246r 2  85 rr        		sta addr_tmp1+HI
000248r 2               
000248r 2               
000248r 2  A5 rr        		lda tmp1						; End using tmp1
00024Ar 2  85 rr        		sta addr_tmp1+LO
00024Cr 2               
00024Cr 2               		; ----------- get chr ----------
00024Cr 2  C8           		iny
00024Dr 2  A2 00        		ldx #0
00024Fr 2  B1 rr        		lda (DrawMap::map_addr), y
000251r 2  81 rr        		sta (addr_tmp1, x)
000253r 2               
000253r 2  C8           		iny
000254r 2  D0 D4        		bne @GET_POS_AND_OBJ_LOOP		; Jmp
000256r 2               		; ------------------------------
000256r 2               
000256r 2               @GET_POS_AND_OBJ_LOOP_EXIT:
000256r 2  84 rr        		sty DrawMap::index
000258r 2  4C rr rr     		jmp @PREPARE_BG_MAP_BUF
00025Br 2               		; ------------------------------
00025Br 2               
00025Br 2               
00025Br 2               		; End of map data (Not end of stage)
00025Br 2               @END_OF_MAP:
00025Br 2  E6 rr A4 rr  		loadNextMap
00025Fr 2  20 rr rr     
000262r 2               
000262r 2  A5 rr        		lda DrawMap::map_addr+HI
000264r 2  C9 FF        		cmp #ENDCODE					; A = Addr Hi
000266r 2  F0 08        		beq @END_OF_STAGE
000268r 2               
000268r 2  A0 03        		ldy #3							; この後inyされてy(index) = 4に
00026Ar 2               
00026Ar 2               @LOAD_NEXT_MAP:
00026Ar 2  E6 rr        		inc DrawMap::cnt_map_next
00026Cr 2  C8           		iny
00026Dr 2  4C rr rr     		jmp @GET_POS_AND_OBJ_LOOP
000270r 2               		; ------------------------------
000270r 2               
000270r 2               @END_OF_STAGE:
000270r 2  A0 00        		ldy #0
000272r 2  84 rr        		sty DrawMap::index
000274r 2  C8           		iny								; Y = 1
000275r 2  84 rr        		sty DrawMap::isend_draw_stage
000277r 2               
000277r 2               @PREPARE_BG_MAP_BUF:
000277r 2  A5 rr        		lda DrawMap::row_counter
000279r 2  85 rr        		sta addr_tmp1+LO				; PosY = 0
00027Br 2               
00027Br 2  A5 rr        		lda DrawMap::map_buff_num
00027Dr 2  29 01        		and #BIT0
00027Fr 2  09 04        		ora #4
000281r 2  85 rr        		sta addr_tmp1+HI
000283r 2               
000283r 2  A9 00 85 rr  		setPpuBgAddr
000287r 2  A5 rr 18 69  
00028Br 2  40 0A 26 rr  
00029Dr 2               
00029Dr 2               		; Store plt addr(ppu)
00029Dr 2  A5 rr        		lda addr_tmp1+LO				; posX
00029Fr 2  4A           		shr #1
0002A0r 2  18 69 C0     		add #$c0
0002A3r 2  85 rr        		sta plt_addr+LO
0002A5r 2               
0002A5r 2  A5 rr        		lda addr_tmp1+HI
0002A7r 2  29 01        		and #1
0002A9r 2  0A 0A        		shl #2
0002ABr 2  18 69 23     		add #$23
0002AEr 2  85 rr        		sta plt_addr+HI
0002B0r 2               
0002B0r 2  A0 00        		ldy #0
0002B2r 2  84 rr        		sty bg_map_buff_index
0002B4r 2               
0002B4r 2               @STORE_BG_MAP_BUF_LOOP:					; for (y = 0; y < $0d; y++)
0002B4r 2  98           		tya
0002B5r 2  0A 0A 0A 0A  		shl #4
0002B9r 2  A8           		tay
0002BAr 2  B1 rr        		lda (addr_tmp1), y
0002BCr 2               
0002BCr 2               		; prepare plt data -------------
0002BCr 2  84 rr        		sty tmp2						; (save counter) += $10
0002BEr 2  A4 rr        		ldy tmp1						; (save counter) += 1
0002C0r 2  48           		pha								; push
0002C1r 2  29 30        		and #BIT5|BIT4
0002C3r 2  AA           		tax								; X: plt num(bit4-5) : tmp (Start using)
0002C4r 2  A5 rr        		lda DrawMap::row_counter
0002C6r 2  29 01        		and #BIT0
0002C8r 2  85 rr        		sta tmp3
0002CAr 2  98           		tya
0002CBr 2  29 01        		and #BIT0
0002CDr 2  0A           		shl #1
0002CEr 2  05 rr        		ora tmp3
0002D0r 2  85 rr        		sta tmp3
0002D2r 2               
0002D2r 2               		; y /= 2 (Use @PLT0) -> MEMO: 短縮可能
0002D2r 2  98           		tya
0002D3r 2  4A           		shr #1
0002D4r 2  A8           		tay
0002D5r 2               
0002D5r 2  8A           		txa								; End using X (plt num)
0002D6r 2  A6 rr        		ldx tmp3
0002D8r 2               		/*
0002D8r 2               		PLT_DATA = BLOCK3|BLOCK2|BLOCK1|BLOCK0
0002D8r 2               		-------------------------------
0002D8r 2               		| BLOCK0(>>4) | BLOCK1(>>2) |
0002D8r 2               		| BLOCK2(0)   | BLOCK3(<<2) |
0002D8r 2               		-------------------------------
0002D8r 2               		*/
0002D8r 2  F0 09        		beq @BLOCK0
0002DAr 2  CA           		dex
0002DBr 2  F0 0D        		beq @BLOCK1
0002DDr 2  CA           		dex
0002DEr 2  F0 11        		beq @BLOCK2
0002E0r 2  CA           		dex
0002E1r 2  F0 0C        		beq @BLOCK3
0002E3r 2               @BLOCK0:
0002E3r 2  4A 4A 4A 4A  		shr #4
0002E7r 2  4C rr rr     		jmp @STORE_TO_PLT_BUFF
0002EAr 2               		; ------------------------------
0002EAr 2               @BLOCK1:
0002EAr 2  4A 4A        		shr #2
0002ECr 2  4C rr rr     		jmp @ADD_LEFT_BLOCK_PLT
0002EFr 2               		; ------------------------------
0002EFr 2               @BLOCK3:
0002EFr 2  0A 0A        		shl #2
0002F1r 2               @BLOCK2:
0002F1r 2               @ADD_LEFT_BLOCK_PLT:
0002F1r 2  19 34 01     		ora bg_plt_buff, y
0002F4r 2               @STORE_TO_PLT_BUFF:
0002F4r 2  99 34 01     		sta bg_plt_buff, y
0002F7r 2               
0002F7r 2  68           		pla								; pull
0002F8r 2  A4 rr        		ldy tmp2
0002FAr 2               
0002FAr 2  29 3F        		and #BIT5|BIT4|BIT3|BIT2|BIT1|BIT0
0002FCr 2  0A           		shl #1
0002FDr 2               
0002FDr 2  AA           		tax
0002FEr 2  BD rr rr 85  		trfToBgMapBuf
000302r 2  rr BD rr rr  
000306r 2  85 rr A6 rr  
000327r 2               
000327r 2  A4 rr        		ldy tmp1
000329r 2  C8           		iny
00032Ar 2  84 rr        		sty tmp1
00032Cr 2  C0 0D        		cpy #$0d
00032Er 2  90 84        		bcc @STORE_BG_MAP_BUF_LOOP
000330r 2               
000330r 2  60           		rts
000331r 2               		;-------------------------------
000331r 2               .endproc
000331r 2               
000331r 2               ;*------------------------------------------------------------------------------
000331r 2               ; Set addr of stages
000331r 2               ; @PARAMS		Y: stage number
000331r 2               ; @CLOBBERS		A Y
000331r 2               ; @RETURNS		None (A = addr Hi)
000331r 2               ;*------------------------------------------------------------------------------
000331r 2               
000331r 2               .code									; ----- code -----
000331r 2               
000331r 2               .proc _setStageAddr
000331r 2  98           		tya
000332r 2  0A           		shl #1
000333r 2  A8           		tay
000334r 2               
000334r 2  B9 rr rr     		lda STAGE_ARR+LO, y
000337r 2  85 rr        		sta DrawMap::map_arr_addr+LO
000339r 2  B9 rr rr     		lda STAGE_ARR+HI, y
00033Cr 2  85 rr        		sta DrawMap::map_arr_addr+HI
00033Er 2               
00033Er 2  60           		rts
00033Fr 2               		; ------------------------------
00033Fr 2               .endproc
00033Fr 2               
00033Fr 2               
00033Fr 2               ;*------------------------------------------------------------------------------
00033Fr 2               ; Set addr of maps
00033Fr 2               ; @PARAMS		Y: map index
00033Fr 2               ; @CLOBBERS		A Y
00033Fr 2               ; @RETURNS		None
00033Fr 2               ;*------------------------------------------------------------------------------
00033Fr 2               
00033Fr 2               .code									; ----- code -----
00033Fr 2               
00033Fr 2               .proc _setMapAddr
00033Fr 2  98           		tya
000340r 2  0A           		shl #1
000341r 2  A8           		tay
000342r 2  48           		pha								; push y
000343r 2               
000343r 2  B1 rr        		lda (DrawMap::map_arr_addr), y
000345r 2  85 rr        		sta DrawMap::map_addr+LO
000347r 2  C8           		iny
000348r 2  B1 rr        		lda (DrawMap::map_arr_addr), y
00034Ar 2  85 rr        		sta DrawMap::map_addr+HI
00034Cr 2               
00034Cr 2               		; ffコードをこの関数の返値にして，この関数の外でマップ終了を判定しているが
00034Cr 2               		; その前に@NO_EXIT以下の処理を行ってしまい，バグるため，ここで抜ける
00034Cr 2               		; 直接@END_OF_STAGEにジャンプしてもOKなはずだが（マップ終了判定でジャンプするラベル）
00034Cr 2               		; procを使っているため今は無理
00034Cr 2  C9 FF        		cmp #ENDCODE
00034Er 2  D0 05        		bne @NO_EXIT
000350r 2  68           		pla
000351r 2  A8           		tay
000352r 2  A9 FF        		lda #ENDCODE
000354r 2  60           		rts
000355r 2               		; ------------------------------
000355r 2               
000355r 2               @NO_EXIT:
000355r 2  A0 00 B1 rr  		ramFillGround
000359r 2  29 0F 85 rr  
00035Dr 2  B1 rr 4A 4A  
000390r 2  A0 01 B1 rr  		ramFillBlocks
000394r 2  85 rr C8 B1  
000398r 2  rr 0A 0A 0A  
0003BFr 2               
0003BFr 2  A0 04        		ldy #4								; マクロ後inyでもy = 4
0003C1r 2  84 rr        		sty DrawMap::index
0003C3r 2               
0003C3r 2  68           		pla
0003C4r 2  A8           		tay
0003C5r 2               
0003C5r 2  60           		rts
0003C6r 2               		; ------------------------------
0003C6r 2               .endproc
0003C6r 2               
0003C6r 2               
0003C6r 2               ;*------------------------------------------------------------------------------
0003C6r 2               ; Change stage
0003C6r 2               ; @PARAMS		Y: Stage number
0003C6r 2               ; @CLOBBERS		A Y
0003C6r 2               ; @RETURNS		None
0003C6r 2               ;*------------------------------------------------------------------------------
0003C6r 2               
0003C6r 2               .proc _changeStage
0003C6r 2  A9 00        		lda #0
0003C8r 2  85 rr        		sta is_updated_map
0003CAr 2  20 rr rr     		jsr Subfunc::_sleepOneFrame
0003CDr 2               
0003CDr 2               		; Change bg color (black)
0003CDr 2  A9 3F        		lda #$3f
0003CFr 2  8D 06 20     		sta PPU_ADDR
0003D2r 2  A9 00        		lda #$00
0003D4r 2  8D 06 20     		sta PPU_ADDR
0003D7r 2  A9 0F        		lda #$0f
0003D9r 2  8D 07 20     		sta PPU_DATA
0003DCr 2  A9 3F        		lda #$3f
0003DEr 2  8D 06 20     		sta PPU_ADDR
0003E1r 2  A9 00        		lda #$00
0003E3r 2  8D 06 20     		sta PPU_ADDR
0003E6r 2               
0003E6r 2  A9 FF        		lda #$ff
0003E8r 2  85 rr        		sta DrawMap::row_counter
0003EAr 2               
0003EAr 2  A9 00        		lda #0
0003ECr 2  85 rr        		sta DrawMap::index
0003EEr 2  85 rr        		sta main_disp
0003F0r 2  85 rr        		sta DrawMap::cnt_map_next		; count ff
0003F2r 2  85 rr        		sta DrawMap::map_buff_num
0003F4r 2  85 rr        		sta DrawMap::isend_draw_stage
0003F6r 2  85 rr        		sta DrawMap::map_arr_num
0003F8r 2  85 rr        		sta scroll_x
0003FAr 2  85 rr        		sta ppu_ctrl2_cpy
0003FCr 2  8D 01 20     		sta PPU_CTRL2
0003FFr 2               
0003FFr 2  A9 47        		lda #'G'
000401r 2  85 rr        		sta DrawMap::fill_ground_block
000403r 2               
000403r 2  20 rr rr     		jsr DrawMap::_setStageAddr
000406r 2  A0 00        		ldy #0
000408r 2  20 rr rr     		jsr DrawMap::_setMapAddr
00040Br 2               
00040Br 2  A9 18        		lda #$18
00040Dr 2               @DISP_LOOP:
00040Dr 2  48           		pha
00040Er 2  A9 01        		lda #1
000410r 2  85 rr        		sta is_updated_map
000412r 2  20 rr rr     		jsr DrawMap::_updateOneLine
000415r 2  20 rr rr     		jsr Subfunc::_sleepOneFrame
000418r 2  68           		pla
000419r 2  38 E9 01     		sub #1
00041Cr 2  D0 EF        		bne @DISP_LOOP
00041Er 2               
00041Er 2               		; Restore bg color
00041Er 2  A9 3F        		lda #$3f
000420r 2  8D 06 20     		sta PPU_ADDR
000423r 2  A9 00        		lda #$00
000425r 2  8D 06 20     		sta PPU_ADDR
000428r 2  A9 22        		lda #$22
00042Ar 2  8D 07 20     		sta PPU_DATA
00042Dr 2  A9 3F        		lda #$3f
00042Fr 2  8D 06 20     		sta PPU_ADDR
000432r 2  A9 00        		lda #$00
000434r 2  8D 06 20     		sta PPU_ADDR
000437r 2               
000437r 2  20 rr rr     		jsr Subfunc::_setScroll
00043Ar 2               
00043Ar 2  A9 00        		lda #0
00043Cr 2  85 rr        		sta is_updated_map
00043Er 2  20 rr rr     		jsr Subfunc::_sleepOneFrame
000441r 2               
000441r 2  A9 1E        		lda #%00011110
000443r 2  85 rr        		sta ppu_ctrl2_cpy
000445r 2  20 rr rr     		jsr Subfunc::_restorePPUSet		; Display ON
000448r 2               
000448r 2  60           		rts
000449r 2               		; ------------------------------
000449r 2               
000449r 2               .endproc
000449r 2               
000449r 2               
000449r 2               .endscope
000449r 2               
000449r 1               .include "./asm/sprite.asm"
000449r 2               /***************** メモ *****************
000449r 2               
000449r 2               キャラクター情報を，キャラクターごとにまとめる
000449r 2               
000449r 2               例：）クリボー
000449r 2               アニメーションの数：２
000449r 2               タイルインデックス
000449r 2               タイル属性
000449r 2               初期速度
000449r 2               スプライト：
000449r 2               	アニメーション
000449r 2               	ジャンプ（空中）
000449r 2               	やられた時
000449r 2               	→ ファイヤー，スターでやられた時には
000449r 2               	やられた時のスプライト＋向きを反転
000449r 2               
000449r 2               
000449r 2               
000449r 2               今後：
000449r 2               あたり判定大きさ
000449r 2               速度変化（ハンマーブロスなどのアニメーション）: この時地形判定不要？
000449r 2               踏めるか，ファイヤー耐性は？
000449r 2               
000449r 2               
000449r 2               
000449r 2               ***************************************/
000449r 2               
000449r 2               
000449r 2               
000449r 2               CHR_ATTR:
000449r 2  00 00 00 40  		.byte %0000_0000, %0000_0000, %0000_0000, %0100_0000		; standing
00044Dr 2  00 00 00 40  		.byte %0000_0000, %0000_0000, %0000_0000, %0100_0000		; walk1
000451r 2  00 00 00 40  		.byte %0000_0000, %0000_0000, %0000_0000, %0100_0000		; walk2
000455r 2  00 00 00 40  		.byte %0000_0000, %0000_0000, %0000_0000, %0100_0000		; walk3, fall
000459r 2  00 00 00 40  		.byte %0000_0000, %0000_0000, %0000_0000, %0100_0000		; jumping
00045Dr 2               
00045Dr 2               CHR_ID:
00045Dr 2  3A 37 4F 4F  		.byte $3a, $37, $4f, $4f		; standing
000461r 2  32 33 34 35  		.byte $32, $33, $34, $35		; walk1
000465r 2  36 37 38 39  		.byte $36, $37, $38, $39		; walk2
000469r 2  3A 37 3B 3C  		.byte $3a, $37, $3b, $3c		; walk3, falling
00046Dr 2  32 41 42 43  		.byte $32, $41, $42, $43		; jumping
000471r 2               
000471r 2               
000471r 2  00 00 00 40  PLAYER_STANDING_ATTR:		.byte %0000_0000, %0000_0000, %0000_0000, %0100_0000
000475r 2  00 00 00 00  PLAYER_WALK1_ATTR:			.byte %0000_0000, %0000_0000, %0000_0000, %0000_0000
000479r 2  00 00 00 00  PLAYER_WALK2_ATTR:			.byte %0000_0000, %0000_0000, %0000_0000, %0000_0000
00047Dr 2  00 00 00 00  PLAYER_WALK3_FALLING_ATTR:	.byte %0000_0000, %0000_0000, %0000_0000, %0000_0000
000481r 2  00 00 00 00  PLAYER_JUMPING_ATTR:		.byte %0000_0000, %0000_0000, %0000_0000, %0000_0000
000485r 2  00 00 00 00  PLAYER_BRAKING_ATTR:		.byte %0000_0000, %0000_0000, %0000_0000, %0000_0000
000489r 2               
000489r 2  3A 37 4F 4F  PLAYER_STANDING:		.byte $3a, $37, $4f, $4f
00048Dr 2  32 33 34 35  PLAYER_WALK1:			.byte $32, $33, $34, $35
000491r 2  36 37 38 39  PLAYER_WALK2:			.byte $36, $37, $38, $39
000495r 2  3A 37 3B 3C  PLAYER_WALK3_FALLING:	.byte $3a, $37, $3b, $3c
000499r 2  32 41 42 43  PLAYER_JUMPING:			.byte $32, $41, $42, $43
00049Dr 2  3D 3E 3F 40  PLAYER_BRAKING:			.byte $3d, $3e, $3f, $40
0004A1r 2               
0004A1r 2               
0004A1r 2               CHR_ATTR_TABLE:
0004A1r 2  rr rr        		.word PLAYER_STANDING_ATTR
0004A3r 2  rr rr rr rr  		.word PLAYER_WALK1_ATTR, PLAYER_WALK2_ATTR, PLAYER_WALK3_FALLING_ATTR
0004A7r 2  rr rr        
0004A9r 2  rr rr        		.word PLAYER_JUMPING_ATTR
0004ABr 2  rr rr        		.word PLAYER_BRAKING_ATTR
0004ADr 2               
0004ADr 2               CHR_ID_TABLE:
0004ADr 2  rr rr        		.word PLAYER_STANDING
0004AFr 2  rr rr rr rr  		.word PLAYER_WALK1, PLAYER_WALK2, PLAYER_WALK3_FALLING
0004B3r 2  rr rr        
0004B5r 2  rr rr        		.word PLAYER_JUMPING
0004B7r 2  rr rr        		.word PLAYER_BRAKING
0004B9r 2               
0004B9r 2               
0004B9r 2               MAX_SPD_L:
0004B9r 2  E8 D8        		.byte $e8, $d8
0004BBr 2               
0004BBr 2               MAX_SPD_R:
0004BBr 2  18 28        		.byte $18, $28
0004BDr 2               
0004BDr 2               AMOUNT_INC_SPD_L:
0004BDr 2  FF FE FD     		.byte $ff, $fe, $fd
0004C0r 2               
0004C0r 2               AMOUNT_INC_SPD_R:
0004C0r 2  01 02 03     		.byte $01, $02, $03
0004C3r 2               
0004C3r 2               
0004C3r 2               
0004C3r 2               .scope Sprite
0004C3r 2               
0004C3r 2               .code									; ----- code -----
0004C3r 2               
0004C3r 2               ;*------------------------------------------------------------------------------
0004C3r 2               ; Move sprite
0004C3r 2               ; @PARAMS		X: sprite id
0004C3r 2               ; @CLOBBERS		A Y tmp1
0004C3r 2               ; @RETURNS		None
0004C3r 2               ;*------------------------------------------------------------------------------
0004C3r 2               .proc _moveSprite
0004C3r 2  CA           		dex									; sprid=0のときスプライトは無なので，必ず1から始まる→0から始まるように修正
0004C4r 2  BD rr rr     		lda spr_velocity_x_arr, x
0004C7r 2  D0 02        		bne :+
0004C9r 2  85 rr        		sta scroll_amount
0004CBr 2               :
0004CBr 2  18           		clc
0004CCr 2  7D rr rr     		adc spr_posX_arr, x
0004CFr 2  C9 F0        		cmp #$f0
0004D1r 2  90 10        		bcc :+
0004D3r 2  48           		pha
0004D4r 2  BD rr rr     		lda spr_posX_tmp_arr, x
0004D7r 2  38           		sec
0004D8r 2  FD rr rr     		sbc spr_posX_arr, x
0004DBr 2  A8           		tay								; move_dxを求める（移動量）
0004DCr 2  68           		pla
0004DDr 2  C0 80        		cpy #$80
0004DFr 2  90 02        		bcc :+
0004E1r 2               		; posX < 0 && move_dx < 0
0004E1r 2  A9 00        		lda #0
0004E3r 2               :
0004E3r 2               
0004E3r 2               		; スクロールロック時の処理
0004E3r 2  A4 rr        		ldy is_scroll_locked
0004E5r 2  D0 04        		bne @STORE_POSX
0004E7r 2               
0004E7r 2  C9 70        		cmp #PLAYER_MAX_POSX
0004E9r 2  B0 0E        		bcs @MOVE_SCROLL
0004EBr 2               
0004EBr 2               @STORE_POSX:
0004EBr 2  C9 F2        		cmp #($100-(PLAYER_WIDTH+PLAYER_PADDING))
0004EDr 2  90 04        		bcc @STOP_MOVE
0004EFr 2  F0 02        		beq @STOP_MOVE
0004F1r 2               
0004F1r 2  A9 F2        		lda #($100-(PLAYER_WIDTH+PLAYER_PADDING))
0004F3r 2               @STOP_MOVE:
0004F3r 2  9D rr rr     		sta spr_posX_arr, x
0004F6r 2  4C rr rr     		jmp @MOVE_Y
0004F9r 2               		; ------------------------------
0004F9r 2               
0004F9r 2               @MOVE_SCROLL:
0004F9r 2  38 E9 70     		sub #PLAYER_MAX_POSX
0004FCr 2  85 rr        		sta scroll_amount
0004FEr 2               
0004FEr 2  A9 70        		lda #PLAYER_MAX_POSX
000500r 2  9D rr rr     		sta spr_posX_arr, x
000503r 2               
000503r 2               @MOVE_Y:
000503r 2  BD rr rr     		lda spr_posY_tmp_arr, x
000506r 2  9D rr rr     		sta spr_posY_arr, x
000509r 2               
000509r 2  60           		rts
00050Ar 2               		; ------------------------------
00050Ar 2               .endproc
00050Ar 2               
00050Ar 2               
00050Ar 2               ;*------------------------------------------------------------------------------
00050Ar 2               ; 通常の向きでスプライトをバッファ転送する
00050Ar 2               ; @PARAMS		x: sprite id（-1された状態)
00050Ar 2               ; @PARAMS		y: buff index（ストアし始める最初のindex）
00050Ar 2               ; @PARAMS		tmp1: posY
00050Ar 2               ; @PARAMS		tmp2: posX
00050Ar 2               ; @CLOBBERS		A X Y
00050Ar 2               ; @RETURNS		None
00050Ar 2               ;*------------------------------------------------------------------------------
00050Ar 2               .proc _tfrSprToBuffNormal
00050Ar 2               		; Upper left
00050Ar 2  A5 rr        		lda tmp1
00050Cr 2  99 00 03     		sta CHR_BUFF+$0, y
00050Fr 2  99 04 03     		sta CHR_BUFF+$4, y
000512r 2  18 69 08     		add #8
000515r 2  99 08 03     		sta CHR_BUFF+$8, y
000518r 2  99 0C 03     		sta CHR_BUFF+$c, y
00051Br 2               
00051Br 2  A5 rr        		lda tmp2
00051Dr 2  99 03 03     		sta CHR_BUFF+$3, y
000520r 2  99 0B 03     		sta CHR_BUFF+$b, y
000523r 2  18 69 08     		add #8
000526r 2  99 07 03     		sta CHR_BUFF+$7, y
000529r 2  99 0F 03     		sta CHR_BUFF+$f, y
00052Cr 2               
00052Cr 2               
00052Cr 2  84 rr        		sty tmp_rgstY
00052Er 2  BD rr rr     		lda spr_anime_num, x
000531r 2  AA           		tax
000532r 2               
000532r 2  A0 00        		ldy #0
000534r 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
000538r 2  A8 B9 rr rr  
00053Cr 2  85 rr B9 rr  
000547r 2  A4 rr        		ldy tmp_rgstY
000549r 2  99 02 03     		sta CHR_BUFF+$2, y
00054Cr 2  A0 01        		ldy #1
00054Er 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
000552r 2  A8 B9 rr rr  
000556r 2  85 rr B9 rr  
000561r 2  A4 rr        		ldy tmp_rgstY
000563r 2  99 06 03     		sta CHR_BUFF+$6, y
000566r 2  A0 02        		ldy #2
000568r 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
00056Cr 2  A8 B9 rr rr  
000570r 2  85 rr B9 rr  
00057Br 2  A4 rr        		ldy tmp_rgstY
00057Dr 2  99 0A 03     		sta CHR_BUFF+$a, y
000580r 2  A0 03        		ldy #3
000582r 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
000586r 2  A8 B9 rr rr  
00058Ar 2  85 rr B9 rr  
000595r 2  A4 rr        		ldy tmp_rgstY
000597r 2  99 0E 03     		sta CHR_BUFF+$e, y
00059Ar 2               
00059Ar 2  A0 00        		ldy #0
00059Cr 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0005A0r 2  A8 B9 rr rr  
0005A4r 2  85 rr B9 rr  
0005AFr 2  A4 rr        		ldy tmp_rgstY
0005B1r 2  99 01 03     		sta CHR_BUFF+$1, y
0005B4r 2  A0 01        		ldy #1
0005B6r 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0005BAr 2  A8 B9 rr rr  
0005BEr 2  85 rr B9 rr  
0005C9r 2  A4 rr        		ldy tmp_rgstY
0005CBr 2  99 05 03     		sta CHR_BUFF+$5, y
0005CEr 2  A0 02        		ldy #2
0005D0r 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0005D4r 2  A8 B9 rr rr  
0005D8r 2  85 rr B9 rr  
0005E3r 2  A4 rr        		ldy tmp_rgstY
0005E5r 2  99 09 03     		sta CHR_BUFF+$9, y
0005E8r 2  A0 03        		ldy #3
0005EAr 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0005EEr 2  A8 B9 rr rr  
0005F2r 2  85 rr B9 rr  
0005FDr 2  A4 rr        		ldy tmp_rgstY
0005FFr 2  99 0D 03     		sta CHR_BUFF+$d, y
000602r 2               
000602r 2  60           		rts
000603r 2               		; ------------------------------
000603r 2               .endproc
000603r 2               
000603r 2               
000603r 2               ;*------------------------------------------------------------------------------
000603r 2               ; 左右反転してスプライトをバッファ転送する
000603r 2               ; @PARAMS		x: sprite id（-1された状態)
000603r 2               ; @PARAMS		y: buff index（ストアし始める最初のindex）
000603r 2               ; @PARAMS		tmp1: posY
000603r 2               ; @PARAMS		tmp2: posX
000603r 2               ; @CLOBBERS		A X Y
000603r 2               ; @RETURNS		None
000603r 2               ;*------------------------------------------------------------------------------
000603r 2               .proc _tfrSprToBuffFlipX
000603r 2  A5 rr        		lda tmp1
000605r 2  99 00 03     		sta CHR_BUFF+$0, y
000608r 2  99 04 03     		sta CHR_BUFF+$4, y
00060Br 2  18 69 08     		add #8
00060Er 2  99 08 03     		sta CHR_BUFF+$8, y
000611r 2  99 0C 03     		sta CHR_BUFF+$c, y
000614r 2               
000614r 2  A5 rr        		lda tmp2
000616r 2  99 07 03     		sta CHR_BUFF+$7, y
000619r 2  99 0F 03     		sta CHR_BUFF+$f, y
00061Cr 2  18 69 08     		add #8
00061Fr 2  99 03 03     		sta CHR_BUFF+$3, y
000622r 2  99 0B 03     		sta CHR_BUFF+$b, y
000625r 2               
000625r 2  84 rr        		sty tmp_rgstY
000627r 2  BD rr rr     		lda spr_anime_num, x
00062Ar 2  AA           		tax
00062Br 2               
00062Br 2  A0 00        		ldy #0
00062Dr 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
000631r 2  A8 B9 rr rr  
000635r 2  85 rr B9 rr  
000640r 2  49 40        		eor #%0100_0000						; 左右反転
000642r 2  A4 rr        		ldy tmp_rgstY
000644r 2  99 02 03     		sta CHR_BUFF+$2, y
000647r 2  A0 01        		ldy #1
000649r 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
00064Dr 2  A8 B9 rr rr  
000651r 2  85 rr B9 rr  
00065Cr 2  49 40        		eor #%0100_0000
00065Er 2  A4 rr        		ldy tmp_rgstY
000660r 2  99 06 03     		sta CHR_BUFF+$6, y
000663r 2  A0 02        		ldy #2
000665r 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
000669r 2  A8 B9 rr rr  
00066Dr 2  85 rr B9 rr  
000678r 2  49 40        		eor #%0100_0000
00067Ar 2  A4 rr        		ldy tmp_rgstY
00067Cr 2  99 0A 03     		sta CHR_BUFF+$a, y
00067Fr 2  A0 03        		ldy #3
000681r 2  84 rr 8A 0A  		ldarr CHR_ATTR_TABLE
000685r 2  A8 B9 rr rr  
000689r 2  85 rr B9 rr  
000694r 2  49 40        		eor #%0100_0000
000696r 2  A4 rr        		ldy tmp_rgstY
000698r 2  99 0E 03     		sta CHR_BUFF+$e, y
00069Br 2               
00069Br 2  A0 00        		ldy #0
00069Dr 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0006A1r 2  A8 B9 rr rr  
0006A5r 2  85 rr B9 rr  
0006B0r 2  A4 rr        		ldy tmp_rgstY
0006B2r 2  99 01 03     		sta CHR_BUFF+$1, y
0006B5r 2  A0 01        		ldy #1
0006B7r 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0006BBr 2  A8 B9 rr rr  
0006BFr 2  85 rr B9 rr  
0006CAr 2  A4 rr        		ldy tmp_rgstY
0006CCr 2  99 05 03     		sta CHR_BUFF+$5, y
0006CFr 2  A0 02        		ldy #2
0006D1r 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0006D5r 2  A8 B9 rr rr  
0006D9r 2  85 rr B9 rr  
0006E4r 2  A4 rr        		ldy tmp_rgstY
0006E6r 2  99 09 03     		sta CHR_BUFF+$9, y
0006E9r 2  A0 03        		ldy #3
0006EBr 2  84 rr 8A 0A  		ldarr CHR_ID_TABLE
0006EFr 2  A8 B9 rr rr  
0006F3r 2  85 rr B9 rr  
0006FEr 2  A4 rr        		ldy tmp_rgstY
000700r 2  99 0D 03     		sta CHR_BUFF+$d, y
000703r 2               
000703r 2  60           		rts
000704r 2               		; ------------------------------
000704r 2               .endproc
000704r 2               
000704r 2               
000704r 2               ;*------------------------------------------------------------------------------
000704r 2               ; 上下反転してスプライトをバッファ転送する
000704r 2               ; @PARAMS		x: sprite id（-1された状態)
000704r 2               ; @PARAMS		y: buff index（ストアし始める最初のindex）
000704r 2               ; @PARAMS		tmp1: posY
000704r 2               ; @PARAMS		tmp2: posX
000704r 2               ; @CLOBBERS		A X Y
000704r 2               ; @RETURNS		None
000704r 2               ;*------------------------------------------------------------------------------
000704r 2               .proc _tfrSprToBuffFlipY
000704r 2               	; Lower left
000704r 2  A5 rr        	lda tmp1
000706r 2  18 69 08     	add #8
000709r 2  99 00 03     	sta CHR_BUFF+$0, y
00070Cr 2  BD rr rr     	lda CHR_ID, x
00070Fr 2  99 01 03     	sta CHR_BUFF+$1, y
000712r 2  BD rr rr     	lda CHR_ATTR, x
000715r 2  99 02 03     	sta CHR_BUFF+$2, y
000718r 2  A5 rr        	lda tmp2
00071Ar 2  99 03 03     	sta CHR_BUFF+$3, y
00071Dr 2               	; Lower right
00071Dr 2  E8           	inx
00071Er 2  A5 rr        	lda tmp1
000720r 2  18 69 08     	add #8
000723r 2  99 04 03     	sta CHR_BUFF+$4, y
000726r 2  BD rr rr     	lda CHR_ID, x
000729r 2  99 05 03     	sta CHR_BUFF+$5, y
00072Cr 2  BD rr rr     	lda CHR_ATTR, x
00072Fr 2  99 06 03     	sta CHR_BUFF+$6, y
000732r 2  A5 rr        	lda tmp2
000734r 2  18 69 08     	add #8
000737r 2  99 07 03     	sta CHR_BUFF+$7, y
00073Ar 2               	; Upper left
00073Ar 2  E8           	inx
00073Br 2  A5 rr        	lda tmp1
00073Dr 2  99 08 03     	sta CHR_BUFF+$8, y
000740r 2  BD rr rr     	lda CHR_ID, x
000743r 2  99 09 03     	sta CHR_BUFF+$9, y
000746r 2  BD rr rr     	lda CHR_ATTR, x
000749r 2  99 0A 03     	sta CHR_BUFF+$a, y
00074Cr 2  A5 rr        	lda tmp2
00074Er 2  99 0B 03     	sta CHR_BUFF+$b, y
000751r 2               	; Upper right
000751r 2  E8           	inx
000752r 2  A5 rr        	lda tmp1
000754r 2  99 0C 03     	sta CHR_BUFF+$c, y
000757r 2  BD rr rr     	lda CHR_ID, x
00075Ar 2  99 0D 03     	sta CHR_BUFF+$d, y
00075Dr 2  BD rr rr     	lda CHR_ATTR, x
000760r 2  99 0E 03     	sta CHR_BUFF+$e, y
000763r 2  A5 rr        	lda tmp2
000765r 2  18 69 08     	add #8
000768r 2  99 0F 03     	sta CHR_BUFF+$f, y
00076Br 2  60           	rts
00076Cr 2               	; ------------------------------
00076Cr 2               .endproc
00076Cr 2               
00076Cr 2               
00076Cr 2               ;*------------------------------------------------------------------------------
00076Cr 2               ; transfar to chr buff
00076Cr 2               ; @PARAMS		X: sprite id, Y = BUFF index
00076Cr 2               ; @CLOBBERS		A X Y
00076Cr 2               ; @RETURNS		None
00076Cr 2               ;*------------------------------------------------------------------------------
00076Cr 2               .proc _tfrToChrBuff
00076Cr 2  E0 00        		cpx #0								; sprid=0 -> スプライトなし
00076Er 2  F0 20        		beq @EXIT
000770r 2  CA           		dex									; spridを0～に変更
000771r 2               
000771r 2  C8           		iny									; 0スプライトの分空けるため(buff indexを0に設定しても0スプライトを上書きしない)
000772r 2  98           		tya
000773r 2  0A 0A        		shl #2
000775r 2  A8           		tay
000776r 2               
000776r 2  BD rr rr     		lda spr_posY_arr, x
000779r 2  85 rr        		sta tmp1							; posY
00077Br 2  BD rr rr     		lda spr_posX_arr, x
00077Er 2  85 rr        		sta tmp2							; posX
000780r 2               
000780r 2  BD rr rr     		lda spr_attr_arr, x
000783r 2  29 01        		and #BIT0
000785r 2  F0 06        		beq :+
000787r 2  20 rr rr     		jsr _tfrSprToBuffNormal
00078Ar 2  4C rr rr     		jmp @EXIT
00078Dr 2               :
00078Dr 2  20 rr rr     		jsr _tfrSprToBuffFlipX
000790r 2               
000790r 2               @EXIT:
000790r 2  60           		rts
000791r 2               		; ------------------------------
000791r 2               .endproc
000791r 2               
000791r 2               
000791r 2               .endscope
000791r 2               
000791r 1               .include "./asm/player_move.asm"
000791r 2               .scope Player							; スコープ名注意！
000791r 2               
000791r 2               DOWN_SPEED_LIMIT = $04					; 落下の最高速度
000791r 2               VER_FORCE_DECIMAL_PART_DATA:			; 加速度の増加値
000791r 2  20 20 1E 28  		.byte $20, $20, $1e, $28, $28
000795r 2  28           
000796r 2               VER_FALL_FORCE_DATA:					; 降下時の加速度
000796r 2  70 70 60 90  		.byte $70, $70, $60, $90, $90
00079Ar 2  90           
00079Br 2               INITIAL_VER_SPEED_DATA:					; 初速度(v0)
00079Br 2  FC FC FC FB  		.byte $fc, $fc, $fc, $fb, $fb
00079Fr 2  FB           
0007A0r 2               INITIAL_VER_FORCE_DATA:					; 初期加速度(a)
0007A0r 2  00 00 00 00  		.byte $00, $00, $00, $00, $00
0007A4r 2  00           
0007A5r 2               
0007A5r 2               .ZeroPage
000034r 2  00           is_fly: 					.byte 0		; 空中にいるか
000035r 2  00           is_jumping:					.byte 0		; ジャンプ中か
000036r 2  00           posY_origin:				.byte 0		; ジャンプ開始時の位置
000037r 2  00           ver_speed:					.byte 0		; 速度
000038r 2  00           ver_force_decimal_part:		.byte 0		; 現在の加速度
000039r 2  00           ver_force_fall:				.byte 0		; 降下時の加速度
00003Ar 2  00           ver_speed_decimal_part:		.byte 0		; 加速度の増加値
00003Br 2  00           ver_pos_decimal_part:		.byte 0		; 累積計算での補正値
00003Cr 2  00           ver_pos_fix_val:			.byte 0		; 補正値
00003Dr 2  00           mario_block_x:				.byte 0
00003Er 2  00           mario_block_y:				.byte 0
00003Fr 2  00           tmp_x:						.byte 0
000040r 2  00           tmp_y:						.byte 0
000041r 2               
000041r 2               .code
0007A5r 2               
0007A5r 2               ;*------------------------------------------------------------------------------
0007A5r 2               ; player physics
0007A5r 2               ; @PARAMS		None
0007A5r 2               ; @CLOBBERS		A X
0007A5r 2               ; @RETURNS		None
0007A5r 2               ;*------------------------------------------------------------------------------
0007A5r 2               .proc _physicsX
0007A5r 2  A9 00        		lda #0							; 初期化
0007A7r 2  8D rr rr     		sta spr_velocity_x_arr+$0
0007AAr 2               
0007AAr 2  A5 rr        		lda Joypad::joy1
0007ACr 2  29 02        		and #Joypad::BTN_L
0007AEr 2  D0 51        		bne @ACCELERATE_LEFT
0007B0r 2  A5 rr        		lda Joypad::joy1
0007B2r 2  29 01        		and #Joypad::BTN_R
0007B4r 2  F0 03        		beq @DEC_ACCELERATION
0007B6r 2  4C rr rr     		jmp @ACCELERATE_RIGHT
0007B9r 2               
0007B9r 2               @DEC_ACCELERATION:						; 減速
0007B9r 2  AD rr rr     		lda spr_float_velocity_x_arr+$0
0007BCr 2  F0 40        		beq @EXIT1
0007BEr 2  30 1E        		bmi @INC_SPEED
0007C0r 2               
0007C0r 2               		; 右向きに進んでいるときの減速
0007C0r 2  38 E9 01     		sub #1							; 減速
0007C3r 2  8D rr rr     		sta spr_float_velocity_x_arr+$0
0007C6r 2  F0 36        		beq @EXIT1						; 速度0なら終了
0007C8r 2               
0007C8r 2  AA           		tax
0007C9r 2  4A 4A 4A 4A  		shr #4
0007CDr 2  8D rr rr     		sta spr_velocity_x_arr+$0
0007D0r 2               
0007D0r 2  E0 10        		cpx #$10
0007D2r 2  B0 2A        		bcs @EXIT1
0007D4r 2  E0 0A        		cpx #$0A
0007D6r 2  90 26        		bcc @EXIT1
0007D8r 2  EE rr rr     		inc spr_velocity_x_arr+$0
0007DBr 2  4C rr rr     		jmp @EXIT1	; ------------------
0007DEr 2               
0007DEr 2               @INC_SPEED:
0007DEr 2               		; 左向きに進んでいるときの減速
0007DEr 2  18 69 01     		add #1
0007E1r 2  8D rr rr     		sta spr_float_velocity_x_arr+$0
0007E4r 2  F0 18        		beq @EXIT1
0007E6r 2               
0007E6r 2  AA           		tax
0007E7r 2  4A 4A 4A 4A  		shr #4
0007EBr 2  09 F0        		ora #%11110000					; 上位4ビットを埋める（負の数にする）
0007EDr 2  8D rr rr     		sta spr_velocity_x_arr+$0
0007F0r 2               
0007F0r 2  E0 F0        		cpx #$f0
0007F2r 2  90 07        		bcc @EXIT2
0007F4r 2  E0 FA        		cpx #$fA
0007F6r 2  B0 03        		bcs @EXIT2
0007F8r 2  CE rr rr     		dec spr_velocity_x_arr+$0
0007FBr 2               @EXIT2:
0007FBr 2  EE rr rr     		inc spr_velocity_x_arr+$0		; 負の向きは求めた速度+1（小数の速度がfbの時→速度はffではなく0になってほしい）
0007FEr 2               @EXIT1:
0007FEr 2  4C rr rr     		jmp EXIT	; ------------------
000801r 2               
000801r 2               @ACCELERATE_LEFT:						; 左向きに加速度を上昇させる
000801r 2  A2 00        		ldx #0							; AMOUNT_INC_SPD_L[]のindex決定処理
000803r 2  A5 rr        		lda Joypad::joy1
000805r 2  29 40        		and #Joypad::BTN_B
000807r 2  F0 01        		beq :+
000809r 2  E8           		inx
00080Ar 2               :
00080Ar 2  BD rr rr     		lda AMOUNT_INC_SPD_L, x			; 加速度を足す
00080Dr 2  18 6D rr rr  		add spr_float_velocity_x_arr+$0
000811r 2  DD rr rr     		cmp MAX_SPD_L, x
000814r 2  10 05        		bpl :+
000816r 2  E8           		inx
000817r 2  38           		sec
000818r 2  FD rr rr     		sbc AMOUNT_INC_SPD_L, x			; 足した加速度よりも大きな加速度で引く（加速度が負に）
00081Br 2               :
00081Br 2  8D rr rr     		sta spr_float_velocity_x_arr+$0
00081Er 2  85 rr        		sta tmp1
000820r 2  AD rr rr     		lda spr_decimal_part_velocity_x_arr+$0
000823r 2  09 F0        		ora #%1111_0000
000825r 2  18 65 rr     		add tmp1
000828r 2  85 rr        		sta tmp1
00082Ar 2  29 0F        		and #BYT_GET_LO
00082Cr 2  8D rr rr     		sta spr_decimal_part_velocity_x_arr+$0
00082Fr 2  A5 rr        		lda tmp1
000831r 2  C9 00        		cmp #0
000833r 2  10 08        		bpl :+
000835r 2  4A 4A 4A 4A  		shr #4							; 加速度が負のとき（左に進んでて，右に入力がある場合）
000839r 2  09 F0        		ora #%11110000					; 上位4ビットを埋める（負の数にする）
00083Br 2  D0 04        		bne :++
00083Dr 2               :
00083Dr 2  4A 4A 4A 4A  		shr #4							; 加速度が正のとき
000841r 2               :
000841r 2  8D rr rr     		sta spr_velocity_x_arr+$0
000844r 2               		; 向きの更新
000844r 2  F0 14        		beq :++							; 速度が0のとき向きフラグを更新しない（今の向きを継続利用）
000846r 2  30 0A        		bmi :+
000848r 2  A9 01        		lda #%0000_0001					; 速度が正のとき向きフラグを1に
00084Ar 2  0D rr rr     		ora spr_attr_arr+$0
00084Dr 2  8D rr rr     		sta spr_attr_arr+$0
000850r 2  D0 08        		bne :++
000852r 2               :
000852r 2  AD rr rr     		lda spr_attr_arr+$0				; 速度が負のとき向きフラグを0に
000855r 2  29 FE        		and #%1111_1110
000857r 2  8D rr rr     		sta spr_attr_arr+$0
00085Ar 2               :
00085Ar 2               		; 速度調整
00085Ar 2  A5 rr        		lda tmp1
00085Cr 2  E0 F0        		cpx #$f0
00085Er 2  90 07        		bcc :+
000860r 2  E0 FA        		cpx #$fA
000862r 2  B0 03        		bcs :+
000864r 2  CE rr rr     		dec spr_velocity_x_arr+$0		; 速度が遅めのときに進んでいる方向に速度を1足す
000867r 2               :
000867r 2  EE rr rr     		inc spr_velocity_x_arr+$0
00086Ar 2  4C rr rr     		jmp EXIT	; ------------------
00086Dr 2               
00086Dr 2               @ACCELERATE_RIGHT:
00086Dr 2  A2 00        		ldx #0
00086Fr 2  A5 rr        		lda Joypad::joy1
000871r 2  29 40        		and #Joypad::BTN_B
000873r 2  F0 01        		beq :+
000875r 2  E8           		inx
000876r 2               :
000876r 2  BD rr rr     		lda AMOUNT_INC_SPD_R, x
000879r 2  18 6D rr rr  		add spr_float_velocity_x_arr+$0
00087Dr 2  DD rr rr     		cmp MAX_SPD_R, x
000880r 2  30 05        		bmi :+
000882r 2  E8           		inx
000883r 2  38           		sec
000884r 2  FD rr rr     		sbc AMOUNT_INC_SPD_R, x
000887r 2               :
000887r 2  8D rr rr     		sta spr_float_velocity_x_arr+$0
00088Ar 2  18 6D rr rr  		add spr_decimal_part_velocity_x_arr+$0
00088Er 2  85 rr        		sta tmp1
000890r 2  29 0F        		and #BYT_GET_LO
000892r 2  8D rr rr     		sta spr_decimal_part_velocity_x_arr+$0
000895r 2  A5 rr        		lda tmp1
000897r 2  C9 00        		cmp #0
000899r 2  10 08        		bpl :+
00089Br 2  4A 4A 4A 4A  		shr #4
00089Fr 2  09 F0        		ora #%11110000
0008A1r 2  D0 04        		bne :++
0008A3r 2               :
0008A3r 2  4A 4A 4A 4A  		shr #4
0008A7r 2               :
0008A7r 2  8D rr rr     		sta spr_velocity_x_arr+$0
0008AAr 2               		; 向きの更新
0008AAr 2  AD rr rr     		lda spr_float_velocity_x_arr+$0
0008ADr 2  F0 14        		beq :++							; 速度が0のとき向きフラグを更新しない（今の向きを継続利用）
0008AFr 2  30 0A        		bmi :+
0008B1r 2  AD rr rr     		lda spr_attr_arr				; 速度が正のとき向きフラグを1に
0008B4r 2  09 01        		ora #%0000_0001
0008B6r 2  8D rr rr     		sta spr_attr_arr+$0
0008B9r 2  D0 08        		bne :++		; ------------------
0008BBr 2               :
0008BBr 2  AD rr rr     		lda spr_attr_arr+$0				; 速度が負のとき向きフラグを0に
0008BEr 2  29 FE        		and #%1111_1110
0008C0r 2  8D rr rr     		sta spr_attr_arr+$0
0008C3r 2               :
0008C3r 2               		; 速度調整
0008C3r 2  A5 rr        		lda tmp1
0008C5r 2  C9 10        		cmp #$10
0008C7r 2  B0 07        		bcs EXIT
0008C9r 2  C9 06        		cmp #$06
0008CBr 2  90 03        		bcc EXIT
0008CDr 2  EE rr rr     		inc spr_velocity_x_arr+$0
0008D0r 2               EXIT:
0008D0r 2  AD rr rr     		lda spr_posX_arr+$0
0008D3r 2  18 6D rr rr  		add spr_velocity_x_arr+$0
0008D7r 2  8D rr rr     		sta spr_posX_tmp_arr+$0
0008DAr 2  60           		rts
0008DBr 2               		; ------------------------------
0008DBr 2               .endproc
0008DBr 2               
0008DBr 2               
0008DBr 2               ;*------------------------------------------------------------------------------
0008DBr 2               ; player animate
0008DBr 2               ; @PARAMS		None
0008DBr 2               ; @CLOBBERS		A tmp1
0008DBr 2               ; @RETURNS		None
0008DBr 2               ;*------------------------------------------------------------------------------
0008DBr 2               .proc _animate
0008DBr 2  A5 rr        		lda Player::is_jumping
0008DDr 2  F0 06        		beq :+
0008DFr 2  A9 04        		lda #4							; ジャンプ時のアニメーション番号
0008E1r 2  8D rr rr     		sta spr_anime_num
0008E4r 2  60           		rts
0008E5r 2               		; ------------------------------
0008E5r 2               :
0008E5r 2  AD rr rr     		lda spr_float_velocity_x_arr+$0
0008E8r 2  D0 06        		bne :+
0008EAr 2  A9 00        		lda #0
0008ECr 2  8D rr rr     		sta spr_anime_num+$0
0008EFr 2  60           		rts
0008F0r 2               		; ------------------------------
0008F0r 2               :										; 速度が0でないとき
0008F0r 2  A5 rr        		lda Joypad::joy1
0008F2r 2  29 03        		and #(Joypad::BTN_L|Joypad::BTN_R)
0008F4r 2  F0 29        		beq @NORMAL_MOVE
0008F6r 2  29 02        		and #Joypad::BTN_L
0008F8r 2  4A           		shr #1							; 左ボタンのフラグを最下位ビットに
0008F9r 2  85 rr        		sta tmp1
0008FBr 2  AD rr rr     		lda spr_float_velocity_x_arr+$0
0008FEr 2  0A           		asl								; 速度の最上位ビットを最下位ビットに入れる
0008FFr 2  A9 00        		lda #0
000901r 2  2A           		rol
000902r 2  C5 rr        		cmp tmp1
000904r 2  F0 19        		beq @NORMAL_MOVE
000906r 2               		; ブレーキ時の動作
000906r 2  C9 00        		cmp #0
000908r 2  F0 07        		beq @RIGHT
00090Ar 2  AD rr rr     		lda spr_attr_arr+$0				; 左ボタンが押されているとき
00090Dr 2  09 01        		ora #%0000_0001
00090Fr 2  D0 05        		bne :+		; ------------------
000911r 2               @RIGHT:
000911r 2  AD rr rr     		lda spr_attr_arr+$0
000914r 2  29 FE        		and #%1111_1110
000916r 2               :
000916r 2  8D rr rr     		sta spr_attr_arr+$0
000919r 2  A9 05        		lda #5							; ブレーキ時のアニメーション番号
00091Br 2  8D rr rr     		sta spr_anime_num+$0
00091Er 2  60           		rts
00091Fr 2               		; ------------------------------
00091Fr 2               @NORMAL_MOVE:							; 通常の進み方（ブレーキでない）をしているとき
00091Fr 2               		; MEMO: 工夫すればバイト数削れそうなプログラム
00091Fr 2  AD rr rr     		lda spr_float_velocity_x_arr+$0
000922r 2  10 05        		bpl :+
000924r 2  49 FF 18 69  		cnn								; 速度の絶対値を取る
000928r 2  01           
000929r 2               :
000929r 2  C9 10        		cmp #$10
00092Br 2  10 04        		bpl :+
00092Dr 2               		; スピードが$10以下
00092Dr 2  A9 04        		lda #4
00092Fr 2  D0 16        		bne @ANIMATE
000931r 2               :
000931r 2  C9 18        		cmp #$18
000933r 2  10 04        		bpl :+
000935r 2  A9 03        		lda #3
000937r 2  D0 0E        		bne @ANIMATE
000939r 2               :
000939r 2  C9 20        		cmp #$20
00093Br 2  10 04        		bpl :+
00093Dr 2  A9 02        		lda #2
00093Fr 2  D0 06        		bne @ANIMATE
000941r 2               :
000941r 2  C9 28        		cmp #$28
000943r 2  10 02        		bpl @ANIMATE
000945r 2  A9 01        		lda #1
000947r 2               @ANIMATE:								; タイマーと速度に応じた値を比較しアニメーションを進める
000947r 2  CD rr rr     		cmp spr_anime_timer+$0
00094Ar 2  10 14        		bpl @NO_CHANGE_CHR
00094Cr 2               
00094Cr 2  A9 00        		lda #0							; アニメーション変更
00094Er 2  8D rr rr     		sta spr_anime_timer+$0
000951r 2               
000951r 2  EE rr rr     		inc spr_anime_num+$0
000954r 2  AD rr rr     		lda spr_anime_num+$0
000957r 2  C9 04        		cmp #4
000959r 2  90 05        		bcc @NO_CHANGE_CHR
00095Br 2  A9 01        		lda #1							; アニメーション番号が超えたので最初に戻す
00095Dr 2  8D rr rr     		sta spr_anime_num+$0
000960r 2               @NO_CHANGE_CHR:
000960r 2  AD rr rr     		lda spr_anime_num+$0
000963r 2  D0 0A        		bne @EXIT
000965r 2               		; 歩き始め（止まっている状態から進み出した時）
000965r 2  A9 01        		lda #1							; 1F目から歩いているアニメーションにする
000967r 2  8D rr rr     		sta spr_anime_num+$0
00096Ar 2  A9 00        		lda #0							; タイマーリセット
00096Cr 2  8D rr rr     		sta spr_anime_timer+$0
00096Fr 2               @EXIT:
00096Fr 2  60           		rts
000970r 2               		; ------------------------------
000970r 2               
000970r 2               .endproc
000970r 2               
000970r 2               
000970r 2               ;*------------------------------------------------------------------------------
000970r 2               ; ジャンプするかの確認
000970r 2               ; @PARAMS		None
000970r 2               ; @CLOBBERS		A
000970r 2               ; @RETURNS		None
000970r 2               ;*------------------------------------------------------------------------------
000970r 2               .proc _jumpCheck
000970r 2  A5 rr        		lda Joypad::joy1
000972r 2  29 80        		and #Joypad::BTN_A
000974r 2  D0 01        		bne @SKIP1
000976r 2               		; 初めてAボタンが押されてないとき終了
000976r 2  60           		rts
000977r 2               		; ------------------------------
000977r 2               @SKIP1:
000977r 2  A5 rr        		lda Player::is_fly
000979r 2  D0 03        		bne @SKIP2
00097Br 2               		; 地面にいるときジャンプ開始準備
00097Br 2  20 rr rr     		jsr Player::_prepareJumping
00097Er 2               @SKIP2:
00097Er 2  60           		rts
00097Fr 2               		; ------------------------------
00097Fr 2               .endproc
00097Fr 2               
00097Fr 2               
00097Fr 2               ;*------------------------------------------------------------------------------
00097Fr 2               ; ジャンプの初期設定
00097Fr 2               ; @PARAMS		None
00097Fr 2               ; @CLOBBERS		A X
00097Fr 2               ; @RETURNS		None
00097Fr 2               ;*------------------------------------------------------------------------------
00097Fr 2               .proc _prepareJumping
00097Fr 2  A2 01        		ldx #1
000981r 2  86 rr        		stx Player::is_fly				; 空中にいるかつ
000983r 2  86 rr        		stx Player::is_jumping			; ジャンプ中
000985r 2               
000985r 2  CA           		dex
000986r 2  8E rr rr     		stx spr_decimal_part_velocity_y_arr+$0	; 補正値を0に
000989r 2               
000989r 2  AD rr rr     		lda spr_posY_arr+$0				; 現在のY座標を保存
00098Cr 2  85 rr        		sta Player::posY_origin
00098Er 2               
00098Er 2               		; X = 0
00098Er 2  AD rr rr     		lda spr_velocity_x_arr+$0
000991r 2  10 05        		bpl :+
000993r 2  49 FF 18 69  		cnn								; X方向のスピードの絶対値を求める
000997r 2  01           
000998r 2               :
000998r 2  C9 1C        		cmp #$1c
00099Ar 2  30 01        		bmi @SKIP1
00099Cr 2  E8           		inx								; x = 1
00099Dr 2               @SKIP1:
00099Dr 2  C9 19        		cmp #$19
00099Fr 2  30 01        		bmi @SKIP2
0009A1r 2  E8           		inx								; x = 2
0009A2r 2               @SKIP2:
0009A2r 2  C9 10        		cmp #$10
0009A4r 2  30 01        		bmi @SKIP3
0009A6r 2  E8           		inx								; x = 3
0009A7r 2               @SKIP3:
0009A7r 2  C9 09        		cmp #$09
0009A9r 2  30 01        		bmi @SKIP4
0009ABr 2  E8           		inx								; x = 4
0009ACr 2               @SKIP4:
0009ACr 2               		; 現在の速度に応じた初期データを格納
0009ACr 2  BD rr rr     		lda VER_FORCE_DECIMAL_PART_DATA, x
0009AFr 2  8D rr rr     		sta spr_decimal_part_force_y+$0
0009B2r 2  BD rr rr     		lda VER_FALL_FORCE_DATA, x
0009B5r 2  8D rr rr     		sta spr_force_fall_y+$0
0009B8r 2  BD rr rr     		lda INITIAL_VER_FORCE_DATA, x
0009BBr 2  8D rr rr     		sta spr_decimal_part_velocity_y_arr+$0
0009BEr 2  BD rr rr     		lda INITIAL_VER_SPEED_DATA, x
0009C1r 2  8D rr rr     		sta spr_velocity_y_arr+$0
0009C4r 2               
0009C4r 2  60           		rts
0009C5r 2               		; ------------------------------
0009C5r 2               .endproc
0009C5r 2               
0009C5r 2               
0009C5r 2               ;*------------------------------------------------------------------------------
0009C5r 2               ; Y方向の速度決定前のちょっとした動作（よくわかんない）
0009C5r 2               ; @PARAMS		None
0009C5r 2               ; @CLOBBERS		A
0009C5r 2               ; @RETURNS		None
0009C5r 2               ;*------------------------------------------------------------------------------
0009C5r 2               .proc _moveYProcess
0009C5r 2  AD rr rr     		lda spr_velocity_y_arr+$0
0009C8r 2  10 0C        		bpl @SKIP1						; 速度が正（落下中）はスキップ
0009CAr 2  A5 rr        		lda Joypad::joy1
0009CCr 2  29 80        		and #Joypad::BTN_A
0009CEr 2  D0 0C        		bne @SKIP2						; Aボタンが押されているとき
0009D0r 2  A5 rr        		lda Joypad::joy1_prev
0009D2r 2  29 80        		and #Joypad::BTN_A
0009D4r 2  F0 06        		beq @SKIP2						; 今も1F前もAボタンが押されていないとき
0009D6r 2               @SKIP1:
0009D6r 2  AD rr rr     		lda spr_force_fall_y+$0
0009D9r 2  8D rr rr     		sta spr_decimal_part_force_y+$0	; 初期化
0009DCr 2               @SKIP2:
0009DCr 2  20 rr rr     		jsr Player::_physicsY
0009DFr 2  60           		rts
0009E0r 2               		; ------------------------------
0009E0r 2               .endproc
0009E0r 2               
0009E0r 2               
0009E0r 2               ;*------------------------------------------------------------------------------
0009E0r 2               ; Y方向の速度決定，仮Y座標決定
0009E0r 2               ; @PARAMS		None
0009E0r 2               ; @CLOBBERS		A X
0009E0r 2               ; @RETURNS		None
0009E0r 2               ;*------------------------------------------------------------------------------
0009E0r 2               .proc _physicsY
0009E0r 2  A2 00        		ldx #0
0009E2r 2  8E rr rr     		stx spr_fix_val_y+$0			; 初期化
0009E5r 2               
0009E5r 2  AD rr rr     		lda spr_pos_y_decimal_part+$0
0009E8r 2  18 6D rr rr  		add spr_decimal_part_force_y+$0
0009ECr 2  8D rr rr     		sta spr_pos_y_decimal_part+$0
0009EFr 2  90 07        		bcc @SKIP_OVERFLOW
0009F1r 2               		; オーバーフローしてたら
0009F1r 2  8E rr rr     		stx spr_pos_y_decimal_part+$0	; x = 0
0009F4r 2  E8           		inx								; x = 1
0009F5r 2  8E rr rr     		stx spr_fix_val_y+$0			; 補正値があったらここで修正
0009F8r 2               @SKIP_OVERFLOW:
0009F8r 2  AD rr rr     		lda spr_decimal_part_velocity_y_arr+$0
0009FBr 2  18 6D rr rr  		add spr_decimal_part_force_y+$0
0009FFr 2  8D rr rr     		sta spr_decimal_part_velocity_y_arr+$0
000A02r 2  90 17        		bcc @EXIT
000A04r 2               
000A04r 2  A9 00        		lda #0
000A06r 2  8D rr rr     		sta spr_decimal_part_velocity_y_arr+$0
000A09r 2  AE rr rr     		ldx spr_velocity_y_arr+$0
000A0Cr 2  E8           		inx
000A0Dr 2  E0 04        		cpx #DOWN_SPEED_LIMIT
000A0Fr 2  30 07        		bmi @STORE_VER_SPEED
000A11r 2               
000A11r 2  A2 04        		ldx #DOWN_SPEED_LIMIT
000A13r 2  A9 00        		lda #0
000A15r 2  8D rr rr     		sta spr_decimal_part_velocity_y_arr+$0
000A18r 2               @STORE_VER_SPEED:
000A18r 2  8E rr rr     		stx spr_velocity_y_arr+$0
000A1Br 2               
000A1Br 2               @EXIT:
000A1Br 2  AD rr rr     		lda spr_posY_arr+$0
000A1Er 2  18 6D rr rr  		add spr_velocity_y_arr+$0
000A22r 2  8D rr rr     		sta spr_posY_tmp_arr+$0			; 仮Y座標
000A25r 2  60           		rts
000A26r 2               		; ------------------------------
000A26r 2               .endproc
000A26r 2               
000A26r 2               
000A26r 2               ;*------------------------------------------------------------------------------
000A26r 2               ; あたり判定
000A26r 2               ; @PARAMS		None
000A26r 2               ; @CLOBBERS		A X
000A26r 2               ; @RETURNS		None
000A26r 2               ;*------------------------------------------------------------------------------
000A26r 2               .proc _checkCollision
000A26r 2               	; スクロール量と画面を考慮してマリオのX座標を取得
000A26r 2  AD rr rr     	lda spr_posX_tmp_arr+$0
000A29r 2  18 65 rr     	add scroll_x
000A2Cr 2  A5 rr        	lda main_disp
000A2Er 2  18 69 00     	add #0
000A31r 2  29 01        	and #%0000_0001
000A33r 2  85 rr        	sta tmp2
000A35r 2               
000A35r 2  AD rr rr     	lda spr_posX_tmp_arr+$0
000A38r 2  18 65 rr     	add scroll_x
000A3Br 2  4A 4A 4A 4A  	shr #4
000A3Fr 2  85 rr        	sta mario_block_x
000A41r 2               
000A41r 2               	; マリオのY座標を取得してブロック単位に変換
000A41r 2  AD rr rr     	lda spr_posY_tmp_arr+$0
000A44r 2  18           	clc
000A45r 2  69 08        	adc #8 ; 中心点に変換
000A47r 2  4A 4A 4A 4A  	shr #4
000A4Br 2  C9 02        	cmp #2
000A4Dr 2  B0 01        	bcs :+
000A4Fr 2  60           	rts									; 上二列にマリオがいるとき
000A50r 2               	; ------------------------------
000A50r 2               :
000A50r 2  38 E9 02     	sub #2
000A53r 2  85 rr        	sta mario_block_y
000A55r 2               
000A55r 2               	; 各方向の衝突判定
000A55r 2               	; 上方向
000A55r 2  A5 rr        	lda mario_block_y
000A57r 2  38 E9 01     	sub #1
000A5Ar 2  85 rr        	sta tmp_y
000A5Cr 2  A5 rr        	lda mario_block_x
000A5Er 2  85 rr        	sta tmp_x
000A60r 2  A9 01        	lda #1
000A62r 2  85 rr        	sta tmp1
000A64r 2  20 rr rr     	jsr _checkBlock
000A67r 2               
000A67r 2               	; 下方向
000A67r 2  A5 rr        	lda mario_block_y
000A69r 2  18 69 01     	add #1
000A6Cr 2  85 rr        	sta tmp_y
000A6Er 2  A5 rr        	lda mario_block_x
000A70r 2  85 rr        	sta tmp_x
000A72r 2  A9 02        	lda #2
000A74r 2  85 rr        	sta tmp1
000A76r 2  20 rr rr     	jsr _checkBlock
000A79r 2               
000A79r 2               	; 左方向
000A79r 2  A5 rr        	lda mario_block_y
000A7Br 2  85 rr        	sta tmp_y
000A7Dr 2  A5 rr        	lda mario_block_x
000A7Fr 2  38 E9 01     	sub #1
000A82r 2  85 rr        	sta tmp_x
000A84r 2  A9 03        	lda #3
000A86r 2  85 rr        	sta tmp1
000A88r 2  20 rr rr     	jsr _checkBlock
000A8Br 2               
000A8Br 2               	; 右方向
000A8Br 2  A5 rr        	lda mario_block_y
000A8Dr 2  85 rr        	sta tmp_y
000A8Fr 2  A5 rr        	lda mario_block_x
000A91r 2  18 69 01     	add #1
000A94r 2  85 rr        	sta tmp_x
000A96r 2  A9 04        	lda #4
000A98r 2  85 rr        	sta tmp1
000A9Ar 2  20 rr rr     	jsr _checkBlock
000A9Dr 2               
000A9Dr 2  60           	rts
000A9Er 2               	; ------------------------------
000A9Er 2               .endproc
000A9Er 2               
000A9Er 2               
000A9Er 2               .proc _checkBlock
000A9Er 2               	; ブロックの位置を取得
000A9Er 2  A5 rr        	lda tmp_y
000AA0r 2  0A 0A 0A 0A  	shl #4
000AA4r 2  18           	clc
000AA5r 2  65 rr        	adc tmp_x
000AA7r 2  AA           	tax
000AA8r 2               
000AA8r 2               	; 画面が$2000番台か$2400番台かを確認
000AA8r 2  A5 rr        	lda tmp2
000AAAr 2  F0 06        	beq @LOAD_MAP_0400
000AACr 2               
000AACr 2               	; $0500番台のブロックデータを確認
000AACr 2               @LOAD_MAP_0500:
000AACr 2  BD 00 05     	lda $0500, x
000AAFr 2  4C rr rr     	jmp @CHECK_COLLISION
000AB2r 2               
000AB2r 2               	; $0400番台のブロックデータを確認
000AB2r 2               @LOAD_MAP_0400:
000AB2r 2  BD 00 04     	lda $0400, x
000AB5r 2               
000AB5r 2               @CHECK_COLLISION:
000AB5r 2               	; ブロックが存在するか確認
000AB5r 2  C9 00        	cmp #$00
000AB7r 2  F0 4C        	beq @EXIT
000AB9r 2               
000AB9r 2               	; 衝突がある場合の処理
000AB9r 2  A5 rr        	lda tmp1
000ABBr 2  C9 01        	cmp #1
000ABDr 2  F0 0E        	beq @COLLISION_UP
000ABFr 2  C9 02        	cmp #2
000AC1r 2  F0 18        	beq @COLLISION_DOWN
000AC3r 2  C9 03        	cmp #3
000AC5r 2  F0 25        	beq @COLLISION_LEFT
000AC7r 2  C9 04        	cmp #4
000AC9r 2  F0 2F        	beq @COLLISION_RIGHT
000ACBr 2  D0 38        	bne @EXIT
000ACDr 2               
000ACDr 2               @COLLISION_UP:
000ACDr 2               	; 上方向の衝突判定
000ACDr 2  AD rr rr     	lda spr_posY_tmp_arr+$0
000AD0r 2  29 F0        	and #BYT_GET_HI
000AD2r 2  18 69 10     	add #$10
000AD5r 2  8D rr rr     	sta spr_posY_tmp_arr+$0
000AD8r 2  4C rr rr     	jmp @EXIT
000ADBr 2               
000ADBr 2               @COLLISION_DOWN:
000ADBr 2               	; 下方向の衝突判定
000ADBr 2  AD rr rr     	lda spr_posY_tmp_arr+$0
000ADEr 2  29 F0        	and #BYT_GET_HI
000AE0r 2  8D rr rr     	sta spr_posY_tmp_arr+$0
000AE3r 2  A9 00        	lda #0
000AE5r 2  85 rr        	sta Player::is_fly
000AE7r 2  85 rr        	sta Player::is_jumping
000AE9r 2  4C rr rr     	jmp @EXIT
000AECr 2               
000AECr 2               @COLLISION_LEFT:
000AECr 2               	; 左方向の衝突判定
000AECr 2  AD rr rr     	lda spr_posX_tmp_arr+$0
000AEFr 2  29 F0        	and #BYT_GET_HI
000AF1r 2  18 69 10     	add #$10
000AF4r 2  8D rr rr     	sta spr_posX_tmp_arr+$0
000AF7r 2  4C rr rr     	jmp @EXIT
000AFAr 2               
000AFAr 2               @COLLISION_RIGHT:
000AFAr 2               	; 右方向の衝突判定
000AFAr 2  AD rr rr     	lda spr_posX_tmp_arr+$0
000AFDr 2  29 F0        	and #BYT_GET_HI
000AFFr 2  8D rr rr     	sta spr_posX_tmp_arr+$0
000B02r 2  4C rr rr     	jmp @EXIT
000B05r 2               
000B05r 2               @EXIT:
000B05r 2  60           	rts
000B06r 2               .endproc
000B06r 2               
000B06r 2               .endscope
000B06r 2               
000B06r 1               .include "./asm/nmi.asm"
000B06r 2               ;*------------------------------------------------------------------------------
000B06r 2               ; bg_buffを読み取り，指定アドレスに書き込んでカウンタをインクリメント
000B06r 2               ; Unused
000B06r 2               ; @PARAMS		ADDR: Forwarding address
000B06r 2               ; @CLOBBERS		A X
000B06r 2               ; @RETURNS		None
000B06r 2               ;*------------------------------------------------------------------------------
000B06r 2               
000B06r 2               .code									; ----- code -----
000B06r 2               
000B06r 2               .macro tfrDataToPPU ADDR
000B06r 2               	lda bg_buff, x
000B06r 2               	sta ADDR
000B06r 2               	inx
000B06r 2               .endmacro
000B06r 2               
000B06r 2               ; memo
000B06r 2               ; ----- PPU buff data structure -----
000B06r 2               ; r: Direction
000B06r 2               ; 	Bit0 is a flag, others are 1.
000B06r 2               ; 	-> 0b1111_111[0/1]
000B06r 2               ; 	-> 0xFE（Horizontal）/0xFF（Vertical）
000B06r 2               ; a: Addr
000B06r 2               ; d: Data
000B06r 2               ; r [a a] [d d d ... d] r [a a] [d d ... d]
000B06r 2               
000B06r 2               
000B06r 2               ;*------------------------------------------------------------------------------
000B06r 2               ; NMI (Interrupt)
000B06r 2               ; @CLOBBERS	 X Y (When end main process.)
000B06r 2               ; To shorten the clock, put the buffer data on the stack
000B06r 2               ; 	(Shorten clock by buff data length)
000B06r 2               ; 	pla -> 3 clc
000B06r 2               ; 	lda ZP/ABSORUTE, x -> 4 clc
000B06r 2               ;*------------------------------------------------------------------------------
000B06r 2               
000B06r 2               .code									; ----- code -----
000B06r 2               
000B06r 2               .proc _nmi
000B06r 2  48           		pha
000B07r 2  E6 rr        		inc nmi_cnt
000B09r 2  A5 rr        		lda is_processing_main
000B0Br 2  F0 05        		beq @NMI_MAIN
000B0Dr 2  68           		pla
000B0Er 2  20 rr rr     		jsr Subfunc::_setScroll
000B11r 2  40           		rti	; --------------------------
000B12r 2               
000B12r 2               @NMI_MAIN:
000B12r 2  A5 rr        		lda is_updated_map
000B14r 2  F0 5E        		beq @PRINT
000B16r 2  A2 00        		ldx #0
000B18r 2  86 rr        		stx tmp1
000B1Ar 2               @PLT_STORE_LOOP:
000B1Ar 2  A5 rr        		lda plt_addr+1
000B1Cr 2  8D 06 20     		sta PPU_ADDR
000B1Fr 2               
000B1Fr 2  A5 rr        		lda plt_addr+0
000B21r 2  18 69 08     		add #8
000B24r 2  18 65 rr     		add tmp1
000B27r 2  8D 06 20     		sta PPU_ADDR
000B2Ar 2               
000B2Ar 2  BD 34 01     		lda bg_plt_buff, x
000B2Dr 2  8D 07 20     		sta PPU_DATA
000B30r 2               
000B30r 2  A5 rr        		lda tmp1
000B32r 2  18 69 08     		add #8
000B35r 2  85 rr        		sta tmp1
000B37r 2               
000B37r 2  E8           		inx
000B38r 2  E0 07        		cpx #7
000B3Ar 2  90 DE        		bcc @PLT_STORE_LOOP
000B3Cr 2               
000B3Cr 2  A5 rr        		lda ppu_ctrl1_cpy
000B3Er 2  09 04        		ora #%0000_0100					; Vertical mode
000B40r 2  85 rr        		sta ppu_ctrl1_cpy
000B42r 2  8D 00 20     		sta PPU_CTRL1					; Not use restorePPUSet()
000B45r 2               
000B45r 2               		; line 1
000B45r 2  A5 rr        		lda ppu_bg_addr+HI
000B47r 2  8D 06 20     		sta PPU_ADDR
000B4Ar 2  A5 rr        		lda ppu_bg_addr+LO
000B4Cr 2  8D 06 20     		sta PPU_ADDR
000B4Fr 2               
000B4Fr 2  A2 00        		ldx #0
000B51r 2               @STORE_MAP_LOOP:
000B51r 2  BD 00 01     		lda bg_map_buff, x
000B54r 2  8D 07 20     		sta PPU_DATA
000B57r 2  E8           		inx
000B58r 2  E0 1A        		cpx #$1a
000B5Ar 2  D0 F5        		bne @STORE_MAP_LOOP
000B5Cr 2               
000B5Cr 2               		; line 2
000B5Cr 2  A5 rr        		lda ppu_bg_addr+HI
000B5Er 2  8D 06 20     		sta PPU_ADDR
000B61r 2  A6 rr        		ldx ppu_bg_addr+LO
000B63r 2  E8           		inx
000B64r 2  8E 06 20     		stx PPU_ADDR
000B67r 2               
000B67r 2  A2 00        		ldx #0
000B69r 2               @STORE_MAP_LOOP2:
000B69r 2  BD 1A 01     		lda bg_map_buff+$1a, x
000B6Cr 2  8D 07 20     		sta PPU_DATA
000B6Fr 2  E8           		inx
000B70r 2  E0 1A        		cpx #$1a
000B72r 2  D0 F5        		bne @STORE_MAP_LOOP2
000B74r 2               
000B74r 2               @PRINT:
000B74r 2  A9 00        		lda #0
000B76r 2  C5 rr        		cmp bg_buff_pointer
000B78r 2  F0 35        		beq @STORE_CHR
000B7Ar 2  AA           		tax
000B7Br 2  BD 49 01     		lda bg_buff, x
000B7Er 2               @SET_MODE:
000B7Er 2  29 01        		and #%00000001					; Get flag
000B80r 2  0A 0A        		shl #2							; Move flag to Bit2
000B82r 2  85 rr        		sta tmp1						; Start using tmp1
000B84r 2  A5 rr        		lda ppu_ctrl1_cpy
000B86r 2  29 FB        		and #%11111011					; Mask direction flag(Horizontal(+1)/Vertical(+32))
000B88r 2  05 rr        		ora tmp1						; End using tmp1
000B8Ar 2  85 rr        		sta ppu_ctrl1_cpy
000B8Cr 2  8D 00 20     		sta PPU_CTRL1					; Not use restorePPUSet()
000B8Fr 2               @SET_ADDR:
000B8Fr 2  E8           		inx								; Not do inx when go to @EXIT
000B90r 2  BD 49 01     		lda bg_buff, x
000B93r 2  8D 06 20     		sta PPU_ADDR
000B96r 2  E8           		inx
000B97r 2  BD 49 01     		lda bg_buff, x
000B9Ar 2  8D 06 20     		sta PPU_ADDR
000B9Dr 2  E8           		inx
000B9Er 2               @STORE_DATA:
000B9Er 2  BD 49 01     		lda bg_buff, x
000BA1r 2  A8           		tay
000BA2r 2  C9 FE        		cmp #$fe
000BA4r 2  B0 D8        		bcs @SET_MODE					; no inx
000BA6r 2  98           		tya
000BA7r 2  8D 07 20     		sta PPU_DATA
000BAAr 2  E8           		inx
000BABr 2  E4 rr        		cpx bg_buff_pointer
000BADr 2  D0 EF        		bne @STORE_DATA
000BAFr 2               
000BAFr 2               		; @SET_MODE + @SET_ADDR = 51 cycle
000BAFr 2               		; @STORE_DATA (return @STORE_DATA) = 24 cycle
000BAFr 2               		; @STORE_DATA (return @SET_MODE) = 13 cycle
000BAFr 2               
000BAFr 2               		; str1 = "A  B"
000BAFr 2               		; 	=> 51 + space_len * 24 cycle
000BAFr 2               		; 	=> mode(1) + addr(2) + data(2 + space_len) = (5 + space_len) bytes
000BAFr 2               		; 	|  len  || 1  | 2  |  3  |  4  |
000BAFr 2               		; 	| cycle || 75 | 99 | 123 | 147 |
000BAFr 2               		;	| bytes || 6  | 7  |  8  |  9  |
000BAFr 2               		; str2 = 'A', str3 = 'B'
000BAFr 2               		; 	=> (51 + 13) * 2 = 64 * 2 = 128 cycle
000BAFr 2               		; 	=> (mode(1) + addr(2) + data(1)) * 2 = 8 bytes
000BAFr 2               		; space length:
000BAFr 2               		; 	1: 75 cycle,	6 bytes (str1)
000BAFr 2               		; 	2: 99 cycle,	7 bytes
000BAFr 2               		; 	3: 123 cycle,	8 bytes
000BAFr 2               		; 	4~: 128 cycle,	8 bytes (str2)
000BAFr 2               @STORE_CHR:
000BAFr 2  A9 00        		lda #0
000BB1r 2  8D 03 20     		sta OAM_ADDR
000BB4r 2  A9 03        		lda #>CHR_BUFF
000BB6r 2  8D 14 40     		sta OAM_DMA
000BB9r 2               
000BB9r 2               @EXIT:
000BB9r 2  A9 01        		lda #1
000BBBr 2  85 rr        		sta is_processing_main
000BBDr 2  4A           		shr #1							; A = 0
000BBEr 2  85 rr        		sta bg_buff_pointer
000BC0r 2  85 rr        		sta is_updated_map
000BC2r 2  E6 rr        		inc frm_cnt
000BC4r 2  68           		pla
000BC5r 2  40           		rti	; --------------------------
000BC6r 2               .endproc
000BC6r 2               
000BC6r 1               .include "./asm/init.asm"
000BC6r 2               .code									; ----- code -----
000BC6r 2               
000BC6r 2               .macro init
000BC6r 2               		sei								; Ban IRQ
000BC6r 2               		cld								; Ban BCD
000BC6r 2               		ldx #$40
000BC6r 2               		stx JOYPAD2
000BC6r 2               		ldx #$ff
000BC6r 2               		txs
000BC6r 2               		inx								; X = 0
000BC6r 2               		stx PPU_CTRL1
000BC6r 2               		stx PPU_CTRL2
000BC6r 2               		stx SOUND_DP_1					; Ban IRQ of APU DMC (bit7)
000BC6r 2               		stx SOUND_CHANNEL
000BC6r 2               
000BC6r 2               		/*
000BC6r 2               		A & $2002 -> set Z(zero flag)
000BC6r 2               		$2002 bit7(vblank) -> N(negative), bit6(sprite 0 hit) -> V(overflow)
000BC6r 2               		Reset vblank & sprite 0 hit flag
000BC6r 2               		(The state of this flag after reset is undefined.)
000BC6r 2               		*/
000BC6r 2               		bit $2002
000BC6r 2               		jsr Subfunc::_waitVblank		; 1st time
000BC6r 2               
000BC6r 2               		txa								; A = 0
000BC6r 2               @CLR_MEM:
000BC6r 2               		sta $00, x
000BC6r 2               		sta $0100, x
000BC6r 2               		sta $0200, x
000BC6r 2               		sta $0400, x
000BC6r 2               		sta $0500, x
000BC6r 2               		sta $0600, x
000BC6r 2               		sta $0700, x
000BC6r 2               		inx
000BC6r 2               		bne @CLR_MEM
000BC6r 2               
000BC6r 2               		lda #$ff
000BC6r 2               @CLR_CHR_MEM:
000BC6r 2               		sta $0300, x
000BC6r 2               		inx
000BC6r 2               		bne @CLR_CHR_MEM
000BC6r 2               
000BC6r 2               		; Zero sprite
000BC6r 2               		lda #$10-2-1
000BC6r 2               		sta CHR_BUFF+0
000BC6r 2               		lda #$ff
000BC6r 2               		sta CHR_BUFF+1
000BC6r 2               		lda #%0000_0010
000BC6r 2               		sta CHR_BUFF+2
000BC6r 2               		lda #$0f
000BC6r 2               		sta CHR_BUFF+3
000BC6r 2               
000BC6r 2               		jsr Subfunc::_waitVblank		; 2nd time
000BC6r 2               
000BC6r 2               		; ------- PPU stabilizes -------
000BC6r 2               
000BC6r 2               		lda #%00010000					; SPR = $0000, BG = $1000
000BC6r 2               		sta ppu_ctrl1_cpy
000BC6r 2               		jsr Subfunc::_restorePPUSet
000BC6r 2               
000BC6r 2               		; Clear VRAM
000BC6r 2               		lda #$20
000BC6r 2               		sta PPU_ADDR
000BC6r 2               		lda #$00
000BC6r 2               		sta PPU_ADDR
000BC6r 2               
000BC6r 2               		ldy #8
000BC6r 2               		tax
000BC6r 2               @CLR_VRAM:
000BC6r 2               		sta PPU_DATA
000BC6r 2               		inx
000BC6r 2               		bne @CLR_VRAM
000BC6r 2               		dey
000BC6r 2               		bne @CLR_VRAM
000BC6r 2               
000BC6r 2               
000BC6r 2               		jsr Subfunc::_waitVblank
000BC6r 2               
000BC6r 2               
000BC6r 2               		tfrPlt
000BC6r 2               
000BC6r 2               		; Change bg color (black)
000BC6r 2               		lda #$3f
000BC6r 2               		sta PPU_ADDR
000BC6r 2               		lda #$00
000BC6r 2               		sta PPU_ADDR
000BC6r 2               		lda #$0f
000BC6r 2               		sta PPU_DATA
000BC6r 2               		; 画面OFF中は最後に指定したアドレスの色が背景になる（指定なし→3f01の色が使用される）
000BC6r 2               		lda #$3f
000BC6r 2               		sta PPU_ADDR
000BC6r 2               		lda #$00
000BC6r 2               		sta PPU_ADDR
000BC6r 2               
000BC6r 2               	lda #'G'
000BC6r 2               	sta DrawMap::fill_ground_block
000BC6r 2               
000BC6r 2               	lda #0
000BC6r 2               	sta is_scroll_locked
000BC6r 2               
000BC6r 2               		jsr Subfunc::_dispStatus
000BC6r 2               
000BC6r 2               	; sprite
000BC6r 2               	lda #$20
000BC6r 2               	sta spr_posX_arr+0
000BC6r 2               	lda #$c0
000BC6r 2               	sta spr_posY_arr+0
000BC6r 2               	ldx #PLAYER_SPR_ID					; spr id
000BC6r 2               	ldy #PLAYER_CHR_BUFF_INDEX			; buff index (0は0爆弾用のスプライト)
000BC6r 2               	jsr Sprite::_tfrToChrBuff
000BC6r 2               
000BC6r 2               		lda #0
000BC6r 2               		sta is_updated_map
000BC6r 2               
000BC6r 2               		lda ppu_ctrl1_cpy				; NMI ON
000BC6r 2               		ora #%10000000
000BC6r 2               		sta ppu_ctrl1_cpy
000BC6r 2               		jsr Subfunc::_restorePPUSet
000BC6r 2               
000BC6r 2               		jsr Subfunc::_sleepOneFrame		; draw disp status
000BC6r 2               
000BC6r 2               		ldy #0
000BC6r 2               		jsr DrawMap::_changeStage
000BC6r 2               
000BC6r 2               .endmacro
000BC6r 2               
000BC6r 1               .include "./asm/func.asm"				; いくつかのファイルのインクルードが必要な関数群
000BC6r 2               .scope Func
000BC6r 2               
000BC6r 2               ;*------------------------------------------------------------------------------
000BC6r 2               ; スクロール
000BC6r 2               ; @PARAMS		A: amount of scroll
000BC6r 2               ; @CLOBBERS		A, tmp1, tmp2
000BC6r 2               ; @RETURNS		None
000BC6r 2               ;*------------------------------------------------------------------------------
000BC6r 2               
000BC6r 2               .proc _scroll
000BC6r 2  A5 rr        		lda is_scroll_locked
000BC8r 2  D0 28        		bne @SKIP_UPDATE_LINE
000BCAr 2               
000BCAr 2  A5 rr        		lda scroll_x
000BCCr 2  29 F0        		and #BYT_GET_HI
000BCEr 2  85 rr        		sta tmp1
000BD0r 2               
000BD0r 2  A5 rr        		lda scroll_x
000BD2r 2  18 65 rr     		add scroll_amount
000BD5r 2  85 rr        		sta scroll_x
000BD7r 2  29 F0        		and #BYT_GET_HI						; Not clobber carry
000BD9r 2  85 rr        		sta tmp2
000BDBr 2               
000BDBr 2  90 0C        		bcc @SKIP_CHANGE_DISP
000BDDr 2  A5 rr        		lda main_disp
000BDFr 2  49 01        		eor #%0000_0001
000BE1r 2  85 rr        		sta main_disp
000BE3r 2               
000BE3r 2  A5 rr        		lda ppu_ctrl1_cpy
000BE5r 2  49 01        		eor #%0000_0001
000BE7r 2  85 rr        		sta ppu_ctrl1_cpy
000BE9r 2               
000BE9r 2               @SKIP_CHANGE_DISP:
000BE9r 2  A5 rr        		lda tmp1
000BEBr 2  C5 rr        		cmp tmp2
000BEDr 2  F0 03        		beq @SKIP_UPDATE_LINE
000BEFr 2  20 rr rr     		jsr DrawMap::_updateOneLine
000BF2r 2               @SKIP_UPDATE_LINE:
000BF2r 2               
000BF2r 2  60           		rts
000BF3r 2               		; ------------------------------
000BF3r 2               .endproc
000BF3r 2               
000BF3r 2               
000BF3r 2               .endscope
000BF3r 2               
000BF3r 1               .include "main.asm"
000BF3r 2               ;*------------------------------------------------------------------------------
000BF3r 2               ; メインルーチン
000BF3r 2               ;*------------------------------------------------------------------------------
000BF3r 2               
000BF3r 2               .code									; ----- code -----
000BF3r 2               
000BF3r 2               .proc _main
000BF3r 2               		; -------- Vblank終了待ち --------
000BF3r 2  A5 rr        		lda is_processing_main
000BF5r 2  F0 FC        		beq _main
000BF7r 2               
000BF7r 2               		; ----------- 0爆弾前 -----------
000BF7r 2               
000BF7r 2  A5 rr        		lda ppu_ctrl1_cpy				; ステータス表示の為$2000の画面を表示
000BF9r 2  29 FC        		and #%1111_1100
000BFBr 2  8D 00 20     		sta PPU_CTRL1					; 後でrestoreできるようにRAMにはコピーを取らない -> ??? 分かったら書き換えておいて
000BFEr 2               
000BFEr 2  A9 00        		lda #0							; ステータス表示の為リセット
000C00r 2  8D 05 20     		sta PPU_SCROLL
000C03r 2  8D 05 20     		sta PPU_SCROLL
000C06r 2               
000C06r 2               @WAIT_FINISH_VBLANK:
000C06r 2  2C 02 20     		bit PPU_STATUS
000C09r 2  70 FB        		bvs @WAIT_FINISH_VBLANK
000C0Br 2               
000C0Br 2  20 rr rr     		jsr Joypad::_getJoyData
000C0Er 2               
000C0Er 2               @WAIT_ZERO_BOMB:
000C0Er 2  2C 02 20     		bit PPU_STATUS
000C11r 2  50 FB        		bvc @WAIT_ZERO_BOMB
000C13r 2               
000C13r 2  A0 14        		ldy #20							; 10ぐらいまで乱れる，余裕もって20に
000C15r 2               :
000C15r 2  88           		dey
000C16r 2  D0 FD        		bne :-
000C18r 2               
000C18r 2               		; ----------- 0爆弾後 -----------
000C18r 2               
000C18r 2  20 rr rr     		jsr Subfunc::_setScroll
000C1Br 2               
000C1Br 2               	; inc timer
000C1Br 2  EE rr rr     	inc spr_anime_timer+$0
000C1Er 2               
000C1Er 2               	; chr move
000C1Er 2  A2 01        	ldx #PLAYER_SPR_ID					; spr id
000C20r 2  20 rr rr     	jsr Sprite::_moveSprite
000C23r 2  A2 01        	ldx #PLAYER_SPR_ID					; spr id
000C25r 2  A0 00        	ldy #PLAYER_CHR_BUFF_INDEX			; buff index (0は0爆弾用のスプライト)
000C27r 2  20 rr rr     	jsr Sprite::_tfrToChrBuff
000C2Ar 2               
000C2Ar 2  20 rr rr     	jsr Func::_scroll
000C2Dr 2               
000C2Dr 2               		; Aボタン
000C2Dr 2  A5 rr        		lda Joypad::joy1_pushstart
000C2Fr 2  29 80        		and #Joypad::BTN_A
000C31r 2  F0 00        		beq @NO_PUSHED_BTN_A
000C33r 2               
000C33r 2               		; jsr DrawMap::_updateOneLine
000C33r 2               @NO_PUSHED_BTN_A:
000C33r 2               		; Bボタン
000C33r 2  A5 rr        		lda Joypad::joy1
000C35r 2  29 40        		and #Joypad::BTN_B
000C37r 2  F0 00        		beq @NO_PUSHED_BTN_B
000C39r 2               
000C39r 2               		; ldy #1
000C39r 2               		; jsr DrawMap::_changeStage
000C39r 2               @NO_PUSHED_BTN_B:
000C39r 2               		; ↑ボタン
000C39r 2  A5 rr        		lda Joypad::joy1_pushstart
000C3Br 2  29 08        		and #Joypad::BTN_U
000C3Dr 2  F0 00        		beq @NO_PUSHED_BTN_U
000C3Fr 2               
000C3Fr 2               @NO_PUSHED_BTN_U:
000C3Fr 2               		; ↓ボタン
000C3Fr 2  A5 rr        		lda Joypad::joy1_pushstart
000C41r 2  29 04        		and #Joypad::BTN_D
000C43r 2  F0 00        		beq @NO_PUSHED_BTN_D
000C45r 2               
000C45r 2               @NO_PUSHED_BTN_D:
000C45r 2               
000C45r 2  20 rr rr     		jsr Player::_physicsX
000C48r 2  20 rr rr     		jsr Player::_jumpCheck
000C4Br 2  20 rr rr     		jsr Player::_moveYProcess
000C4Er 2  20 rr rr     		jsr Player::_checkCollision
000C51r 2  20 rr rr     		jsr Player::_animate
000C54r 2               
000C54r 2               
000C54r 2               		; ----- End main -----
000C54r 2  A9 00        		lda #0
000C56r 2  85 rr        		sta is_processing_main
000C58r 2  4C rr rr     		jmp _main
000C5Br 2               		; ------------------------------
000C5Br 2               .endproc
000C5Br 2               
000C5Br 1               
000C5Br 1               
000C5Br 1               .segment "DMA_MEM"
000000r 1  xx xx xx xx  		.tag SPR_TBL
000004r 1  xx xx xx xx  
000008r 1  xx xx xx xx  
000100r 1               
000100r 1               
000100r 1               .code									; ----- code -----
000C5Br 1               .segment "STARTUP"
000000r 1               
000000r 1               .proc _reset
000000r 1  78 D8 A2 40  		init
000004r 1  8E 17 40 A2  
000008r 1  FF 9A E8 8E  
000102r 1               
000102r 1  A9 01        		lda #1
000104r 1  85 rr        		sta is_processing_main
000106r 1               
000106r 1  4C rr rr     		jmp _main
000109r 1               		; ------------------------------
000109r 1               .endproc
000109r 1               
000109r 1               
000109r 1               .proc _irq
000109r 1  40           		rti
00010Ar 1               .endproc
00010Ar 1               
00010Ar 1               
00010Ar 1               .segment "CHARS"
000000r 1  03 0F 1F 1F  		.incbin "spr_bg.chr"
000004r 1  1C 24 26 66  
000008r 1  00 00 00 00  
002000r 1               
002000r 1               
002000r 1               .segment "VECINFO"
000000r 1  rr rr        		.addr _nmi
000002r 1  rr rr        		.addr _reset
000004r 1  rr rr        		.addr _irq
000004r 1               
